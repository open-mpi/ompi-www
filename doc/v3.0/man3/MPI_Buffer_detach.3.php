<?php
$topdir = "../../..";
$title = "MPI_Buffer_detach(3) man page (version 3.0.3)";
$meta_desc = "Open MPI v3.0.3 man page: MPI_BUFFER_DETACH(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Buffer_detach</b> - Removes an existing buffer (for use in <a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a>,
etc.)
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Buffer_detach(void *buf, int *size)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_BUFFER_DETACH(BUF, SIZE, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;BUF(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;SIZE, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Buffer_detach(buffer_addr, size, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;USE, INTRINSIC :: ISO_C_BINDING, ONLY
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(C_PTR), INTENT(OUT) :: buffer_addr
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(OUT) :: size
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Output Parameters</a></h2>

<dl>

<dt>buf </dt>
<dd>Initial buffer address (choice). </dd>

<dt>size </dt>
<dd>Buffer size,
in bytes (integer). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Description</a></h2>
Detach
the buffer currently associated with MPI. The call returns the address and
the size of the detached buffer. This operation will block until all messages
currently in the buffer have been transmitted. Upon return of this function,
the user may reuse or deallocate the space taken by the buffer. <p>
<b>Example:</b>
Calls to attach and detach buffers. <p>
<br>
<pre>    #define BUFFSIZE 10000
    int size
    char *buff;
    <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( malloc(BUFFSIZE), BUFFSIZE);
    /* a buffer of 10000 bytes can now be used by <a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a> */
    MPI_Buffer_detach( &amp;buff, &amp;size);
    /* Buffer size reduced to zero */
    <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( buff, size);
    /* Buffer of 10000 bytes available again */
</pre>
<p>
<h2><a name='sect7' href='#toc7'>Notes</a></h2>
The reason that MPI_Buffer_detach returns the address and size of
the buffer being detached is to allow nested libraries to replace and restore
the buffer. For example, consider <p>
<br>
<pre>    int size, mysize, idummy;
    void *ptr, *myptr, *dummy;
    MPI_Buffer_detach( &amp;ptr, &amp;size );
    <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( myptr, mysize );
    ...
    ... library code ...
    ...
    MPI_Buffer_detach( &amp;dummy, &amp;idummy );
    <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( ptr, size );
</pre><p>
This is much like the action of the UNIX signal routine and has the same
strengths (it&rsquo;s simple) and weaknesses (it only works for nested usages).
<p>
<b>For Fortran:</b> The Fortran binding for this routine is different. Because
Fortran does not have pointers, it is impossible to provide a way to use
the output of this routine to exchange buffers. In this case, only the size
field is set. <p>
<b>For C:</b> Even though the buf argument is declared as void, it
is really the address of a void pointer. See Rationale, below, for more
details. <p>
Even though the C functions <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a> and MPI_Buffer_detach
both have a first argument of type void*, these arguments are used differently:
A pointer to the buffer is passed to <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>; the address of
the pointer is passed to MPI_Buffer_detach, so that this call can return
the pointer value.
<p>
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
Almost all MPI routines return an error value;
C routines as the value of the function and Fortran routines in the last
argument. C++ functions do not return errors. If the default error handler
is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception
mechanism will be used to throw an MPI::Exception object. <p>
Before the error
value is returned, the current MPI error handler is called. By default,
this error handler aborts the MPI job, except for I/O function errors. The
error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined
error handler MPI_ERRORS_RETURN may be used to cause error values to be
returned. Note that MPI does not guarantee that an MPI program can continue
past an error.
<p>
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<p>
<br>
<pre><a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>
<a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
