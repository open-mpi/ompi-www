<?php
$topdir = "../../..";
$title = "MPI_Graph_create(3) man page (version 3.0.2)";
$meta_desc = "Open MPI v3.0.2 man page: MPI_GRAPH_CREATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Graph_create </b> - Makes a new communicator to which topology
information has been attached.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],
<tt> </tt>&nbsp;<tt> </tt>&nbsp;const int edges[], int reorder, MPI_Comm *comm_graph)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM_GRAPH, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM_OLD, NNODES, INDEX(*), EDGES(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM_GRAPH, IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;LOGICAL   REORDER
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm_old
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;LOGICAL, INTENT(IN) :: reorder
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(OUT) :: comm_graph
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>comm_old </dt>
<dd>Input communicator without topology (handle). </dd>

<dt>nnodes
</dt>
<dd>Number of nodes in graph (integer). </dd>

<dt>index </dt>
<dd>Array of integers describing node
degrees (see below). </dd>

<dt>edges </dt>
<dd>Array of integers describing graph edges (see
below). </dd>

<dt>reorder </dt>
<dd>Ranking may be reordered (true) or not (false) (logical).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>comm_graph </dt>
<dd>Communicator with graph topology added (handle).
</dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Graph_create
returns a handle to a new communicator to which the graph topology information
is attached. If reorder = false then the rank of each process in the new
group is identical to its rank in the old group. Otherwise, the function
may reorder the processes. If the size, nnodes, of the graph is smaller
than the size of the group of comm_old, then some processes are returned
MPI_COMM_NULL, in analogy to <a href="../man3/MPI_Cart_create.3.php">MPI_Cart_create</a> and <a href="../man3/MPI_Comm_split.3.php">MPI_Comm_split</a>. The call
is erroneous if it specifies a graph that is larger than the group size
of the input communicator. <p>
The three parameters nnodes, index, and edges
define the graph structure. nnodes is the number of nodes of the graph. The
nodes are numbered from 0 to nnodes-1. The ith entry of array index stores
the total number of neighbors of the first i graph nodes. The lists of neighbors
of nodes 0,&nbsp;1,&nbsp;..., nnodes-1 are stored in consecutive locations in array edges.
The array edges is a flattened representation of the edge lists. The total
number of entries in index is nnodes and the total number of entries in
edges is equal to the number of graph edges. <p>
The definitions of the arguments
nnodes, index, and edges are illustrated with the following simple example.
<p>
<b>Example:</b> Assume there are four processes 0, 1, 2, 3 with the following
adjacency matrix: <p>
<br>
<pre>    Process<tt> </tt>&nbsp;<tt> </tt>&nbsp;Neighbors
       0<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;   1, 3
       1<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;   0
       2<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;   3
       3<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;   0, 2
</pre><p>
Then, the input arguments are: <br>
<pre>    nnodes = 4
    index  = 2, 3, 4, 6
    edges  = 1, 3, 0, 3, 0, 2
</pre><p>
Thus, in C, index[0] is the degree of node zero, and index[i] - index[i-1]
is the degree of node i, i=1, . . . , nnodes-1;  the list of neighbors of node
zero is stored in edges[j], for 0 &lt;= j &lt;= index[0] - 1 and the list of neighbors
of node i, i &gt; 0 ,  is stored in edges[j], index[i-1] &lt;= j &lt;= index[i] - 1. <p>
In
Fortran, <i>index(1)</i> is the degree of node zero, and index(i+1) - index(i)
is the degree of node i, i=1, . . . , nnodes-1;  the list of neighbors of node
zero is stored in edges(j), for 1 &lt;= j &lt;= <i>index(1)</i> and the list of neighbors
of node  i, i &gt; 0, is stored in edges(j), index(i) + 1 &lt;= j &lt;= index(i + 1).

<p>
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
Almost all MPI routines return an error value; C routines as the
value of the function and Fortran routines in the last argument. C++ functions
do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS,
then on error the C++ exception mechanism will be used to throw an MPI::Exception
object. <p>
Before the error value is returned, the current MPI error handler
is called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>;
the predefined error handler MPI_ERRORS_RETURN may be used to cause error
values to be returned. Note that MPI does not guarantee that an MPI program
can continue past an error.
<p>
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<p>
<a href="../man3/MPI_Graph_get.3.php">MPI_Graph_get</a> <br>

<p><a href="../man3/MPI_Graphdims_get.3.php">MPI_Graphdims_get</a>
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
