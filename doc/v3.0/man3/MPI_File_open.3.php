<?php
$topdir = "../../..";
$title = "MPI_File_open(3) man page (version 3.0.1)";
$meta_desc = "Open MPI v3.0.1 man page: MPI_FILE_OPEN(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
        <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_File_open</b> - Opens a file (collective).
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>
<br>
<pre>C Syntax
#include &lt;mpi.h&gt;
int MPI_File_open(MPI_Comm comm, const char *filename,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;int amode, MPI_Info info,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_File *fh)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_FILE_OPEN(COMM, FILENAME, AMODE, INFO, FH, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER*(*)<tt> </tt>&nbsp;<tt> </tt>&nbsp;FILENAME
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, AMODE, INFO, FH, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_File_open(comm, filename, amode, info, fh, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER(LEN=*), INTENT(IN) :: filename
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: amode
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Info), INTENT(IN) :: info
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_File), INTENT(OUT) :: fh
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>comm </dt>
<dd>Communicator (handle). </dd>

<dt>filename </dt>
<dd>Name of file to open
(string). </dd>

<dt>amode </dt>
<dd>File access mode (integer). </dd>

<dt>info </dt>
<dd>Info object (handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output
Parameters</a></h2>

<dl>

<dt>fh </dt>
<dd>New file handle (handle). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status
(integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_File_open opens the file identified by the filename
<i></i> filename on all processes in the <i>comm</i> communicator group. MPI_File_open
is a collective routine; all processes must provide the same value for
<i>amode,</i> and all processes must provide filenames that reference the same
file which are textually identical (note: Open MPI I/O plugins may have
restrictions on characters that can be used in filenames. For example, the
ROMIO plugin may disallow the colon (":") character from appearing in a
filename). A process can open a file independently of other processes by
using the MPI_COMM_SELF communicator. The file handle returned, <i>fh,</i> can
be subsequently used to access the file until the file is closed using
<a href="../man3/MPI_File_close.3.php">MPI_File_close</a>. Before calling <a href="../man3/MPI_Finalize.3.php">MPI_Finalize</a>, the user is required to close
(via <a href="../man3/MPI_File_close.3.php">MPI_File_close</a>) all files that were opened with MPI_File_open. Note
that the communicator <i>comm</i> is unaffected by MPI_File_open and continues
to be usable in all MPI routines. Furthermore, use of <i>comm</i> will not interfere
with I/O behavior. <p>
Initially, all processes view the file as a linear byte
stream; that is, the <i>etype</i> and <i>filetype</i> are both MPI_BYTE. The file view
can be changed via the <a href="../man3/MPI_File_set_view.3.php">MPI_File_set_view</a> routine. <p>
The following access modes
are supported (specified in amode, in a bit-vector OR in one of the following
integer constants): <br>

<dl>

<dt>  o </dt>
<dd>MPI_MODE_APPEND <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_CREATE -- Create the file if it does not exist. <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_DELETE_ON_CLOSE <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_EXCL -- Error creating a file that already exists. <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_RDONLY -- Read only. <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_RDWR -- Reading and writing. <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_SEQUENTIAL <br>
</dd>

<dt>  o </dt>
<dd>MPI_MODE_WRONLY -- Write only. <br>
</dd>

<dt>  o </dt>
<dd></dd>
</dl>
MPI_MODE_UNIQUE_OPEN </blockquote>
<p>
The modes MPI_MODE_RDONLY, MPI_MODE_RDWR, MPI_MODE_WRONLY,
and MPI_MODE_CREATE have identical semantics to their POSIX counterparts.
It is erroneous to specify MPI_MODE_CREATE in conjunction with MPI_MODE_RDONLY.
Errors related to the access mode are raised in the class MPI_ERR_AMODE.
<p>
On single-node clusters, files are opened by default using nonatomic mode
file consistency semantics. The more stringent atomic-mode consistency semantics,
required for atomicity of overlapping accesses, are the default when processors
in a communicator group reside on more than one node. This setting can be
changed using <a href="../man3/MPI_File_set_atomicity.3.php">MPI_File_set_atomicity</a>. <p>
The MPI_File_open interface allows
the user to pass information via the <i>info</i> argument. It can be set to MPI_INFO_NULL.
See the HINTS section for a list of hints that can be set.
<p>
<h2><a name='sect8' href='#toc8'>Hints</a></h2>
The following
hints can be used as values for the <i>info</i> argument. <p>
SETTABLE HINTS: <p>
- MPI_INFO_NULL
<p>
- shared_file_timeout: Amount of time (in seconds) to wait for access to
the shared file pointer before exiting with MPI_ERR_TIMEDOUT. <p>
- rwlock_timeout:
Amount of time (in seconds) to wait for obtaining a read or write lock
on a contiguous chunk of a UNIX file before exiting with MPI_ERR_TIMEDOUT.
<p>
- noncoll_read_bufsize:  Maximum size of the buffer used by MPI I/O to satisfy
multiple noncontiguous read requests in the noncollective data-access routines.
(See NOTE, below.) <p>
- noncoll_write_bufsize: Maximum size of the buffer used
by MPI I/O to satisfy multiple noncontiguous write requests in the noncollective
data-access routines. (See NOTE, below.) <p>
- coll_read_bufsize:  Maximum size
of the buffer used by MPI I/O to satisfy multiple noncontiguous read requests
in the collective data-access routines. (See NOTE, below.) <p>
- coll_write_bufsize:
 Maximum size of the buffer used by MPI I/O to satisfy multiple noncontiguous
write requests in the collective data-access routines. (See NOTE, below.)
<p>
NOTE: A buffer size smaller than the distance (in bytes) in a UNIX file
between the first byte and the last byte of the access request causes MPI
I/O to iterate and perform multiple UNIX read() or write() calls. If the
request includes multiple noncontiguous chunks of data, and the buffer
size is greater than the size of those chunks, then the UNIX read() or
write() (made at the MPI I/O level) will access data not requested by this
process in order to reduce the total number of write() calls made. If this
is not desirable behavior, you should reduce this buffer size to equal
the size of the contiguous chunks within the aggregate request. <p>
- mpiio_concurrency:
(boolean) controls whether nonblocking I/O routines can bind an extra thread
to an LWP. <p>
- mpiio_coll_contiguous: (boolean) controls whether subsequent
collective data accesses will request collectively contiguous regions of
the file. <p>
NON-SETTABLE HINTS: <p>
- filename: Access this hint to get the name
of the file.
<p>
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
C++ functions do not return errors. If the default error handler is set
to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object. <p>
Before the error value is
returned, the current MPI error handler is called. For MPI I/O function
errors, the default error handler is set to MPI_ERRORS_RETURN. The error
handler may be changed with <a href="../man3/MPI_File_set_errhandler.3.php">MPI_File_set_errhandler</a>; the predefined error
handler MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note
that MPI does not guarantee that an MPI program can continue past an error.

<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Hints</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
