<?php
$topdir = "../../..";
$title = "MPI_Win_create_dynamic(3) man page (version 3.0.1)";
$meta_desc = "Open MPI v3.0.1 man page: MPI_WIN_CREATE_DYNAMIC(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
    <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Win_create_dynamic</b> - One-sided MPI call that returns a window
object for RMA operations.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_WIN_CREATE_DYNAMIC(INFO, COMM, WIN, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER INFO, COMM, WIN, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Win_create_dynamic(info, comm, win, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Info), INTENT(IN) :: info
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(OUT) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>info </dt>
<dd>Info argument (handle). </dd>

<dt>comm </dt>
<dd>Communicator (handle).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>win </dt>
<dd>Window object returned by the call (handle). </dd>

<dt>IERROR
</dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Win_create_dynamic
is a one-sided MPI communication collective call executed by all processes
in the group of <i>comm</i>. It returns a window object without memory attached
that can be used by these processes to perform RMA operations. <p>
The following
info keys are supported:
<dl>

<dt>no_locks </dt>
<dd>If set to <i>true</i>, then the implementation
may assume that the local window is never locked (by a call to <a href="../man3/MPI_Win_lock.3.php">MPI_Win_lock</a>
or <a href="../man3/MPI_Win_lock_all.3.php">MPI_Win_lock_all</a>).  Setting this value if only active synchronization
may allow the implementation to enable certain optimizations. <p>
</dd>

<dt>accumulate_ordering
</dt>
<dd>By default, accumulate operations from one initiator to one target on the
same window are strictly ordered.  If the info key accumulate_ordering is
set to <i>none</i>, no ordering of accumulate operations guaranteed.  They key
can also be a comma-separated list of required orderings consisting of <i>rar</i>,
<i>war</i>, <i>raw</i>, and <i>waw</i> for read-after-read, write-after-read, read-after-write, and
write-after-write, respectively.  Looser ordering constraints are likely to
result in improved performance. <p>
</dd>

<dt>accumulate_ops </dt>
<dd>If set to <i>same_op</i>, the implementation
will assume that all concurrent accumulate calls to the same target address
will use the same operation.  If set to <i>same_op_no_op</i>, then the implementation
will assume that all concurrent accumulate calls to the same target address
will use the same operation or MPI_NO_OP.  The default is <i>same_op_no_op</i>.

<p> </dd>
</dl>

<h2><a name='sect8' href='#toc8'>Errors</a></h2>
Almost all MPI routines return an error value; C routines as the
value of the function and Fortran routines in the last argument. <p>
Before
the error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
<p>
<p>
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
