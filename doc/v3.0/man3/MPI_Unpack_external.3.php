<?php
$topdir = "../../..";
$title = "MPI_Unpack_external(3) man page (version 3.0.2)";
$meta_desc = "Open MPI v3.0.2 man page: MPI_UNPACK_EXTERNAL(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<p>
<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Unpack_external</b> - Reads data from a portable format
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<p>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Unpack_external(const char datarep[], const void *inbuf,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Aint insize, MPI_Aint *position,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;void *outbuf, int outcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype datatype)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_UNPACK_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;OUTBUF, OUTCOUNT, DATATYPE, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;OUTCOUNT, DATATYPE, IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND) INSIZE, POSITION
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER*(*)<tt> </tt>&nbsp;<tt> </tt>&nbsp;DATAREP
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;INBUF(*), OUTBUF(*)
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Unpack_external(datarep, inbuf, insize, position, outbuf, outcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;datatype, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER(LEN=*), INTENT(IN) :: datarep
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..) :: outbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: insize
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: outcount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: datatype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>datarep </dt>
<dd>Data Representation (string). </dd>

<dt>inbuf </dt>
<dd>Input buffer
start (choice). </dd>

<dt>insize </dt>
<dd>Size of input buffer, in bytes (integer). </dd>

<dt>outcount
</dt>
<dd>Number of items to be unpacked (integer). </dd>

<dt>datatype </dt>
<dd>Datatype of each output
data item (handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Input/Output Parameter</a></h2>

<dl>

<dt>position </dt>
<dd>Current position in
buffer, in bytes (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Output Parameters</a></h2>

<dl>

<dt>outbuf </dt>
<dd>Output buffer start
(choice). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect8' href='#toc8'>Description</a></h2>
MPI_Unpack_external
unpacks data from the external32 format, a universal data representation
defined by the MPI Forum. This format is useful for exchanging data between
MPI implementations, or when writing data to a file. <p>
The input buffer is
a contiguous storage area pointed to by <i>inbuf</i> containing <i>insize</i> bytes. The
output buffer can be any communication buffer allowed in <a href="../man3/MPI_Recv.3.php">MPI_Recv</a>, and
is specified by <i>outbuf</i>, <i>outcount</i>, and <i>datatype</i>. <p>
The input value of <i>position</i>
is the first position in <i>inbuf</i> to be read for unpacking (measured in bytes,
not elements, relative to the start of the buffer). When the function returns,
<i>position</i> is incremented by the size of the packed message, so that it points
to the first location in <i>inbuf</i> following the message that was unpacked.
This way it may be used as input to a subsequent call to MPI_Unpack_external.

<p>
<h2><a name='sect9' href='#toc9'>Notes</a></h2>
Note the difference between <a href="../man3/MPI_Recv.3.php">MPI_Recv</a> and MPI_Unpack_external: In
<a href="../man3/MPI_Recv.3.php">MPI_Recv</a>, the <i>count</i> argument specifies the maximum number of items that
can be received. In MPI_Unpack_external, the <i>outcount</i> argument specifies
the actual number of items that are to be unpacked. With a regular receive
operation, the incoming message size determines the number of components
that will be received. With MPI_Unpack_external, it is up to the user to
specify how many components to unpack, since the user may wish to unpack
the received message multiple times into various buffers. <p>
To understand
the behavior of pack and unpack, it is convenient to think of the data
part of a message as being the sequence obtained by concatenating the successive
values sent in that message. The pack operation stores this sequence in
the buffer space, as if sending the message to that buffer. The unpack operation
retrieves this sequence from buffer space, as if receiving a message from
that buffer. (It is helpful to think of internal Fortran files or sscanf
in C for a similar function.) <p>
Several messages can be successively packed
into one packing unit. This is effected by several successive related calls
to <a href="../man3/MPI_Pack_external.3.php">MPI_Pack_external</a>, where the first call provides <i>position</i>=0, and each
successive call inputs the value of <i>position</i> that was output by the previous
call, along with the same values for <i>outbuf</i> and <i>outcount</i>. This packing unit
now contains the equivalent information that would have been stored in
a message by one send call with a send buffer that is the "concatenation"
of the individual send buffers. <p>
A packing unit can be sent using type MPI_BYTE.
Any point-to-point or collective communication function can be used to move
the sequence of bytes that forms the packing unit from one process to another.
This packing unit can now be received using any receive operation, with
any datatype: The type-matching rules are relaxed for messages sent with
type MPI_BYTE. <p>
A packing unit can be unpacked into several successive messages.
This is effected by several successive related calls to MPI_Unpack_external,
where the first call provides <i>position</i>=0, and each successive call inputs
the value of position that was output by the previous call, and the same
values for <i>inbuf</i> and <i>insize</i>. <p>
The concatenation of two packing units is not
necessarily a packing unit; nor is a substring of a packing unit necessarily
a packing unit. Thus, one cannot concatenate two packing units and then
unpack the result as one packing unit; nor can one unpack a substring of
a packing unit as a separate packing unit. Each packing unit that was created
by a related sequence of pack calls must be unpacked as a unit by a sequence
of related unpack calls.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return an error
value; C routines as the value of the function and Fortran routines in
the last argument. C++ functions do not return errors. If the default error
handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception
mechanism will be used to throw an MPI::Exception object. <p>
Before the error
value is returned, the current MPI error handler is called. By default,
this error handler aborts the MPI job, except for I/O function errors. The
error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined
error handler MPI_ERRORS_RETURN may be used to cause error values to be
returned. Note that MPI does not guarantee that an MPI program can continue
past an error. <p>
See the MPI man page for a full list of MPI error codes.
<p>

<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<br>
<pre><a href="../man3/MPI_Pack_external.3.php">MPI_Pack_external</a>
<a href="../man3/MPI_Pack_external_size.3.php">MPI_Pack_external_size</a>
<a href="../man3/MPI_Recv.3.php">MPI_Recv</a>
sscanf(3C)

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
