<?php
$topdir = "../../..";
$title = "MPI_Win_allocate_shared(3) man page (version 3.0.2)";
$meta_desc = "Open MPI v3.0.2 man page: MPI_WIN_ALLOCATE_SHARED(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Win_allocate_shared</b> - One-sided MPI call that allocates shared
memory and returns a window object for RMA operations.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Win_allocate_shared (MPI_Aint size, int disp_unit, MPI_Info info,
                             MPI_Comm comm, void *baseptr, MPI_Win *win)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_WIN_ALLOCATE_SHARED(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Win_allocate_shared(size, disp_unit, info, comm, baseptr, win, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: disp_unit
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Info), INTENT(IN) :: info
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(C_PTR), INTENT(OUT) :: baseptr
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(OUT) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>size </dt>
<dd>Size of window in bytes (nonnegative integer). </dd>

<dt>disp_unit
</dt>
<dd>Local unit size for displacements, in bytes (positive integer). </dd>

<dt>info </dt>
<dd>Info
argument (handle). </dd>

<dt>comm </dt>
<dd>Communicator (handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>baseptr
</dt>
<dd>Initial address of window. </dd>

<dt>win </dt>
<dd>Window object returned by the call (handle).
</dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<b>MPI_Win_allocate_shared</b>
is a collective call executed by all processes in the group of <i>comm</i>. On
each process, it allocates memory of at least <i>size</i> bytes that is shared
among all processes in <i>comm</i>, and returns a pointer to the locally allocated
segment in <i>baseptr</i> that can be used for load/store accesses on the calling
process. The locally allocated memory can be the target of load/store accesses
by remote processes; the base pointers for other processes can be queried
using the function <b><a href="../man3/MPI_Win_shared_query.3.php">MPI_Win_shared_query</a></b>. The call also returns a window
object that can be used by all processes in <i>comm</i> to perform RMA operations.
The <i>size</i> argument may be different at each process and <i>size</i> = 0 is valid.
It is the user&rsquo;s responsibility to ensure that the communicator <i>comm</i> represents
a group of processes that can create a shared memory segment that can be
accessed by all processes in the group. The discussions of rationales for
<b><a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a></b> and <b><a href="../man3/MPI_Free_mem.3.php">MPI_Free_mem</a></b> in MPI-3.1 [char167] 8.2 also apply to <b>MPI_Win_allocate_shared</b>;
in particular, see the rationale in MPI-3.1 [char167] 8.2 for an explanation
of the type used for <i>baseptr</i>. The allocated memory is contiguous across
process ranks unless the info key <i>alloc_shared_noncontig</i> is specified. Contiguous
across process ranks means that the first address in the memory segment
of process i is consecutive with the last address in the memory segment
of process i - 1. This may enable the user to calculate remote address offsets
with local information only. <p>
The following info keys are supported:
<dl>

<dt>alloc_shared_noncontig
</dt>
<dd>If not set to <i>true</i>, the allocation strategy is to allocate contiguous memory
across process ranks. This may limit the performance on some architectures
because it does not allow the implementation to modify the data layout
(e.g., padding to reduce access latency). <p>
</dd>

<dt>blocking_fence </dt>
<dd>If set to <i>true</i>, the
osc/sm component will use <b><a href="../man3/MPI_Barrier.3.php">MPI_Barrier</a></b> for <b><a href="../man3/MPI_Win_fence.3.php">MPI_Win_fence</a></b>. If set to <i>false</i>
a condition variable and counter will be used instead. The default value
is <i>false</i>. This info key is Open MPI specific. <p>
</dd>

<dt>For additional supported info
keys see <b><a href="../man3/MPI_Win_create.3.php">MPI_Win_create</a></b>. </dt>
<dd><p>

<p> </dd>
</dl>

<h2><a name='sect8' href='#toc8'>Notes</a></h2>
Common choices for <i>disp_unit</i> are 1 (no scaling),
and (in C syntax) <i>sizeof(type)</i>, for a window that consists of an array
of elements of type <i>type</i>. The later choice will allow one to use array indices
in RMA calls, and have those scaled correctly to byte displacements, even
in a heterogeneous environment. <p>

<p>
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
Almost all MPI routines return an
error value; C routines as the value of the function and Fortran routines
in the last argument. <p>
Before the error value is returned, the current MPI
error handler is called. By default, this error handler aborts the MPI job,
except for I/O function errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>;
the predefined error handler MPI_ERRORS_RETURN may be used to cause error
values to be returned. Note that MPI does not guarantee that an MPI program
can continue past an error.
<p>
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
<a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a> <a href="../man3/MPI_Free_mem.3.php">MPI_Free_mem</a> <a href="../man3/MPI_Win_allocate.3.php">MPI_Win_allocate</a>
<a href="../man3/MPI_Win_create.3.php">MPI_Win_create</a> <a href="../man3/MPI_Win_shared_query.3.php">MPI_Win_shared_query</a> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
