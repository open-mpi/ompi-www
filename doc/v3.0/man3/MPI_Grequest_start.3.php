<?php
$topdir = "../../..";
$title = "MPI_Grequest_start(3) man page (version 3.0.2)";
$meta_desc = "Open MPI v3.0.2 man page: MPI_GREQUEST_START(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Grequest_start </b> - Starts a generalized request and returns
a handle to it in <i>request</i>.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Grequest_start(MPI_Grequest_query_function *query_fn,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Grequest_free_function *free_fn,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Grequest_cancel_function *cancel_fn, void *extra_state,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Request *request)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_GREQUEST_START(QUERY_FN, FREE_FN, CANCEL_FN, EXTRA_STATE,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;REQUEST, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;REQUEST, IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;EXTERNAL QUERY_FN, FREE_FN, CANCEL_FN
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Grequest_start(query_fn, free_fn, cancel_fn, extra_state, request,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;PROCEDURE(MPI_Grequest_query_function) :: query_fn
<tt> </tt>&nbsp;<tt> </tt>&nbsp;PROCEDURE(MPI_Grequest_free_function) :: free_fn
<tt> </tt>&nbsp;<tt> </tt>&nbsp;PROCEDURE(MPI_Grequest_cancel_function) :: cancel_fn
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(OUT) :: request
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>query_fn </dt>
<dd>Callback function invoked when request status
is queried (function). </dd>

<dt>free_fn </dt>
<dd>Callback function invoked when request is
freed (function). </dd>

<dt>cancel_fn </dt>
<dd>Callback function invoked when request is canceled
(function). </dd>

<dt>extra_state </dt>
<dd>Extra state.
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>request </dt>
<dd>Generalized
request (handle). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Grequest_start
starts a generalized request and returns a handle to it in <i>request</i>. <p>
The
syntax and meaning of the callback functions are listed below. All callback
functions are passed the <i>extra_state</i> argument that was associated with
the request by the starting call MPI_Grequest_start. This can be used to
maintain user-defined state for the request. In C, the query function is
<p>
<br>
<pre>   typedef int MPI_Grequest_query_function(void *extra_state,
                MPI_Status *status);
</pre><p>
In Fortran, it is <p>
<br>
<pre>   SUBROUTINE GREQUEST_QUERY_FUNCTION(EXTRA_STATE, STATUS, IERROR)
       INTEGER STATUS(MPI_STATUS_SIZE), IERROR
       INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
</pre><p>
and in C++, it is <p>
<br>
<pre>   typedef int MPI::Grequest::Query_function(void* extra_state,
                MPI::Status&amp; status);
</pre><p>
The <i>query_fn</i> function computes the status that should be returned for the
generalized request. The status also includes information about successful/unsuccessful
cancellation of the request (result to be returned by <a href="../man3/MPI_Test_cancelled.3.php">MPI_Test_cancelled</a>).
<p>
The <i>query_fn</i> function is invoked by the MPI_{Wait|Test}{any|some|all} call
that completed the generalized request associated with this callback. The
callback function is also invoked by calls to <a href="../man3/MPI_Request_get_status.3.php">MPI_Request_get_status</a> if
the request is complete when the call occurs. In both cases, the callback
is passed a reference to the corresponding status variable passed by the
user to the MPI call. If the user provided MPI_STATUS_IGNORE or MPI_STATUSES_IGNORE
to the MPI function that causes <i>query_fn</i> to be called, then MPI will pass
a valid status object to <i>query_fn</i>, and this status will be ignored upon
return of the callback function. Note that <i>query_fn</i> is invoked only after
<a href="../man3/MPI_Grequest_complete.3.php">MPI_Grequest_complete</a> is called on the request; it may be invoked several
times for the same generalized request. Note also that a call to MPI_{Wait|Test}{some|all}
may cause multiple invocations of <i>query_fn</i> callback functions, one for
each generalized request that is completed by the MPI call. The order of
these invocations is not specified by MPI. <p>
In C, the free function is <p>
<br>
<pre>   typedef int MPI_Grequest_free_function(void *extra_state);
</pre><p>
In Fortran, it is <p>
<br>
<pre>   SUBROUTINE GREQUEST_FREE_FUNCTION(EXTRA_STATE, IERROR)
       INTEGER IERROR
       INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
</pre><p>
And in C++, it is <p>
<br>
<pre>   typedef int MPI::Grequest::Free_function(void* extra_state);
</pre><p>
The <i>free_fn</i> callback function is invoked to clean up user-allocated resources
when the generalized request is freed. <p>
The <i>free_fn</i> function is invoked by
the MPI_{Wait|Test}{any|some|all} call that completed the generalized request
associated with this callback. <i>free_fn</i> is invoked after the call to <i>query_fn</i>
for the same request. However, if the MPI call completed multiple generalized
requests, the order in which <i>free_fn</i> callback functions are invoked is
not specified by MPI. <p>
The <i>free_fn</i> callback is also invoked for generalized
requests that are freed by a call to <a href="../man3/MPI_Request_free.3.php">MPI_Request_free</a> (no call to MPI_{Wait|Test}{any|some|all}
will occur for such a request). In this case, the callback function will
be called either in the MPI call <a href="../man3/MPI_Request_free.3.php">MPI_Request_free</a>(request) or in the MPI
call <a href="../man3/MPI_Grequest_complete.3.php">MPI_Grequest_complete</a>(request), whichever happens last. In other words,
in this case the actual freeing code is executed as soon as both calls
(<a href="../man3/MPI_Request_free.3.php">MPI_Request_free</a> and <a href="../man3/MPI_Grequest_complete.3.php">MPI_Grequest_complete</a>) have occurred. The <i>request</i>
is not deallocated until after <i>free_fn</i> completes. Note that <i>free_fn</i> will
be invoked only once per request by a correct program. <p>
In C, the cancel
function is <p>
<br>
<pre>   typedef int MPI_Grequest_cancel_function(void *extra_state, int complete);
</pre><p>
In Fortran, the cancel function is <p>
<br>
<pre>   SUBROUTINE GREQUEST_CANCEL_FUNCTION(EXTRA_STATE, COMPLETE, IERROR)
       INTEGER IERROR
       INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
       LOGICAL COMPLETE
</pre><p>
In C++, the cancel function is <p>
<br>
<pre>   typedef in MPI::Grequest::Cancel_function(void* extra_state,
               bool complete);
</pre><p>
The <i>cancel_fn</i> function is invoked to start the cancellation of a generalized
request. It is called by MPI_Request_cancel(request). MPI passes to the callback
function complete=true if <a href="../man3/MPI_Grequest_complete.3.php">MPI_Grequest_complete</a> has already been called
on the request, and complete=false otherwise.
<p>
<h2><a name='sect8' href='#toc8'>Fortran 77 Notes</a></h2>
The MPI standard
prescribes portable Fortran syntax for the <i>EXTRA_STATE</i> argument only for
Fortran 90.  FORTRAN 77 users may use the non-portable syntax <p>
<br>
<pre>     INTEGER*MPI_ADDRESS_KIND EXTRA_STATE
</pre><p>
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the length
of the declared integer in bytes.
<p>
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. C++ functions do not return errors. If the default
error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the
C++ exception mechanism will be used to throw an MPI::Exception object.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error. <p>
All callback functions return an error code. The
code is passed back and dealt with as appropriate for the error code by
the MPI function that invoked the callback function. For example, if error
codes are returned, then the error code returned by the callback function
will be returned by the MPI function that invoked the callback function.
In the case of a MPI_{Wait|Test}any call that invokes both <i>query_fn</i> and
<i>free_fn</i>, the MPI call will return the error code returned by the last callback,
namely <i>free_fn</i>. If one or more of the requests in a call to MPI_{Wait|Test}{some|all}
has failed, then the MPI call will return MPI_ERR_IN_STATUS. In such a case,
if the MPI call was passed an array of statuses, then MPI will return in
each of the statuses that correspond to a completed generalized request
the error code returned by the corresponding invocation of its <i>free_fn</i>
callback function. However, if the MPI function was passed MPI_STATUSES_IGNORE,
then the individual error codes returned by each callback function will
be lost. <p>
See the MPI man page for a full list of MPI error codes.
<p>
<p>
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Fortran 77 Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
