<?php
$topdir = "../../..";
$title = "MPI_Neighbor_alltoall(3) man page (version 3.0.2)";
$meta_desc = "Open MPI v3.0.2 man page: MPI_NEIGHBOR_ALLTOALL(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<p>
<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Neighbor_alltoall, <a href="../man3/MPI_Ineighbor_alltoall.3.php">MPI_Ineighbor_alltoall</a></b> - All processes

<p>send data to neighboring processes in a virtual topology communicator
<p>

<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<p>
<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Neighbor_alltoall(const void *sendbuf, int sendcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype sendtype, void *recvbuf, int recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype recvtype, MPI_Comm comm)
int <a href="../man3/MPI_Ineighbor_alltoall.3.php">MPI_Ineighbor_alltoall</a>(const void *sendbuf, int sendcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype sendtype, void *recvbuf, int recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_NEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;RECVTYPE, COMM, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDBUF(*), RECVBUF(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, IERROR
<a href="../man3/MPI_Ineighbor_alltoall.3.php">MPI_INEIGHBOR_ALLTOALL</a>(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;RECVTYPE, COMM, REQUEST, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDBUF(*), RECVBUF(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, REQUEST, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Neighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;recvtype, comm, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..) :: recvbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: sendcount, recvcount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
<a href="../man3/MPI_Ineighbor_alltoall.3.php">MPI_Ineighbor_alltoall</a>(sendbuf, sendcount, sendtype, recvbuf, recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;recvtype, comm, request, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: sendcount, recvcount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(OUT) :: request
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>sendbuf </dt>
<dd>Starting address of send buffer (choice). </dd>

<dt>sendcount
</dt>
<dd>Number of elements to send to each process (integer). </dd>

<dt>sendtype </dt>
<dd>Datatype
of send buffer elements (handle). </dd>

<dt>recvcount </dt>
<dd>Number of elements to receive
from each process (integer). </dd>

<dt>recvtype </dt>
<dd>Datatype of receive buffer elements
(handle). </dd>

<dt>comm </dt>
<dd>Communicator over which data is to be exchanged (handle).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>recvbuf </dt>
<dd>Starting address of receive buffer (choice). </dd>

<dt>request
</dt>
<dd>Request (handle, non-blocking only). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).

<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Neighbor_alltoall is a collective operation in which all
processes send and receive the same amount of data to each neighbor. The
operation of this routine can be represented as follows, where each process
performs 2n (n being the number of neighbors in communicator <i>comm</i>) independent
point-to-point communications. The neighbors and buffer layout are determined
by the topology of <i>comm</i>. <p>
Example of MPI_Neighbor_alltoall semantics for
cartesian topologies: <p>
<br>
<pre>        <a href="../man3/MPI_Cart_get.3.php">MPI_Cart_get</a>(comm, maxdims, dims, periods, coords);
        for (dim = 0, i = 0 ; dim &lt; dims ; ++dim) {
            <a href="../man3/MPI_Cart_shift.3.php">MPI_Cart_shift</a>(comm, dim, 1, &amp;r0, &amp;r1);
            <a href="../man3/MPI_Isend.3.php">MPI_Isend</a>(sendbuf + i * sendcount * extent(sendtype),
                      sendcount, sendtype, r0, ..., comm, ...);
            <a href="../man3/MPI_Irecv.3.php">MPI_Irecv</a>(recvbuf + i * recvcount * extent(recvtype),
                      recvcount, recvtype, r0, ..., comm, ...);
            ++i;
            <a href="../man3/MPI_Isend.3.php">MPI_Isend</a>(sendbuf + i * sendcount * extent(sendtype),
                      sendcount, sendtype, r1, ..., comm, &amp;req[i]);
            <a href="../man3/MPI_Irecv.3.php">MPI_Irecv</a>(recvbuf + i * recvcount * extent(recvtype),
                      recvcount, recvtype, r1, ..., comm, ...);
            ++i;
        }
        <a href="../man3/MPI_Waitall.3.php">MPI_Waitall</a> (...);
</pre><p>
Each process breaks up its local <i>sendbuf</i> into n blocks - each containing
<i>sendcount</i> elements of type <i>sendtype</i> - and divides its <i>recvbuf</i> similarly
according to <i>recvcount</i> and <i>recvtype</i>. Process j sends the k-th block of its
local <i>sendbuf</i> to neighbor k, which places the data in the j-th block of
its local <i>recvbuf</i>. The amount of data sent must be equal to the amount of
data received, pairwise, between every pair of processes.
<p> <p>

<h2><a name='sect8' href='#toc8'>Neighbor Ordering</a></h2>
For
a distributed graph topology, created with <a href="../man3/MPI_Dist_graph_create.3.php">MPI_Dist_graph_create</a>, the sequence
of neighbors in the send and receive buffers at each process is defined
as the sequence returned by <a href="../man3/MPI_Dist_graph_neighbors.3.php">MPI_Dist_graph_neighbors</a> for destinations and
sources, respectively. For a general graph topology, created with <a href="../man3/MPI_Graph_create.3.php">MPI_Graph_create</a>,
the order of neighbors in the send and receive buffers is defined as the
sequence of neighbors as returned by <a href="../man3/MPI_Graph_neighbors.3.php">MPI_Graph_neighbors</a>. Note that general
graph topologies should generally be replaced by the distributed graph
topologies.
<p> For a Cartesian topology, created with <a href="../man3/MPI_Cart_create.3.php">MPI_Cart_create</a>, the
sequence of neighbors in the send and receive buffers at each process is
defined by order of the dimensions, first the neighbor in the negative
direction and then in the positive direction with displacement 1. The numbers
of sources and destinations in the communication routines are 2*ndims with
ndims defined in <a href="../man3/MPI_Cart_create.3.php">MPI_Cart_create</a>. If a neighbor does not exist, i.e., at the
border of a Cartesian topology in the case of a non-periodic virtual grid
dimension (i.e., periods[...]==false), then this neighbor is defined to be MPI_PROC_NULL.

<p> If a neighbor in any of the functions is MPI_PROC_NULL, then the neighborhood
collective communication behaves like a point-to-point communication with
MPI_PROC_NULL in this direction. That is, the buffer is still part of the
sequence of neighbors but it is neither communicated nor updated.
<p> <p>

<h2><a name='sect9' href='#toc9'>Notes</a></h2>
The
MPI_IN_PLACE option for <i>sendbuf</i> is not meaningful for this function. <p>
All
arguments on all processes are significant. The <i>comm</i> argument, in particular,
must describe the same communicator on all processes. <i>comm</i> must be either
a cartesian, graph, or dist graph communicator. <p>
There are two MPI library
functions that are more general than MPI_Neighbor_alltoall. <a href="../man3/MPI_Neighbor_alltoallv.3.php">MPI_Neighbor_alltoallv</a>
allows all-to-all communication to and from buffers that need not be contiguous;
different processes may send and receive different amounts of data. <a href="../man3/MPI_Neighbor_alltoallw.3.php">MPI_Neighbor_alltoallw</a>
expands <a href="../man3/MPI_Neighbor_alltoallv.3.php">MPI_Neighbor_alltoallv</a>&rsquo;s functionality to allow the exchange of
data with different datatypes.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return an
error value; C routines as the value of the function and Fortran routines
in the last argument. <p>
Before the error value is returned, the current MPI
error handler is called. By default, this error handler aborts the MPI job,
except for I/O function errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>;
the predefined error handler MPI_ERRORS_RETURN may be used to cause error
values to be returned. Note that MPI does not guarantee that an MPI program
can continue past an error.
<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<br>
<pre><a href="../man3/MPI_Neighbor_alltoallv.3.php">MPI_Neighbor_alltoallv</a>
<a href="../man3/MPI_Neighbor_alltoallw.3.php">MPI_Neighbor_alltoallw</a>
<a href="../man3/MPI_Cart_create.3.php">MPI_Cart_create</a>
<a href="../man3/MPI_Graph_create.3.php">MPI_Graph_create</a>
<a href="../man3/MPI_Dist_graph_create.3.php">MPI_Dist_graph_create</a>
<a href="../man3/MPI_Dist_graph_create_adjacent.3.php">MPI_Dist_graph_create_adjacent</a>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
