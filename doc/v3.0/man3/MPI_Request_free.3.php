<?php
$topdir = "../../..";
$title = "MPI_Request_free(3) man page (version 3.0.3)";
$meta_desc = "Open MPI v3.0.3 man page: MPI_REQUEST_FREE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Request_free</b> - Frees a communication request object.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C
Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Request_free(MPI_Request *request)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>INCLUDE &rsquo;mpif.h&rsquo;
MPI_REQUEST_FREE(REQUEST, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;REQUEST, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Request_free(request, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(INOUT) :: request
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input/Output Parameter</a></h2>

<dl>

<dt>request </dt>
<dd>      Communication request (handle).<br>

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Description</a></h2>
This operation allows a request object to be deallocated without
waiting for the associated communication to complete. <p>
MPI_Request_free marks
the request object for deallocation and sets request to MPI_REQUEST_NULL.
Any ongoing communication that is associated with the request will be allowed
to complete. The request will be deallocated only after its completion.
<p>

<h2><a name='sect7' href='#toc7'>Notes</a></h2>
Once a request is freed by a call to MPI_Request_free, it is not possible
to check for the successful completion of the associated communication
with calls to <a href="../man3/MPI_Wait.3.php">MPI_Wait</a> or <a href="../man3/MPI_Test.3.php">MPI_Test</a>. Also, if an error occurs subsequently
during the communication, an error code cannot be returned to the user
-- such an error must be treated as fatal. Questions arise as to how one knows
when the operations have completed when using MPI_Request_free. Depending
on the program logic, there may be other ways in which the program knows
that certain operations have completed and this makes usage of MPI_Request_free
practical. For example, an active send request could be freed when the logic
of the program is such that the receiver sends a reply to the message sent
-- the arrival of the reply informs the sender that the send has completed
and the send buffer can be reused. An active receive request should never
be freed, as the receiver will have no way to verify that the receive has
completed and the receive buffer can be reused.
<p> <p>
<b>Example:</b> <p>
<br>
<pre>    CALL <a href="../man3/MPI_Comm_rank.3.php">MPI_COMM_RANK</a>(MPI_COMM_WORLD, rank)
    IF(rank.EQ.0) THEN
        DO i=1, n
          CALL <a href="../man3/MPI_Isend.3.php">MPI_ISEND</a>(outval, 1, MPI_REAL, 1, 0, req, ierr)
          CALL MPI_REQUEST_FREE(req, ierr)
          CALL <a href="../man3/MPI_Irecv.3.php">MPI_IRECV</a>(inval, 1, MPI_REAL, 1, 0, req, ierr)
          CALL <a href="../man3/MPI_Wait.3.php">MPI_WAIT</a>(req, status, ierr)
        END DO
    ELSE    ! rank.EQ.1
        CALL <a href="../man3/MPI_Irecv.3.php">MPI_IRECV</a>(inval, 1, MPI_REAL, 0, 0, req, ierr)
        CALL <a href="../man3/MPI_Wait.3.php">MPI_WAIT</a>(req, status)
        DO I=1, n-1
           CALL <a href="../man3/MPI_Isend.3.php">MPI_ISEND</a>(outval, 1, MPI_REAL, 0, 0, req, ierr)
           CALL MPI_REQUEST_FREE(req, ierr)
           CALL <a href="../man3/MPI_Irecv.3.php">MPI_IRECV</a>(inval, 1, MPI_REAL, 0, 0, req, ierr)
           CALL <a href="../man3/MPI_Wait.3.php">MPI_WAIT</a>(req, status, ierr)
        END DO
        CALL <a href="../man3/MPI_Isend.3.php">MPI_ISEND</a>(outval, 1, MPI_REAL, 0, 0, req, ierr)
        CALL <a href="../man3/MPI_Wait.3.php">MPI_WAIT</a>(req, status)
    END IF
</pre><p>
This routine is normally used to free persistent requests created with
either <i><a href="../man3/MPI_Recv_init.3.php">MPI_Recv_init</a></i> or <i><a href="../man3/MPI_Send_init.3.php">MPI_Send_init</a></i> and friends.  However, it can be used
to free a request created with <i><a href="../man3/MPI_Irecv.3.php">MPI_Irecv</a></i> or <i><a href="../man3/MPI_Isend.3.php">MPI_Isend</a></i> and friends; in that
case the use can not use the test/wait routines on the request.
<p> It <b>is</b> permitted
to free an active request.  However, once freed, you can not use the request
in a wait or test routine (e.g., <i><a href="../man3/MPI_Wait.3.php">MPI_Wait</a></i> ).
<p>
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
Almost all MPI routines
return an error value; C routines as the value of the function and Fortran
routines in the last argument. C++ functions do not return errors. If the
default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error
the C++ exception mechanism will be used to throw an MPI::Exception object.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
<p>
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<a href="../man3/MPI_Isend.3.php">MPI_Isend</a> <br>
<a href="../man3/MPI_Irecv.3.php">MPI_Irecv</a> <br>
<a href="../man3/MPI_Issend.3.php">MPI_Issend</a> <br>
<a href="../man3/MPI_Ibsend.3.php">MPI_Ibsend</a> <br>
<a href="../man3/MPI_Irsend.3.php">MPI_Irsend</a> <br>
<a href="../man3/MPI_Recv_init.3.php">MPI_Recv_init</a> <br>
<a href="../man3/MPI_Send_init.3.php">MPI_Send_init</a> <br>
<a href="../man3/MPI_Ssend_init.3.php">MPI_Ssend_init</a> <br>
<a href="../man3/MPI_Rsend_init.3.php">MPI_Rsend_init</a> <br>
<a href="../man3/MPI_Test.3.php">MPI_Test</a> <br>
<a href="../man3/MPI_Wait.3.php">MPI_Wait</a> <br>
<a href="../man3/MPI_Waitall.3.php">MPI_Waitall</a> <br>
<a href="../man3/MPI_Waitany.3.php">MPI_Waitany</a> <br>
<a href="../man3/MPI_Waitsome.3.php">MPI_Waitsome</a> <br>
<a href="../man3/MPI_Testall.3.php">MPI_Testall</a> <br>
<a href="../man3/MPI_Testany.3.php">MPI_Testany</a> <br>

<p><a href="../man3/MPI_Testsome.3.php">MPI_Testsome</a>
<p>
<p>
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input/Output Parameter</a></li>
<li><a name='toc6' href='#sect6'>Description</a></li>
<li><a name='toc7' href='#sect7'>Notes</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
