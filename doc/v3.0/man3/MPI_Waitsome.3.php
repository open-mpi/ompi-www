<?php
$topdir = "../../..";
$title = "MPI_Waitsome(3) man page (version 3.0.3)";
$meta_desc = "Open MPI v3.0.3 man page: MPI_WAITSOME(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Waitsome</b> - Waits for some given communications to complete.

<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Waitsome(int incount, MPI_Request array_of_requests[],
<tt> </tt>&nbsp;<tt> </tt>&nbsp;int *outcount, int array_of_indices[],
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Status array_of_statuses[])
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_WAITSOME(INCOUNT, ARRAY_OF_REQUESTS, OUTCOUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;ARRAY_OF_INDICES, ARRAY_OF_STATUSES, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;INCOUNT, ARRAY_OF_REQUESTS(*), OUTCOUNT
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;ARRAY_OF_INDICES(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;ARRAY_OF_STATUSES(MPI_STATUS_SIZE*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Waitsome(incount, array_of_requests, outcount, array_of_indices,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;array_of_statuses, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: incount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(incount)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(OUT) :: outcount, array_of_indices(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Status) :: array_of_statuses(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>incount </dt>
<dd>Length of array_of_requests (integer). </dd>

<dt>array_of_requests
</dt>
<dd>Array of requests (array of handles).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>outcount </dt>
<dd>Number
of completed requests (integer). </dd>

<dt>array_of_indices </dt>
<dd>Array of indices of operations
that completed (array of integers). </dd>

<dt>array_of_statuses </dt>
<dd>Array of status objects
for operations that completed (array of status). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error
status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
Waits until at least one of the operations
associated with active handles in the list have completed. Returns in outcount
the number of requests from the list array_of_requests that have completed.
Returns in the first outcount locations of the array array_of_indices the
indices of these operations (index within the array array_of_requests;
the array is indexed from 0 in C and from 1 in Fortran). Returns in the
first outcount locations of the array array_of_status the status for these
completed operations. If a request that completed was allocated by a nonblocking
communication call, then it is deallocated, and the associated handle is
set to MPI_REQUEST_NULL. <p>
If the list contains no active handles, then the
call returns immediately with outcount = MPI_UNDEFINED. <p>
When one or more
of the communications completed by MPI_Waitsome fails, then it is desirable
to return specific information on each communication. The arguments outcount,
array_of_indices, and array_of_statuses will be adjusted to indicate completion
of all communications that have succeeded or failed. The call will return
the error code MPI_ERR_IN_STATUS and the error field of each status returned
will be set to indicate success or to indicate the specific error that
occurred. The call will return MPI_SUCCESS if no request resulted in an
error, and will return another error code if it failed for other reasons
(such as invalid arguments). In such cases, it will not update the error
fields of the statuses. <p>
If your application does not need to examine the
<i>array_of_statuses</i> field, you can save resources by using the predefined
constant MPI_STATUSES_IGNORE can be used as a special value for the <i>array_of_statuses</i>
argument. <p>
<b>Example:</b> Same code as the example in the <a href="../man3/MPI_Waitany.3.php">MPI_Waitany</a> man page,
but using MPI_Waitsome. <p>
<br>
<pre>    CALL <a href="../man3/MPI_Comm_size.3.php">MPI_COMM_SIZE</a>(comm, size, ierr)
    CALL <a href="../man3/MPI_Comm_rank.3.php">MPI_COMM_RANK</a>(comm, rank, ierr)
    IF(rank .GT. 0) THEN         ! client code
        DO WHILE(.TRUE.)
           CALL <a href="../man3/MPI_Isend.3.php">MPI_ISEND</a>(a, n, MPI_REAL, 0, tag, comm, request, ierr)
           CALL <a href="../man3/MPI_Wait.3.php">MPI_WAIT</a>(request, status, ierr)
        END DO
    ELSE         ! rank=0 -- server code
        DO i=1, size-1
           CALL <a href="../man3/MPI_Irecv.3.php">MPI_IRECV</a>(a(1,i), n, MPI_REAL, i, tag,
                          comm, requests(i), ierr)
        END DO
        DO WHILE(.TRUE.)
           CALL MPI_WAITSOME(size, request_list, numdone,
                            indices, statuses, ierr)
           DO i=1, numdone
              CALL DO_SERVICE(a(1, indices(i)))
              CALL <a href="../man3/MPI_Irecv.3.php">MPI_IRECV</a>(a(1, indices(i)), n, MPI_REAL, 0, tag,
                           comm, requests(indices(i)), ierr)
           END DO
        END DO
    END IF
</pre><p>

<h2><a name='sect8' href='#toc8'>Notes</a></h2>
The array of indices are in the range 0 to incount-1 for C and in the
range 1 to incount for Fortran.
<p>
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
For each invocation of MPI_Waitsome,
if one or more requests generate an MPI exception, only the <i>first</i> MPI request
that caused an exception will be passed to its corresponding error handler.
 No other error handlers will be invoked (even if multiple requests generated
exceptions).  However, <i>all</i> requests that generate an exception will have
a relevant error code set in the corresponding status.MPI_ERROR field (unless
MPI_STATUSES_IGNORE was used). <p>
The default error handler aborts the MPI
job, except for I/O function errors. The error handler may be changed with
<a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>, <a href="../man3/MPI_File_set_errhandler.3.php">MPI_File_set_errhandler</a>, or <a href="../man3/MPI_Win_set_errhandler.3.php">MPI_Win_set_errhandler</a>
(depending on the type of MPI handle that generated the MPI request); the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error. <p>
If the invoked error handler allows MPI_Waitsome
to return to the caller, the value MPI_ERR_IN_STATUS will be returned in
the C and Fortran bindings.  In C++, if the predefined error handler MPI::ERRORS_THROW_EXCEPTIONS
is used, the value MPI::ERR_IN_STATUS will be contained in the MPI::Exception
object.  The MPI_ERROR field can then be examined in the array of returned
statuses to determine exactly which request(s) generated an exception.
<p>

<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
<a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a> <br>
<a href="../man3/MPI_File_set_errhandler.3.php">MPI_File_set_errhandler</a> <br>
<a href="../man3/MPI_Test.3.php">MPI_Test</a> <br>
<a href="../man3/MPI_Testall.3.php">MPI_Testall</a> <br>
<a href="../man3/MPI_Testany.3.php">MPI_Testany</a> <br>
<a href="../man3/MPI_Testsome.3.php">MPI_Testsome</a> <br>
<a href="../man3/MPI_Wait.3.php">MPI_Wait</a> <br>
<a href="../man3/MPI_Waitall.3.php">MPI_Waitall</a> <br>
<a href="../man3/MPI_Waitany.3.php">MPI_Waitany</a> <br>
<a href="../man3/MPI_Win_set_errhandler.3.php">MPI_Win_set_errhandler</a> <br>

<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
