<?php
$topdir = "../../..";
$title = "start_pes(3) man page (version 3.0.3)";
$meta_desc = "Open MPI v3.0.3 man page: start_pes(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
    <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>

<p> shmem_init, start_pes - Allocates a block of memory from the symmetric
heap.
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>

<p> C or C++: <br>
<pre>void shmem_init(void);
void start_pes(int npes);
</pre> Fortran: <br>
<pre>CALL SHMEM_INIT()
CALL START_PES(npes)
</pre>
<h2><a name='sect2' href='#toc2'>Description</a></h2>

<p> The start_pes routine should be the first statement in a SHMEM
parallel program. <p>
The start_pes routine accepts the following argument:

<dl>

<dt>npes </dt>
<dd>Unused. Should be set to 0. </dd>
</dl>
<p>
This routine initializes the SHMEM API,
therefore it must be called before calling any other SHMEM routine. This
routine is responsible inter alia for setting up the symmetric heap on
the calling PE, and the creation of the virtual PE numbers. Upon successful
return from this routine, the calling PE will be able to communicate with
and transfer data to other PEs. <p>
Multiple calls to this function are not
allowed. <p>
For an overview of programming with SHMEM communication routines,
example SHMEM programs, and instructions for compiling SHMEM programs,
see the <i><i>intro_shmem</i>(3)</i> man page.
<h2><a name='sect3' href='#toc3'>Examples</a></h2>

<p> This is a simple program that
calls <i><i>shmem_integer_put</i>(3)</i>: <br>
<pre>PROGRAM PUT
  INCLUDE "mpp/shmem.fh"
  INTEGER TARG, SRC, RECEIVER, BAR
  COMMON /T/ TARG
  PARAMETER (RECEIVER=1)
  CALL SHMEM_INIT()
  IF (MY_PE() .EQ. 0) THEN
    SRC = 33
    CALL SHMEM_INTEGER_PUT(TARG, SRC, 1, RECEIVER)
  ENDIF
  CALL SHMEM_BARRIER_ALL ! SYNCHRONIZES SENDER AND RECEIVER
  IF (MY_PE() .EQ. RECEIVER) THEN
    PRINT *,&rsquo;PE &rsquo;, MY_PE(),&rsquo; TARG=&rsquo;,TARG,&rsquo; (expect 33)&rsquo;
  ENDIF
END
</pre>
<h2><a name='sect4' href='#toc4'>Notes</a></h2>

<p> If the start_pes call is not the first statement in a program, unexpected
results may occur on some architectures.
<h2><a name='sect5' href='#toc5'>See Also</a></h2>

<p> <i><i>intro_shmem</i>(3)</i>, <i><i>shmem_barrier</i>(3)</i>,
<i><i>shmem_barrier_all</i>(3)</i>, <i><i>shmem_put</i>(3)</i>, <i><i>my_pe</i>(3I)</i>, <i><i>shmem_n_pes</i>(3I)</i>  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>Description</a></li>
<li><a name='toc3' href='#sect3'>Examples</a></li>
<li><a name='toc4' href='#sect4'>Notes</a></li>
<li><a name='toc5' href='#sect5'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
