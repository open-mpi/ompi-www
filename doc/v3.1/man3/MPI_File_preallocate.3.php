<?php
$topdir = "../../..";
$title = "MPI_File_preallocate(3) man page (version 3.1.3)";
$meta_desc = "Open MPI v3.1.3 man page: MPI_FILE_PREALLOCATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
       <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_File_preallocate</b> - Preallocates a specified amount of storage
space  at the beginning of a file (collective).
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>
<br>
<pre>C Syntax
#include &lt;mpi.h&gt;
int MPI_File_preallocate(MPI_File fh, MPI_Offset size)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_FILE_PREALLOCATE(FH, SIZE, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;FH, IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_OFFSET_KIND)<tt> </tt>&nbsp;<tt> </tt>&nbsp;SIZE
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_File_preallocate(fh, size, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_File), INTENT(IN) :: fh
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input/Output Parameter</a></h2>

<dl>

<dt>fh </dt>
<dd>File handle (handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Input Parameter</a></h2>

<dl>

<dt>size </dt>
<dd>Size
to preallocate file, in bytes (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Output Parameter</a></h2>

<dl>

<dt>IERROR </dt>
<dd>Fortran
only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect8' href='#toc8'>Description</a></h2>
MPI_File_preallocate ensures that
storage space is allocated for the first <i>size</i> bytes of the file associated
with <i>fh</i>. MPI_File_preallocate can be a very time-consuming operation.
<p> MPI_File_preallocate
is collective; all processes in the group must pass identical values for
<i>size</i>. Regions of the file that have previously been written are unaffected.
For newly allocated regions of the file, MPI_File_preallocate has the same
effect as writing undefined data. If size is larger than the current file
size, the file size increases to <i>size</i>. If <i>size</i> is less than or equal to
the current file size, the file size is unchanged.
<p> The treatment of file
pointers, pending nonblocking accesses, and file consistency is the same
as with <a href="../man3/MPI_File_set_size.3.php">MPI_File_set_size</a>. If MPI_MODE_SEQUENTIAL mode was specified when
the file was opened, it is erroneous to call this routine.
<p>
<h2><a name='sect9' href='#toc9'>Fortran 77 Notes</a></h2>
The
MPI standard prescribes portable Fortran syntax for the <i>SIZE</i> argument only
for Fortran 90.  FORTRAN 77 users may use the non-portable syntax <p>
<br>
<pre>     INTEGER*MPI_OFFSET_KIND SIZE
</pre><p>
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the length
of the declared integer in bytes.
<p>
<h2><a name='sect10' href='#toc10'>Notes</a></h2>
When using the collective routine
<a href="../man3/MPI_File_set_size.3.php">MPI_File_set_size</a> on a UNIX file, if the size that is set is smaller than
the current file size, the file is truncated at the position defined by
size. If the size is set to be larger than the current file size, the file
size becomes the set size. When the file size is increased this way with
<a href="../man3/MPI_File_set_size.3.php">MPI_File_set_size</a>, new regions are created in the file with displacements
between the old file size and the larger, newly set file size. <p>
Sun MPI I/O
does not necessarily allocate file space for such new regions. You may reserve
file space either by using MPI_File_preallocate or by performing a read
or write to certain bytes.
<p>
<h2><a name='sect11' href='#toc11'>Errors</a></h2>
Almost all MPI routines return an error
value; C routines as the value of the function and Fortran routines in
the last argument. C++ functions do not return errors. If the default error
handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception
mechanism will be used to throw an MPI::Exception object. <p>
Before the error
value is returned, the current MPI error handler is called. For MPI I/O
function errors, the default error handler is set to MPI_ERRORS_RETURN.
The error handler may be changed with <a href="../man3/MPI_File_set_errhandler.3.php">MPI_File_set_errhandler</a>; the predefined
error handler MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal.
Note that MPI does not guarantee that an MPI program can continue past
an error.
<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input/Output Parameter</a></li>
<li><a name='toc6' href='#sect6'>Input Parameter</a></li>
<li><a name='toc7' href='#sect7'>Output Parameter</a></li>
<li><a name='toc8' href='#sect8'>Description</a></li>
<li><a name='toc9' href='#sect9'>Fortran 77 Notes</a></li>
<li><a name='toc10' href='#sect10'>Notes</a></li>
<li><a name='toc11' href='#sect11'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
