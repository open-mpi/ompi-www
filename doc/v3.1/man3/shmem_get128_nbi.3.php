<?php
$topdir = "../../..";
$title = "shmem_get128_nbi(3) man page (version 3.1.1)";
$meta_desc = "Open MPI v3.1.1 man page: shmem_get128_nbi(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
   <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>

<p> <i><i>shmem_getmem_nbi</i>(3)</i>, <i><i>shmem_char_get_nbi</i>(3)</i>, <i><i>shmem_short_get_nbi</i>(3)</i>,
<i><i>shmem_int_get_nbi</i>(3)</i>, <i><i>shmem_long_get_nbi</i>(3)</i>, <i><i>shmem_longlong_get_nbi</i>(3)</i>,
<i><i>shmem_float_get_nbi</i>(3)</i>, <i><i>shmem_double_get_nbi</i>(3)</i>, <i><i>shmem_longdouble_get_nbi</i>(3)</i>,
<i><i>shmem_get8_nbi</i>(3)</i>, <i><i>shmem_get16_nbi</i>(3)</i>, <i><i>shmem_get32_nbi</i>(3)</i>, <i><i>shmem_get64_nbi</i>(3)</i>,
<i><i>shmem_get128_nbi</i>(3)</i>, - The nonblocking get routines provide a method for
copying data from a contiguous remote data object on the specified PE to
the local data object.
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>

<p> C or C++: <br>
<pre>#include &lt;mpp/shmem.h&gt;
void shmem_getmem_nbi(void *dest, const void *source,
  size_t nelems, int pe);
void shmem_char_get(char *dest, const char *source,
  size_t nelems, int pe);
void shmem_short_get(short *dest, const short *source,
  size_t nelems, int pe);
void shmem_int_get(int *dest, const int *source,
  size_t nelems, int pe);
void shmem_long_get(long *dest, const long *source,
  size_t nelems, int pe);
void shmem_longlong_get(long long *dest, const long long *source,
  size_t nelems, int pe);
void shmem_float_get(float *dest, const float *source,
  size_t nelems, int pe);
void shmem_double_get(double *dest, const double *source,
  size_t nelems, int pe);
void shmem_longdouble_get(long double *dest, const long double *source,
  size_t nelems, int pe);
void shmem_get8(void *dest, const void *source,
  size_t nelems, int pe);
void shmem_get16(void *dest, const void *source,
  size_t nelems, int pe);
void shmem_get32(void *dest, const void *source,
  size_t nelems, int pe);
void shmem_get64(void *dest, const void *source,
  size_t nelems, int pe);
void shmem_get128(void *dest, const void *source,
  size_t nelems, int pe);
</pre> Fortran: <br>
<pre>INCLUDE "mpp/shmem.fh"
INTEGER nelems, pe
CALL SHMEM_GETMEM_NBI(dest, source, nelems, pe)
CALL SHMEM_CHARACTER_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_COMPLEX_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_DOUBLE_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_INTEGER_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_LOGICAL_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_REAL_GET_NBI(dest, source, nelems, pe)
CALL SHMEM_GET4_NBI(dest, source, nelems, pe)
CALL SHMEM_GET8_NBI(dest, source, nelems, pe)
CALL SHMEM_GET32_NBI(dest, source, nelems, pe)
CALL SHMEM_GET64_NBI(dest, source, nelems, pe)
CALL SHMEM_GET128_NBI(dest, source, nelems, pe)
</pre>
<h2><a name='sect2' href='#toc2'>Description</a></h2>

<p> The get routines provide a method for copying a contiguous
symmetric data object from a different PE to a contiguous data object on
the local PE. The routines return after posting the operation. The operation
is considered complete after a subsequent call to shmem_quiet. At the completion
of shmem_quiet, the data has been delivered to the dest array on the local
PE. <p>
The arguments are as follows:
<dl>

<dt>dest </dt>
<dd>Local data object to be updated. </dd>

<dt>source
</dt>
<dd>Data object on the PE identified by pe that contains the data to be copied.
This data object must be remotely accessible. </dd>

<dt>nelems </dt>
<dd>Number of elements
in the target and source arrays. len must be of type integer. If you are
using Fortran, it must be a constant, variable, or array element of default
integer type. </dd>

<dt>pe </dt>
<dd>PE number of the remote PE. pe must be of type integer. If
you are using Fortran, it must be a constant, variable, or array element
of default integer type. </dd>
</dl>
<p>
If you are using Fortran, data types must be of
default size. For example, a real variable must be declared as REAL, REAL*4,
or REAL(KIND=4).
<h2><a name='sect3' href='#toc3'>Notes</a></h2>

<p> See <i><i>intro_shmem</i>(3)</i> for a definition of the term remotely
accessible.
<h2><a name='sect4' href='#toc4'>Examples</a></h2>

<p> Consider this simple example for Fortran. <br>
<pre>PROGRAM REDUCTION
  REAL VALUES, SUM
  COMMON /C/ VALUES
  REAL WORK
  CALL START_PES(0) ! ALLOW ANY NUMBER OF PES
  VALUES = MY_PE() ! INITIALIZE IT TO SOMETHING
  CALL SHMEM_BARRIER_ALL
  SUM = 0.0
  DO I = 0,NUM_PES()-1
    CALL SHMEM_REAL_GET_NBI(WORK, VALUES, 1, I)
    CALL SHMEM_QUIET                ! wait for delivery
    SUM = SUM + WORK
  ENDDO
  PRINT *, &rsquo;PE &rsquo;, MY_PE(), &rsquo; COMPUTED SUM=&rsquo;, SUM
  CALL SHMEM_BARRIER_ALL
END
</pre>
<h2><a name='sect5' href='#toc5'>See Also</a></h2>

<p> <i><i>intro_shmem</i>(3)</i>, <i><i>shmem_quiet</i>(3)</i>  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>Description</a></li>
<li><a name='toc3' href='#sect3'>Notes</a></li>
<li><a name='toc4' href='#sect4'>Examples</a></li>
<li><a name='toc5' href='#sect5'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
