<?php
$topdir = "../../..";
$title = "MPI_Win_create(3) man page (version 3.1.3)";
$meta_desc = "Open MPI v3.1.3 man page: MPI_WIN_CREATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
       <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Win_create</b> - One-sided MPI call that returns a window object
for RMA operations.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
MPI_Win_create(void *base, MPI_Aint size, int disp_unit,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Info info, MPI_Comm comm, MPI_Win *win)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_WIN_CREATE(BASE, SIZE, DISP_UNIT, INFO, COMM, WIN, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt; BASE(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND) SIZE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Win_create(base, size, disp_unit, info, comm, win, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: disp_unit
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Info), INTENT(IN) :: info
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(OUT) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>base </dt>
<dd>Initial address of window (choice). </dd>

<dt>size </dt>
<dd>Size of window
in bytes (nonnegative integer). </dd>

<dt>disp_unit </dt>
<dd>Local unit size for displacements,
in bytes (positive integer). </dd>

<dt>info </dt>
<dd>Info argument (handle). </dd>

<dt>comm </dt>
<dd>Communicator
(handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>win </dt>
<dd>Window object returned by the call (handle).
</dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Win_create
is a one-sided MPI communication collective call executed by all processes
in the group of <i>comm</i>. It returns a window object that can be used by these
processes to perform RMA operations. Each process specifies a window of
existing memory that it exposes to RMA accesses by the processes in the
group of <i>comm</i>. The window consists of <i>size</i> bytes, starting at address <i>base</i>.
A process may elect to expose no memory by specifying <i>size</i> = 0. <p>
If the <i>base</i>
value used by MPI_Win_create was allocated by <a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a>, the size of
the window can be no larger than the value set by the <a href="../man3/MPI_Alloc_mem.3.php">MPI_ALLOC_MEM</a> function.
<p>
The displacement unit argument is provided to facilitate address arithmetic
in RMA operations: the target displacement argument of an RMA operation
is scaled by the factor <i>disp_unit</i> specified by the target process, at window
creation. <p>
The following info keys are supported:
<dl>

<dt>no_locks </dt>
<dd>If set to <i>true</i>,
then the implementation may assume that the local window is never locked
(by a call to <a href="../man3/MPI_Win_lock.3.php">MPI_Win_lock</a> or <a href="../man3/MPI_Win_lock_all.3.php">MPI_Win_lock_all</a>).  Setting this value if
only active synchronization may allow the implementation to enable certain
optimizations. <p>
</dd>

<dt>accumulate_ordering </dt>
<dd>By default, accumulate operations from
one initiator to one target on the same window are strictly ordered.  If
the info key accumulate_ordering is set to <i>none</i>, no ordering of accumulate
operations guaranteed.  They key can also be a comma-separated list of required
orderings consisting of <i>rar</i>, <i>war</i>, <i>raw</i>, and <i>waw</i> for read-after-read, write-after-read,
read-after-write, and write-after-write, respectively.  Looser ordering constraints
are likely to result in improved performance. <p>
</dd>

<dt>accumulate_ops </dt>
<dd>If set to <i>same_op</i>,
the implementation will assume that all concurrent accumulate calls to
the same target address will use the same operation.  If set to <i>same_op_no_op</i>,
then the implementation will assume that all concurrent accumulate calls
to the same target address will use the same operation or MPI_NO_OP.  The
default is <i>same_op_no_op</i>. <p>
</dd>

<dt>same_size </dt>
<dd>If set to <i>true</i>, then the implementation
may assume that the argument <i>size</i> is identical on all processes, and that
all processes have provided this info key with the same value. <p>
</dd>

<dt>same_disp_unit
</dt>
<dd>If set to <i>true</i>, then the implementation may assume that the argument <i>disp_unit</i>
is identical on all processes, and that all processes have provided this
info key with the same value. <p>
</dd>
</dl>

<h2><a name='sect8' href='#toc8'>Notes</a></h2>
Common choices for <i>disp_unit</i> are 1 (no
scaling), and (in C syntax) <i>sizeof(type)</i>, for a window that consists of
an array of elements of type <i>type</i>. The later choice will allow one to use
array indices in RMA calls, and have those scaled correctly to byte displacements,
even in a heterogeneous environment. <p>
Use memory allocated by <a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a>
to guarantee properly aligned window boundaries (such as word, double-word,
cache line, page frame, and so on). <p>

<p>
<p>
<p>
<h2><a name='sect9' href='#toc9'>Fortran 77 Notes</a></h2>
The MPI standard
prescribes portable Fortran syntax for the <i>SIZE</i> argument only for Fortran
90. FORTRAN 77 users may use the non-portable syntax <p>
<br>
<pre>     INTEGER*MPI_ADDRESS_KIND SIZE
</pre><p>
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the length
of the declared integer in bytes.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. C++ functions do not return errors. If the default
error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the
C++ exception mechanism will be used to throw an MPI::Exception object.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
<a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a> <a href="../man3/MPI_Free_mem.3.php">MPI_Free_mem</a> <a href="../man3/MPI_Win_allocate.3.php">MPI_Win_allocate</a>
<a href="../man3/MPI_Win_allocate_shared.3.php">MPI_Win_allocate_shared</a> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Fortran 77 Notes</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
<li><a name='toc11' href='#sect11'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
