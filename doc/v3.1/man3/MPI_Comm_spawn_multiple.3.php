<?php
$topdir = "../../..";
$title = "MPI_Comm_spawn_multiple(3) man page (version 3.1.3)";
$meta_desc = "Open MPI v3.1.3 man page: MPI_COMM_SPAWN_MULTIPLE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Comm_spawn_multiple</b> - Spawns multiple binaries, or the same
binary with multiple sets of arguments.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Comm_spawn_multiple(int count, char *array_of_commands[],
<tt> </tt>&nbsp;<tt> </tt>&nbsp;char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info
<tt> </tt>&nbsp;<tt> </tt>&nbsp;array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;int array_of_errcodes[])
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_COMM_SPAWN_MULTIPLE(COUNT, ARRAY_OF_COMMANDS, ARRAY_OF_ARGV,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;ARRAY_OF_MAXPROCS, ARRAY_OF_INFO, ROOT, COMM, INTERCOMM,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;ARRAY_OF_ERRCODES, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COUNT, ARRAY_OF_INFO(*), ARRAY_OF_MAXPROCS(*), ROOT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, INTERCOMM, ARRAY_OF_ERRCODES(*), IERROR
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER*(*) ARRAY_OF_COMMANDS(*), ARRAY_OF_ARGV(COUNT, *)
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;array_of_maxprocs, array_of_info, root, comm, intercomm,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;array_of_errcodes, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: count, array_of_maxprocs(*), root
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER(LEN=*), INTENT(IN) :: array_of_commands(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;CHARACTER(LEN=*), INTENT(IN) :: array_of_argv(count, *)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Info), INTENT(IN) :: array_of_info(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(OUT) :: intercomm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER :: array_of_errcodes(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>count </dt>
<dd>Number of commands (positive integer, significant
to MPI only at <i>root</i> -- see NOTES). </dd>

<dt>array_of_commands </dt>
<dd>Programs to be executed
(array of strings, significant only at <i>root</i>). </dd>

<dt>array_of_argv </dt>
<dd>Arguments for
<i>commands</i> (array of array of strings,  significant only at <i>root</i>). </dd>

<dt>array_of_maxprocs
</dt>
<dd>Maximum number of processes to start for each command (array of integers,
significant only at <i>root</i>). </dd>

<dt>array_of_info </dt>
<dd>Info objects telling the runtime
system where and how to start processes (array of handles, significant
only at <i>root</i>). </dd>

<dt>root </dt>
<dd>Rank of process in which previous arguments are examined
(integer). </dd>

<dt>comm </dt>
<dd>Intracommunicator containing group of spawning processes
(handle).
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>intercomm </dt>
<dd>Intercommunicator between original
group and the newly spawned group (handle). </dd>

<dt>array_of_errcodes </dt>
<dd>One code per
process (array of integers). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).

<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Comm_spawn_multiple is identical to <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i> except
that it can specify multiple executables. The first argument, <i>count</i>, indicates
the number of executables. The next three arguments are arrays of the corresponding
arguments in <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i>. The next argument, <i>array_of_info</i>, is an
array of <i>info</i> arguments, one for each executable. See the INFO ARGUMENTS
section for more information. <p>
For the Fortran version of <i>array_of_argv</i>,
the element <i>array_of_argv</i>(i,j) is the jth argument to command number i.
<p>
In any language, an application may use the constant MPI_ARGVS_NULL (which
is likely to be (char ***)0 in C) to specify that no arguments should be
passed to any commands. The effect of setting individual elements of <i>array_of_argv</i>
to MPI_ARGV_NULL is not defined. To specify arguments for some commands
but not others, the commands without arguments should have a corresponding
<i>argv</i> whose first element is null ((char *)0 in C and empty string in Fortran).
<p>
All of the spawned processes have the same MPI_COMM_WORLD. Their ranks in
MPI_COMM_WORLD correspond directly to the order in which the commands are
specified in MPI_Comm_spawn_multiple. Assume that m1 processes are generated
by the first command, m2 by the second, etc. The processes corresponding
to the first command have ranks 0, 1,..., m1-1. The processes in the second
command have ranks m1, m1+1, ..., m1+m2-1. The processes in the third have ranks
m1+m2, m1+m2+1, ..., m1+m2+m3-1, etc. <p>
The <i>array_of_errcodes</i> argument is 1-dimensional
array of size <p>
<br>
<pre><tt> </tt>&nbsp;<tt> </tt>&nbsp; _ count
<tt> </tt>&nbsp;<tt> </tt>&nbsp;\       n ,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;/_ i=1   i
</pre><p>
where i is the ith element of <i>array_of_maxprocs</i>. Command number <i>i</i> corresponds
to the i contiguous slots in this array from element <p>
<br>
<pre>                      _              _
<tt> </tt>&nbsp;<tt> </tt>&nbsp; _ i-1          |   _ i          |
<tt> </tt>&nbsp;<tt> </tt>&nbsp;\       n ,  to |  \      n      | -1
<tt> </tt>&nbsp;<tt> </tt>&nbsp;/_ j=1   i      |  /_ j=1  j     |
                     |_              _|
</pre><p>
Error codes are treated as for <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i>.
<p>
<p>
<h2><a name='sect8' href='#toc8'>Info Arguments</a></h2>
The following
keys for <i>info</i> are recognized in "Open MPI". (The reserved values mentioned
in Section 5.3.4 of the MPI-2 standard are not implemented.) <p>
<p>
<br>
<pre>Key                    Type     Description
---                    ----     -----------
host                   char *   Comma-separated list of hosts on which
                                the processes should be spawned.  See
                                the orte_host man page for an
                                explanation of how this will be used.
hostfile               char *   Hostfile containing the hosts on which
                                the processes are to be spawned. See
                                the orte_hostfile man page for
                                an explanation of how this will be
                                used.
add-host               char *   Add the specified hosts to the list of
                                hosts known to this job and use it for
                                the associated processes. This will be
                                used similarly to the -host option.
add-hostfile           char *   Hostfile containing hosts to be added
                                to the list of hosts known to this job
                                and use it for the associated
                                process. This will be used similarly
                                to the -hostfile option.
wdir                   char *   Directory where the executable is
                                located. If files are to be
                                pre-positioned, then this location is
                                the desired working directory at time
                                of execution - if not specified, then
                                it will automatically be set to
                                ompi_preload_files_dest_dir.
ompi_prefix            char *   Same as the --prefix command line
                                argument to mpirun.
ompi_preload_binary    bool     If set to true, pre-position the
                                specified executable onto the remote
                                host. A destination directory must
                                also be provided.
ompi_preload_files     char *   A comma-separated list of files that
                                are to be pre-positioned in addition
                                to the executable.  Note that this
                                option does not depend upon
                                ompi_preload_binary - files can
                                be moved to the target even if an
                                executable is not moved.
ompi_stdin_target      char *   Comma-delimited list of ranks to
                                receive stdin when forwarded.
ompi_non_mpi           bool     If set to true, launching a non-MPI
                                application; the returned communicator
                                will be MPI_COMM_NULL. Failure to set
                                this flag when launching a non-MPI
                                application will cause both the child
                                and parent jobs to "hang".
ompi_param             char *   Pass an OMPI MCA parameter to the
                                child job.  If that parameter already
                                exists in the environment, the value
                                will be overwritten by the provided
                                value.
mapper                 char *   Mapper to be used for this job
map_by                 char *   Mapping directive indicating how
                                processes are to be mapped (slot,
                                node, socket, etc.).
rank_by                char *   Ranking directive indicating how
                                processes are to be ranked (slot,
                                node, socket, etc.).
bind_to                char *   Binding directive indicating how
                                processes are to be bound (core, slot,
                                node, socket, etc.).
path                   char *   List of directories to search for
                                the executable
npernode               char *   Number of processes to spawn on
                                each node of the allocation
pernode                bool     Equivalent to npernode of 1
ppr                    char *   Spawn specified number of processes
                                on each of the identified object type
env                    char *   Newline-delimited list of envars to
                                be passed to the spawned procs
</pre>
<p> <p>
<i>bool</i> info keys are actually strings but are evaluated as follows: if the
string value is a number, it is converted to an integer and cast to a boolean
(meaning that zero integers are false and non-zero values are true).  If
the string value is (case-insensitive) "yes" or "true", the boolean is true.
 If the string value is (case-insensitive) "no" or "false", the boolean
is false.  All other string values are unrecognized, and therefore false.

<p> <p>
Note that if any of the info handles have <i>ompi_non_mpi</i> set to true, then
all info handles must have it set to true.  If some are set to true, but
others are set to false (or are unset), MPI_ERR_INFO will be returned.
<p>
<p>
Note that in "Open MPI", the first array location in <i>array_of_info</i> is applied
to all the commands in <i>array_of_commands</i>.
<p>
<h2><a name='sect9' href='#toc9'>Notes</a></h2>
The argument <i>count</i> is interpreted
by MPI only at the root, as is <i>array_of_argv</i>. Since the leading dimension
of <i>array_of_argv</i> is <i>count</i>, a nonpositive value of <i>count</i> at a nonroot node
could theoretically cause a runtime bounds check error, even though <i>array_of_argv</i>
should be ignored by the subroutine. If this happens, you should explicitly
supply a reasonable value of <i>count</i> on the nonroot nodes. <p>
Similar to <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i>,
it is the application&rsquo;s responsibility to terminate each individual set
of argv in the <i>array_of_argv</i> argument.  In C, each argv array is terminated
by a NULL pointer.  In Fortran, each argv array is terminated by an empty
string (note that compilers will not automatically insert this blank string;
the application must ensure to have enough space for an empty string entry
as the last element of the array). <p>
Other restrictions apply to the <i>array_of_argv</i>
parameter; see <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i>&rsquo;s description of the <i>argv</i> parameter for
more details. <p>
MPI-3.1 implies (but does not directly state) that the argument
<i>array_of_commands</i> must be an array of strings of length <i>count</i>.  Unlike the
<i>array_of_argv</i> parameter, <i>array_of_commands</i> does not need to be terminated
with a NULL pointer in C or a blank string in Fortran.  Older versions of
Open MPI required that <i>array_of_commands</i> be terminated with a blank string
in Fortran; that is no longer required in this version of Open MPI. <p>
Calling
<i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i> many times would create many sets of children with different
MPI_COMM_WORLDs, whereas MPI_Comm_spawn_multiple creates children with
a single MPI_COMM_WORLD, so the two methods are not completely equivalent.
Also if you need to spawn multiple executables, you may get better performance
by using MPI_Comm_spawn_multiple instead of calling <i><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)</i> several
times.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
C++ functions do not return errors. If the default error handler is set
to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object. <p>
Before the error value is
returned, the current MPI error handler is called. By default, this error
handler aborts the MPI job, except for I/O function errors. The error handler
may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned. Note
that MPI does not guarantee that an MPI program can continue past an error.

<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
<br>
<pre><a href="../man3/MPI_Comm_spawn.3.php">MPI_Comm_spawn</a>(3)
<a href="../man3/MPI_Comm_get_parent.3.php">MPI_Comm_get_parent</a>(3)
mpirun(1)

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
