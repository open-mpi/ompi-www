<?php
$topdir = "../../..";
$title = "MPI_Alltoall(3) man page (version 3.1.0)";
$meta_desc = "Open MPI v3.1.0 man page: MPI_ALLTOALL(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<p>
<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Alltoall, <a href="../man3/MPI_Ialltoall.3.php">MPI_Ialltoall</a></b> - All processes send data to all

<p>processes
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<p>
<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Alltoall(const void *sendbuf, int sendcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype sendtype, void *recvbuf, int recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype recvtype, MPI_Comm comm)
int <a href="../man3/MPI_Ialltoall.3.php">MPI_Ialltoall</a>(const void *sendbuf, int sendcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype sendtype, void *recvbuf, int recvcount,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;RECVTYPE, COMM, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDBUF(*), RECVBUF(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, IERROR
<a href="../man3/MPI_Ialltoall.3.php">MPI_IALLTOALL</a>(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;RECVTYPE, COMM, REQUEST, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt;<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDBUF(*), RECVBUF(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMM, REQUEST, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;comm, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..) :: recvbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: sendcount, recvcount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
<a href="../man3/MPI_Ialltoall.3.php">MPI_Ialltoall</a>(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;comm, request, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: sendcount, recvcount
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Comm), INTENT(IN) :: comm
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(OUT) :: request
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>sendbuf </dt>
<dd>Starting address of send buffer (choice). </dd>

<dt>sendcount
</dt>
<dd>Number of elements to send to each process (integer). </dd>

<dt>sendtype </dt>
<dd>Datatype
of send buffer elements (handle). </dd>

<dt>recvcount </dt>
<dd>Number of elements to receive
from each process (integer). </dd>

<dt>recvtype </dt>
<dd>Datatype of receive buffer elements
(handle). </dd>

<dt>comm </dt>
<dd>Communicator over which data is to be exchanged (handle).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>recvbuf </dt>
<dd>Starting address of receive buffer (choice). </dd>

<dt>request
</dt>
<dd>Request (handle, non-blocking only). </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).

<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Alltoall is a collective operation in which all processes
send the same amount of data to each other, and receive the same amount
of data from each other. The operation of this routine can be represented
as follows, where each process performs 2n (n being the number of processes
in communicator <i>comm</i>) independent point-to-point communications (including
communication with itself). <p>
<br>
<pre><tt> </tt>&nbsp;<tt> </tt>&nbsp;<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>(comm, &amp;n);
<tt> </tt>&nbsp;<tt> </tt>&nbsp;for (i = 0, i &lt; n; i++)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;    <a href="../man3/MPI_Send.3.php">MPI_Send</a>(sendbuf + i * sendcount * extent(sendtype),
<tt> </tt>&nbsp;<tt> </tt>&nbsp;        sendcount, sendtype, i, ..., comm);
<tt> </tt>&nbsp;<tt> </tt>&nbsp;for (i = 0, i &lt; n; i++)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;    <a href="../man3/MPI_Recv.3.php">MPI_Recv</a>(recvbuf + i * recvcount * extent(recvtype),
<tt> </tt>&nbsp;<tt> </tt>&nbsp;        recvcount, recvtype, i, ..., comm);
</pre><p>
Each process breaks up its local <i>sendbuf</i> into n blocks - each containing
<i>sendcount</i> elements of type <i>sendtype</i> - and divides its <i>recvbuf</i> similarly
according to <i>recvcount</i> and <i>recvtype</i>. Process j sends the k-th block of its
local <i>sendbuf</i> to process k, which places the data in the j-th block of its
local <i>recvbuf</i>. The amount of data sent must be equal to the amount of data
received, pairwise, between every pair of processes.
<p> WHEN COMMUNICATOR
IS AN INTER-COMMUNICATOR <p>
When the communicator is an inter-communicator,
the gather operation occurs in two phases.  The data is gathered from all
the members of the first group and received by all the members of the second
group.  Then the data is gathered from all the members of the second group
and received by all the members of the first.  The operation exhibits a
symmetric, full-duplex behavior. <p>
The first group defines the root process.
 The root process uses MPI_ROOT as the value of <i>root</i>.  All other processes
in the first group use MPI_PROC_NULL as the value of <i>root</i>.  All processes
in the second group use the rank of the root process in the first group
as the value of <i>root</i>. <p>
When the communicator is an intra-communicator, these
groups are the same, and the operation occurs in a single phase.
<p>
<h2><a name='sect8' href='#toc8'>Use of
In-place Option</a></h2>
When the communicator is an intracommunicator, you can perform
an all-to-all operation in-place (the output buffer is used as the input buffer).
 Use the variable MPI_IN_PLACE as the value of <i>sendbuf</i>.  In this case, <i>sendcount</i>
and <i>sendtype</i> are ignored.  The input data of each process is assumed to
be in the area where that process would receive its own contribution to
the receive buffer.
<p> <p>

<h2><a name='sect9' href='#toc9'>Notes</a></h2>
<p>
All arguments on all processes are significant.
The <i>comm</i> argument, in particular, must describe the same communicator on
all processes. <p>
There are two MPI library functions that are more general
than MPI_Alltoall. <a href="../man3/MPI_Alltoallv.3.php">MPI_Alltoallv</a> allows all-to-all communication to and from
buffers that need not be contiguous; different processes may send and receive
different amounts of data. <a href="../man3/MPI_Alltoallw.3.php">MPI_Alltoallw</a> expands <a href="../man3/MPI_Alltoallv.3.php">MPI_Alltoallv</a>&rsquo;s functionality
to allow the exchange of data with different datatypes.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all
MPI routines return an error value; C routines as the value of the function
and Fortran routines in the last argument. C++ functions do not return errors.
If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then
on error the C++ exception mechanism will be used to throw an MPI::Exception
object. <p>
Before the error value is returned, the current MPI error handler
is called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>;
the predefined error handler MPI_ERRORS_RETURN may be used to cause error
values to be returned. Note that MPI does not guarantee that an MPI program
can continue past an error.
<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<br>
<pre><a href="../man3/MPI_Alltoallv.3.php">MPI_Alltoallv</a>
<a href="../man3/MPI_Alltoallw.3.php">MPI_Alltoallw</a>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
