<?php
$topdir = "../../..";
$title = "MPI_Init_thread(3) man page (version 3.1.0)";
$meta_desc = "Open MPI v3.1.0 man page: MPI_INIT_THREAD(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Init_thread</b> - Initializes the MPI execution environment
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Init_thread(int *argc, char ***argv,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;int required, int *provided)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_INIT_THREAD(REQUIRED, PROVIDED, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;REQUIRED, PROVIDED, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Init_thread(required, provided, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: required
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(OUT) :: provided
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>argc </dt>
<dd>C/C++ only: Pointer to the number of arguments. </dd>

<dt>argv
</dt>
<dd>C/C++ only: Argument vector. </dd>

<dt>required </dt>
<dd>Desired level of thread support (integer).
  </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>provided </dt>
<dd>Available level of thread support (integer).
</dd>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).   </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
This routine,
or <a href="../man3/MPI_Init.3.php">MPI_Init</a>, must be called before most other MPI routines are called. There
are a small number of exceptions, such as <a href="../man3/MPI_Initialized.3.php">MPI_Initialized</a> and <a href="../man3/MPI_Finalized.3.php">MPI_Finalized</a>.
 MPI can be initialized at most once; subsequent calls to <a href="../man3/MPI_Init.3.php">MPI_Init</a> or MPI_Init_thread
are erroneous. <p>
MPI_Init_thread, as compared to <a href="../man3/MPI_Init.3.php">MPI_Init</a>, has a provision
to request a certain level of thread support in <i>required</i>:
<dl>

<dt>MPI_THREAD_SINGLE
</dt>
<dd>Only one thread will execute. </dd>

<dt>MPI_THREAD_FUNNELED </dt>
<dd>If the process is multithreaded,
only the thread that called MPI_Init_thread will make MPI calls. </dd>

<dt>MPI_THREAD_SERIALIZED
</dt>
<dd>If the process is multithreaded, only one thread will make MPI library
calls at one time. </dd>

<dt>MPI_THREAD_MULTIPLE </dt>
<dd>If the process is multithreaded,
multiple threads may call MPI at once with no restrictions.  </dd>
</dl>
<p>
The level of
thread support available to the program is set in <i>provided</i>, except in C++,
where it is the return value of the function. In Open MPI, the value is
dependent on how the library was configured and built. Note that there is
no guarantee that <i>provided</i> will be greater than or equal to <i>required</i>. <p>
Also
note that calling MPI_Init_thread with a <i>required</i> value of <i>MPI_THREAD_SINGLE</i>
is equivalent to calling <a href="../man3/MPI_Init.3.php">MPI_Init</a>. <p>
All MPI programs must contain a call
to <a href="../man3/MPI_Init.3.php">MPI_Init</a> or MPI_Init_thread. Open MPI accepts the C/C++ <i>argc</i> and <i>argv</i>
arguments to main, but neither modifies, interprets, nor distributes them:
<p>
<br>
<pre><tt> </tt>&nbsp;<tt> </tt>&nbsp;{
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;/* declare variables */
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Init_thread(&amp;argc, &amp;argv, req, &amp;prov);
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;/* parse arguments */
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;/* main program */
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<a href="../man3/MPI_Finalize.3.php">MPI_Finalize</a>();
<tt> </tt>&nbsp;<tt> </tt>&nbsp;}
</pre>
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
The Fortran version does not have provisions for <i>argc</i> and <i>argv</i> and
takes only IERROR. <p>
It is the caller&rsquo;s responsibility to check the value of
<i>provided</i>, as it may be less than what was requested in <i>required</i>. <p>
The MPI
Standard does not say what a program can do before an MPI_Init_thread or
after an <a href="../man3/MPI_Finalize.3.php">MPI_Finalize</a>. In the Open MPI implementation, it should do as little
as possible. In particular, avoid anything that changes the external state
of the program, such as opening files, reading standard input, or writing
to standard output.
<h2><a name='sect9' href='#toc9'>MPI_THREAD_MULTIPLE Support</a></h2>
 MPI_THREAD_MULTIPLE support
is included if Open MPI was configured with the --enable-mpi-thread-multiple
configure switch.  You can check the output of <i><b>ompi_info</b>(1)</i> to see if Open
MPI has MPI_THREAD_MULTIPLE support:  <p>
<br>
<pre>shell$ ompi_info | grep -i thread
          Thread support: posix (mpi: yes, progress: no)
shell$
</pre> <p>
The "mpi: yes" portion of the above output indicates that Open MPI was
compiled with MPI_THREAD_MULTIPLE support.  <p>
Note that MPI_THREAD_MULTIPLE
support is only lightly tested.  It likely does not work for thread-intensive
applications.  Also note that <i>only</i> the MPI point-to-point communication functions
for the BTL&rsquo;s listed below are considered thread safe.  Other support functions
(e.g., MPI attributes) have not been certified as safe when simultaneously
used by multiple threads.  <p>
<br>
<pre>    tcp
    sm
    mx
    elan
    self
</pre> <p>
Note that Open MPI&rsquo;s thread support is in a fairly early stage; the above
devices are likely to <i>work</i>, but the latency is likely to be fairly high.
 Specifically, efforts so far have concentrated on <i>correctness</i>, not <i>performance</i>
(yet).
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
C++ functions do not return errors. If the default error handler is set
to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
will be used to throw an MPI::Exception object. <p>
Before the error value is
returned, the current MPI error handler is called. By default, this error
handler aborts the MPI job, except for I/O function errors. The error handler
may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned. Note
that MPI does not guarantee that an MPI program can continue past an error.

<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<br>
<pre><a href="../man3/MPI_Init.3.php">MPI_Init</a>
<a href="../man3/MPI_Initialized.3.php">MPI_Initialized</a>
<a href="../man3/MPI_Finalize.3.php">MPI_Finalize</a>
<a href="../man3/MPI_Finalized.3.php">MPI_Finalized</a>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
