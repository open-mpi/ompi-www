<?php
$topdir = "../../..";
$title = "shmem_float_iput(3) man page (version 3.1.1)";
$meta_desc = "Open MPI v3.1.1 man page: shmem_float_iput(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
    <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>

<p> <i><i>shmem_complex_iput</i>(3)</i>, <i><i>shmem_double_iput</i>(3)</i>, <i><i>shmem_float_iput</i>(3)</i>,
<i><i>shmem_int_iput</i>(3)</i>, <i><i>shmem_integer_iput</i>(3)</i>, <i><i>shmem_iput4</i>(3)</i>, <i><i>shmem_iput8</i>(3)</i>,
<i><i>shmem_iput32</i>(3)</i>, <i><i>shmem_iput64</i>(3)</i>, <i><i>shmem_iput128</i>(3)</i>, <i><i>shmem_logical_iput</i>(3)</i>,
<i><i>shmem_long_iput</i>(3)</i>, <i><i>shmem_longdouble_iput</i>(3)</i>, <i><i>shmem_longlong_iput</i>(3)</i>, <i><i>shmem_real_iput</i>(3)</i>,
<i><i>shmem_short_iput</i>(3)</i> - Transfer strided data to a specified processing element
(PE).
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>

<p> C or C++: <br>
<pre>#include &lt;mpp/shmem.h&gt;
void shmem_double_iput(double *target, const double *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_float_iput(float *target, const float *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_int_iput(int *target, const int *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_iput32(void *target, const void *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_iput64(void *target, const void *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_iput128(void *target, const void *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_long_iput(long *target, const long *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
void shmem_longdouble_iput(long double *target,
  const long double *source, ptrdiff_t tst, ptrdiff_t sst,
  size_t len, int pe);
void shmem_longlong_iput(long long *target,
  const long long *source, ptrdiff_t tst, ptrdiff_t sst,
  size_t len, int pe);
void shmem_short_iput(short *target, const short *source,
  ptrdiff_t tst, ptrdiff_t sst, size_t len, int pe);
</pre> Fortran: <br>
<pre>INCLUDE "mpp/shmem.fh"
INTEGER tst, sst, len, pe
CALL SHMEM_COMPLEX_IPUT(target, source, tst, sst, len,
&amp; pe)
CALL SHMEM_DOUBLE_IPUT(target, source, tst, sst, len,
&amp; pe)
CALL SHMEM_INTEGER_IPUT(target, source, tst, sst, len,
&amp; pe)
CALL SHMEM_IPUT4(target, source, tst, sst, len, pe)
CALL SHMEM_IPUT8(target, source, tst, sst, len, pe)
CALL SHMEM_IPUT32(target, source, tst, sst, len, pe)
CALL SHMEM_IPUT64(target, source, tst, sst, len, pe)
CALL SHMEM_IPUT128(target, source, tst, sst, len, pe)
CALL SHMEM_LOGICAL_IPUT(target, source, tst, sst, len,
&amp; pe)
CALL SHMEM_REAL_IPUT(target, source, tst, sst, len, pe)
</pre> <p>

<h2><a name='sect2' href='#toc2'>Description</a></h2>

<p> The shmem_iput routines read the elements of a local array
(<b>source</b>) and write them to a remote array (<b>target</b>) on the PE indicated
by <b>pe</b>. These routines return when the data has been copied out of the source
array on the local PE but not necessarily before the data has been delivered
to the remote data object. <p>
The arguments are as follows:
<dl>

<dt>target </dt>
<dd>Array to
be updated on the remote PE. This data object must be remotely accessible.
</dd>

<dt>source </dt>
<dd>Array containing the data to be copied. </dd>

<dt>tst </dt>
<dd>The stride between consecutive
elements of the target array. The stride is scaled by the element size of
the target array. A value of 1 indicates contiguous data. tst must be of
type integer. If you are using Fortran, it must be a default integer value.
</dd>

<dt>sst </dt>
<dd>The stride between consecutive elements of the source array. The stride
is scaled by the element size of the source array. A value of 1 indicates
contiguous data. sst must be of type integer. If you are using Fortran, it
must be a default integer value. </dd>

<dt>len </dt>
<dd>Number of elements in the target and
source arrays. len must be of type integer. If you are using Fortran, it
must be a constant, variable, or array element of default integer type.
</dd>

<dt>pe </dt>
<dd>PE number of the remote PE. pe must be of type integer. If you are using
Fortran, it must be a constant, variable, or array element of default integer
type. </dd>
</dl>
<p>
The target and source data objects must conform to typing constraints,
which are as follows: <p>

<dl>

<dt><b>shmem_iput32, shmem_iput4</b>: Any noncharacter type
that has a storage size equal </dt>
<dd>to 32 bits. </dd>

<dt><b>shmem_iput64, shmem_iput8</b>: Any
noncharacter type that has a storage size equal </dt>
<dd>to 64 bits. </dd>

<dt><b>shmem_iput128</b>:
Any noncharacter type that has a storage size equal to 128 bits. </dt>
<dd></dd>

<dt><b>shmem_short_iput</b>:
Elements of type short. </dt>
<dd></dd>

<dt><b>shmem_int_iput</b>: Elements of type int. </dt>
<dd></dd>

<dt><b>shmem_long_iput</b>:
Elements of type long. </dt>
<dd></dd>

<dt><b>shmem_longlong_iput</b>: Elements of type long long. </dt>
<dd></dd>

<dt><b>shmem_float_iput</b>:
Elements of type float. </dt>
<dd></dd>

<dt><b>shmem_double_iput</b>: Elements of type double. </dt>
<dd></dd>

<dt><b>shmem_longdouble_iput</b>:
Elements of type long double. </dt>
<dd></dd>

<dt><b>SHMEM_COMPLEX_IPUT</b>: Elements of type complex
of default size. </dt>
<dd></dd>

<dt><b>SHMEM_DOUBLE_IPUT</b>: (Fortran) Elements of type double precision.
</dt>
<dd></dd>

<dt><b>SHMEM_INTEGER_IPUT</b>: Elements of type integer. </dt>
<dd></dd>

<dt><b>SHMEM_LOGICAL_IPUT</b>: Elements
of type logical. </dt>
<dd></dd>

<dt><b>SHMEM_REAL_IPUT</b>: Elements of type real. </dt>
<dd></dd>

<dt><b>SHMEM_LOGICAL_IPUT</b>:
Elements of type logical. </dt>
<dd></dd>

<dt><b>SHMEM_REAL_IPUT</b>: Elements of type real. </dt>
<dd></dd>
</dl>
<p>
If you
are using Fortran, data types must be of default size. For example, a real
variable must be declared as REAL, REAL*4 or REAL(KIND=4). <p>

<h2><a name='sect3' href='#toc3'>Notes</a></h2>

<p> See <i><i>intro_shmem</i>(3)</i>
for a definition of the term remotely accessible. <p>

<h2><a name='sect4' href='#toc4'>Examples</a></h2>

<p> Consider the
following simple shmem_long_iput example for C/C++ programs. <br>
<pre>#include &lt;mpp/shmem.h&gt;
main()
{
  short source[10] = { 1, 2, 3, 4, 5,
  6, 7, 8, 9, 10 };
  static short target[10];
  shmem_init();
  if (shmem_my_pe() == 0) {
    /* put 10 words into target on PE 1 */
    shmem_short_iput(target, source, 1, 2, 5, 1);
  }
  shmem_barrier_all(); /* sync sender and receiver */
  if (shmem_my_pe() == 1) {
    shmem_udcflush(); /* not required on IRIX systems */
    printf("target on PE %d is %d %d %d %d %d0, shmem_my_pe(),
    (int)target[0], (int)target[1], (int)target[2],
    (int)target[3], (int)target[4] );
  }
  shmem_barrier_all(); /* sync before exiting */
}
</pre>
<h2><a name='sect5' href='#toc5'>See Also</a></h2>

<p> <i><i>intro_shmem</i>(3)</i>, <i><i>shmem_iget</i>(3)</i>, <i><i>shmem_put</i>(3)</i>, <i><i>shmem_quiet</i>(3)</i>
<p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>Description</a></li>
<li><a name='toc3' href='#sect3'>Notes</a></li>
<li><a name='toc4' href='#sect4'>Examples</a></li>
<li><a name='toc5' href='#sect5'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
