<?php
$topdir = "../../..";
$title = "shmem_clear_lock(3) man page (version 3.1.2)";
$meta_desc = "Open MPI v3.1.2 man page: shmem_clear_lock(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
    <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>

<p> <i><i>shmem_set_lock</i>(3)</i>, <i><i>shmem_clear_lock</i>(3)</i>, <i><i>shmem_test_lock</i>(3)</i> - Releases,
locks, and tests a mutual exclusion memory lock.
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>

<p> C or C++: <br>
<pre>#include &lt;mpp/shmem.h&gt;
void shmem_clear_lock(volatile long *lock);
void shmem_set_lock(volatile long *lock);
int shmem_test_lock(volatile long *lock);
</pre> Fortran: <br>
<pre>INCLUDE "mpp/shmem.fh"
INTEGER lock, SHMEM_TEST_LOCK
CALL SHMEM_CLEAR_LOCK(lock)
CALL SHMEM_SET_LOCK(lock)
I = SHMEM_TEST_LOCK(lock)
</pre>
<h2><a name='sect2' href='#toc2'>Description</a></h2>

<p> The shmem_set_lock routine sets a mutual exclusion lock after
waiting for the lock to be freed by any other PE currently holding the
lock. Waiting PEs are assured of getting the lock in a first-come, first-served
manner. <p>
The shmem_clear_lock routine releases a lock previously set by shmem_set_lock
after ensuring that all local and remote stores initiated in the critical
region are complete. <p>
The shmem_test_lock function sets a mutual exclusion
lock only if it is currently cleared. By using this function, a PE can avoid
blocking on a set lock. If the lock is currently set, the function returns
without waiting. These routines are appropriate for protecting a critical
region from simultaneous update by multiple PEs. They accept the following
arguments:
<dl>

<dt>lock </dt>
<dd>A symmetric data object that is a scalar variable or an
array of length 1. This data object must be set to 0 on all processing elements
(PEs) prior to the first use. lock must be of type integer. If you are using
Fortran, it must be of default kind. </dd>
</dl>
<p>

<h2><a name='sect3' href='#toc3'>Notes</a></h2>

<p> The term symmetric data object
is defined on <i><i>intro_shmem</i>(3)</i>. <p>

<h2><a name='sect4' href='#toc4'>Return Values</a></h2>

<p> The shmem_test_lock function
returns 0 if the lock was originally cleared and this call was able to
set the lock. A value of 1 is returned if the lock had been set and the
call returned without waiting to set the lock. <p>

<h2><a name='sect5' href='#toc5'>See Also</a></h2>

<p> <i><i>intro_shmem</i>(3)</i>
<p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>Description</a></li>
<li><a name='toc3' href='#sect3'>Notes</a></li>
<li><a name='toc4' href='#sect4'>Return Values</a></li>
<li><a name='toc5' href='#sect5'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
