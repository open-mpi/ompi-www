<?php
$topdir = "../../..";
$title = "MPI_Win_fence(3) man page (version 3.1.1)";
$meta_desc = "Open MPI v3.1.1 man page: MPI_WIN_FENCE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Win_fence</b> - Synchronizes RMA calls on a window.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Win_fence(int assert, MPI_Win win)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_WIN_FENCE(ASSERT, WIN, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER ASSERT, WIN, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Win_fence(assert, win, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: assert
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(IN) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>assert </dt>
<dd>Program assertion (integer). </dd>

<dt>win </dt>
<dd>Window object (handle).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>IERROR </dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Win_fence
synchronizes RMA calls on <i>win</i>. The call is collective on the group of <i>win</i>.
All RMA operations on <i>win</i> originating at a given process and started before
the fence call will complete at that process before the fence call returns.
They will be completed at their target before the fence call returns at
the target. RMA operations on <i>win</i> started by a process after the fence call
returns will access their target window only after MPI_Win_fence has been
called by the target process. <p>
The call completes an RMA access epoch if
it was preceded by another fence call and the local process issued RMA
communication calls on <i>win</i> between these two calls. The call completes an
RMA exposure epoch if it was preceded by another fence call and the local
window was the target of RMA accesses between these two calls. The call
starts an RMA access epoch if it is followed by another fence call and
by RMA communication calls issued between these two fence calls. The call
starts an exposure epoch if it is followed by another fence call and the
local window is the target of RMA accesses between these two fence calls.
Thus, the fence call is equivalent to calls to a subset of <i>post, start,
complete, wait</i>. <p>
A fence call usually entails a barrier synchronization:
a process completes a call to MPI_Win_fence only after all other processes
in the group have entered their matching call. However, a call to MPI_Win_fence
that is known not to end any epoch (in particular, a call with <i>assert</i> =
MPI_MODE_NOPRECEDE) does not necessarily act as a barrier.
<p>
<h2><a name='sect8' href='#toc8'>Note</a></h2>
Calls to
MPI_Win_fence should both precede and follow calls to put, get or accumulate
that are synchronized with fence calls. <p>

<p>
<p>
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
Almost all MPI routines
return an error value; C routines as the value of the function and Fortran
routines in the last argument. C++ functions do not return errors. If the
default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error
the C++ exception mechanism will be used to throw an MPI::Exception object.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
<p>
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<a href="../man3/MPI_Win_create.3.php">MPI_Win_create</a> <a href="../man3/MPI_Win_start.3.php">MPI_Win_start</a> <a href="../man3/MPI_Win_post.3.php">MPI_Win_post</a>
<a href="../man3/MPI_Win_complete.3.php">MPI_Win_complete</a> <a href="../man3/MPI_Win_wait.3.php">MPI_Win_wait</a> <br>

<p> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Note</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
