<?php
$topdir = "../../..";
$title = "shmem_get128(3) man page (version 3.1.0)";
$meta_desc = "Open MPI v3.1.0 man page: shmem_get128(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
    <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>

<p> <i><i>shmem_character_get</i>(3)</i>, <i><i>shmem_complex_get</i>(3)</i>, <i><i>shmem_double_get</i>(3)</i>,
<i><i>shmem_float_get</i>(3)</i>, <i><i>shmem_get4</i>(3)</i>, <i><i>shmem_get8</i>(3)</i>, <i><i>shmem_get32</i>(3)</i>, <i><i>shmem_get64</i>(3)</i>,
<i><i>shmem_get128</i>(3)</i>, <i><i>shmem_getmem</i>(3)</i>, <i><i>shmem_int_get</i>(3)</i>, <i><i>shmem_integer_get</i>(3)</i>,
<i><i>shmem_logical_get</i>(3)</i>, <i><i>shmem_long_get</i>(3)</i>, <i><i>shmem_longdouble_get</i>(3)</i>, <i><i>shmem_longlong_get</i>(3)</i>,
<i><i>shmem_real_get</i>(3)</i>, <i><i>shmem_short_get</i>(3)</i> - Transfers data from a specified
processing element (PE).
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>

<p> C or C++: <br>
<pre>#include &lt;mpp/shmem.h&gt;
void shmem_get32(void *target, const void *source,
  size_t len, int pe);
void shmem_get64(void *target, const void *source,
  size_t len, int pe);
void shmem_get128(void *target, const void *source,
  size_t len, int pe);
void shmem_getmem(void *target, const void *source,
  size_t len, int pe);
void shmem_int_get(int *target, const int *source,
  size_t len, int pe);
void shmem_double_get(double *target, const double *source,
  size_t len, int pe);
void shmem_float_get(float *target, const float *source,
  size_t len, int pe);
void shmem_long_get(long *target, const long *source,
  size_t len, int pe);
void shmem_longdouble_get(long double *target,
  const long double *source, size_t len, int pe);
void shmem_longlong_get(long long *target,
  const long long *source, size_t len, int pe);
void shmem_short_get(short *target,
  const short *source, size_t len, int pe);
</pre> Fortran: <br>
<pre>INCLUDE "mpp/shmem.fh"
INTEGER len, pe
CALL SHMEM_CHARACTER_GET(target, source, len, pe)
CALL SHMEM_COMPLEX_GET(target, source, len, pe)
CALL SHMEM_DOUBLE_GET(target, source, len, pe)
CALL SHMEM_GET4(target, source, len, pe)
CALL SHMEM_GET8(target, source, len, pe)
CALL SHMEM_GET32(target, source, len, pe)
CALL SHMEM_GET64(target, source, len, pe)
CALL SHMEM_GET128(target, source, len, pe)
CALL SHMEM_GETMEM(target, source, len, pe)
CALL SHMEM_INTEGER_GET(target, source, len, pe)
CALL SHMEM_LOGICAL_GET(target, source, len, pe)
CALL SHMEM_REAL_GET(target, source, len, pe)
</pre>
<h2><a name='sect2' href='#toc2'>Description</a></h2>

<p> The shmem_get routines transfer <b>nelems</b> elements of the data
object at address <b>source</b> on the remote PE <b>pe</b>, to the data object at address
<b>target</b> on the local PE. These routines return after the data has been copied
to address <b>target</b> on the local PE. <p>
The arguments are as follows:
<dl>

<dt>target
</dt>
<dd>Local data object to be updated. </dd>

<dt>source </dt>
<dd>Data object on the PE identified
by pe that contains the data to be copied. This data object must be remotely
accessible. </dd>

<dt>len </dt>
<dd>Number of elements in the target and source arrays. len must
be of type integer. If you are using Fortran, it must be a constant, variable,
or array element of default integer type. </dd>

<dt>pe </dt>
<dd>PE number of the remote PE.
pe must be of type integer. If you are using Fortran, it must be a constant,
variable, or array element of default integer type. </dd>
</dl>
<p>
The target and source
data objects must conform to typing constraints, which are as follows:

<dl>

<dt><b>shmem_getmem</b>: Fortran: Any noncharacter type. C: Any data type. len is </dt>
<dd>scaled
in bytes. </dd>

<dt><b>shmem_get4, shmem_get32</b>: Any noncharacter type that has a storage
size </dt>
<dd>equal to 32 bits. </dd>

<dt>{shmem_get8, shmem_get64}: Any noncharacter type
that has a storage size equal to </dt>
<dd>64 bits. </dd>

<dt><b>shmem_get128</b>: Any noncharacter
type that has a storage size equal to 128 </dt>
<dd>bits. </dd>

<dt><b>shmem_short_get</b>: Elements
of type short. </dt>
<dd></dd>

<dt><b>shmem_int_get</b>: Elements of type int. </dt>
<dd></dd>

<dt><b>shmem_long_get</b>: Elements
of type long. </dt>
<dd></dd>

<dt><b>shmem_longlong_get</b>: Elements of type long long. </dt>
<dd></dd>

<dt><b>shmem_float_get</b>:
Elements of type float. </dt>
<dd></dd>

<dt><b>shmem_double_get</b>: Elements of type double. </dt>
<dd></dd>

<dt><b>shmem_longdouble_get</b>:
Elements of type long double. </dt>
<dd></dd>

<dt><b>SHMEM_CHARACTER_GET</b>: Elements of type character.
len is the number of </dt>
<dd>characters to transfer. The actual character lengths
of the source and target variables are ignored. </dd>

<dt><b>SHMEM_COMPLEX_GET</b>: Elements
of type complex of default size. </dt>
<dd></dd>

<dt><b>SHMEM_DOUBLE_GET</b>: (Fortran) Elements of
type double precision. </dt>
<dd></dd>

<dt><b>SHMEM_INTEGER_GET</b>: Elements of type integer. </dt>
<dd></dd>

<dt><b>SHMEM_LOGICAL_GET</b>:
Elements of type logical. </dt>
<dd></dd>

<dt><b>SHMEM_REAL_GET</b>: Elements of type real. </dt>
<dd></dd>
</dl>
<p>
If you are
using Fortran, data types must be of default size. For example, a real variable
must be declared as REAL, REAL*4, or REAL(KIND=4).
<h2><a name='sect3' href='#toc3'>Notes</a></h2>

<p> See <i><i>intro_shmem</i>(3)</i>
for a definition of the term remotely accessible.
<h2><a name='sect4' href='#toc4'>Examples</a></h2>

<p> Consider this
simple example for Fortran. <br>
<pre>PROGRAM REDUCTION
  REAL VALUES, SUM
  COMMON /C/ VALUES
  REAL WORK
  CALL START_PES(0) ! ALLOW ANY NUMBER OF PES
  VALUES = MY_PE() ! INITIALIZE IT TO SOMETHING
  CALL SHMEM_BARRIER_ALL
  SUM = 0.0
  DO I = 0,NUM_PES()-1
    CALL SHMEM_REAL_GET(WORK, VALUES, 1, I)
    SUM = SUM + WORK
  ENDDO
  PRINT *, &rsquo;PE &rsquo;, MY_PE(), &rsquo; COMPUTED SUM=&rsquo;, SUM
  CALL SHMEM_BARRIER_ALL
END
</pre>
<h2><a name='sect5' href='#toc5'>See Also</a></h2>

<p> <i><i>intro_shmem</i>(3)</i>, <i><i>shmem_put</i>(3)</i>, <i><i>shmem_iget</i>(3)</i>, <i><i>shmem_quiet</i>(3)</i>
<p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>Description</a></li>
<li><a name='toc3' href='#sect3'>Notes</a></li>
<li><a name='toc4' href='#sect4'>Examples</a></li>
<li><a name='toc5' href='#sect5'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
