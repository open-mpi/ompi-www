<?php
$topdir = "../../..";
$title = "MPI_Rput(3) man page (version 3.1.2)";
$meta_desc = "Open MPI v3.1.2 man page: MPI_RPUT(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
      <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b><a href="../man3/MPI_Put.3.php">MPI_Put</a></b>, <b>MPI_Rput</b> - Copies data from the origin memory to the
target.
<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
<a href="../man3/MPI_Put.3.php">MPI_Put</a>(const void *origin_addr, int origin_count, MPI_Datatype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;origin_datatype, int target_rank, MPI_Aint target_disp,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;int target_count, MPI_Datatype target_datatype, MPI_Win win)
MPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype
<tt> </tt>&nbsp;<tt> </tt>&nbsp; origin_datatype, int target_rank, MPI_Aint target_disp,
<tt> </tt>&nbsp;<tt> </tt>&nbsp; int target_count, MPI_Datatype target_datatype, MPI_Win win,
<tt> </tt>&nbsp;<tt> </tt>&nbsp; MPI_Request *request)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
<a href="../man3/MPI_Put.3.php">MPI_PUT</a>(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;&lt;type&gt; ORIGIN_ADDR(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TARGET_DATATYPE, WIN, IERROR
MPI_RPUT(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,
<tt> </tt>&nbsp;<tt> </tt>&nbsp; TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp; &lt;type&gt; ORIGIN_ADDR(*)
<tt> </tt>&nbsp;<tt> </tt>&nbsp; INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
<tt> </tt>&nbsp;<tt> </tt>&nbsp; INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT,
<tt> </tt>&nbsp;<tt> </tt>&nbsp; TARGET_DATATYPE, WIN, REQUEST, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
<a href="../man3/MPI_Put.3.php">MPI_Put</a>(origin_addr, origin_count, origin_datatype, target_rank,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;target_disp, target_count, target_datatype, win, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: origin_count, target_rank, target_count
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(IN) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
MPI_Rput(origin_addr, origin_count, origin_datatype, target_rank,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;target_disp, target_count, target_datatype, win, request,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;<tt> </tt>&nbsp;ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, INTENT(IN) :: origin_count, target_rank, target_count
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Win), INTENT(IN) :: win
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Request), INTENT(OUT) :: request
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>origin_addr </dt>
<dd>Initial address of origin buffer (choice). </dd>

<dt>origin_count
</dt>
<dd>Number of entries in origin buffer (nonnegative integer). </dd>

<dt>origin_datatype
</dt>
<dd>Data type of each entry in origin buffer (handle). </dd>

<dt>target_rank </dt>
<dd>Rank of target
(nonnegative integer). </dd>

<dt>target_disp </dt>
<dd>Displacement from start of window to
target buffer (nonnegative integer). </dd>

<dt>target_count </dt>
<dd>Number of entries in target
buffer (nonnegative integer). </dd>

<dt>target_datatype </dt>
<dd>Data type of each entry in
target buffer (handle). </dd>

<dt>win </dt>
<dd>Window object used for communication (handle).

<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>request </dt>
<dd>MPI_Rput: RMA request </dd>

<dt>IERROR </dt>
<dd>Fortran only: Error
status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<b><a href="../man3/MPI_Put.3.php">MPI_Put</a></b> transfers <i>origin_count</i> successive
entries of the type specified by <i>origin_datatype</i>, starting at address <i>origin_addr</i>
on the origin node to the target node specified by the <i>win</i>, <i>target_rank</i>
pair. The data are written in the target buffer at address <i>target_addr</i> =
<i>window_base</i> + <i>target_disp</i> x <i>disp_unit</i>, where <i>window_base</i> and <i>disp_unit</i>
are the base address and window displacement unit specified at window initialization,
by the target process. <p>
The target buffer is specified by the arguments <i>target_count</i>
and <i>target_datatype</i>. <p>
The data transfer is the same as that which would occur
if the origin process executed a send operation with arguments <i>origin_addr</i>,
<i>origin_count</i>, <i>origin_datatype</i>, <i>target_rank</i>, <i>tag</i>, <i>comm</i>, and the target process
executed a receive operation with arguments <i>target_addr</i>, <i>target_count</i>,
<i>target_datatype</i>, <i>source</i>, <i>tag</i>, <i>comm</i>, where <i>target_addr</i> is the target buffer
address computed as explained above, and <i>comm</i> is a communicator for the
group of <i>win</i>. <p>
The communication must satisfy the same constraints as for
a similar message-passing communication. The <i>target_datatype</i> may not specify
overlapping entries in the target buffer. The message sent must fit, without
truncation, in the target buffer. Furthermore, the target buffer must fit
in the target window. In addition, only processes within the same buffer
can access the target window. <p>
The <i>target_datatype</i> argument is a handle to
a datatype object defined at the origin process. However, this object is
interpreted at the target process: The outcome is as if the target datatype
object were defined at the target process, by the same sequence of calls
used to define it at the origin process. The target data type must contain
only relative displacements, not absolute addresses. The same holds for
get and accumulate. <p>
<b>MPI_Rput</b> is similar to <b><a href="../man3/MPI_Put.3.php">MPI_Put</a></b>, except that it allocates
a communication request object and associates it with the request handle
(the argument <i>request</i>). The completion of an MPI_Rput operation (i.e., after
the corresponding test or wait) indicates that the sender is now free to
update the locations in the <i>origin_addr</i> buffer. It does not indicate that
the data is available at the target window. If remote completion is required,
<b><a href="../man3/MPI_Win_flush.3.php">MPI_Win_flush</a></b>, <b><a href="../man3/MPI_Win_flush_all.3.php">MPI_Win_flush_all</a></b>, <b><a href="../man3/MPI_Win_unlock.3.php">MPI_Win_unlock</a></b>, or <b><a href="../man3/MPI_Win_unlock_all.3.php">MPI_Win_unlock_all</a></b>
can be used.
<p>
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
The <i>target_datatype</i> argument is a handle to a datatype
object that is defined at the origin process, even though it defines a
data layout in the target process memory. This does not cause problems in
a homogeneous or heterogeneous environment, as long as only portable data
types are used (portable data types are defined in Section 2.4 of the MPI-2
Standard). <p>
The performance of a put transfer can be significantly affected,
on some systems, from the choice of window location and the shape and location
of the origin and target buffer: Transfers to a target window in memory
allocated by <a href="../man3/MPI_Alloc_mem.3.php">MPI_Alloc_mem</a> may be much faster on shared memory systems;
transfers from contiguous buffers will be faster on most, if not all, systems;
the alignment of the communication buffers may also impact performance.

<p>
<h2><a name='sect9' href='#toc9'>Fortran 77 Notes</a></h2>
The MPI standard prescribes portable Fortran syntax for
the <i>TARGET_DISP</i> argument only for Fortran 90. FORTRAN 77 users may use the
non-portable syntax <p>
<br>
<pre>     INTEGER*MPI_ADDRESS_KIND TARGET_DISP
</pre><p>
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the length
of the declared integer in bytes.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. C++ functions do not return errors. If the default
error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the
C++ exception mechanism will be used to throw an MPI::Exception object.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the
predefined error handler MPI_ERRORS_RETURN may be used to cause error values
to be returned. Note that MPI does not guarantee that an MPI program can
continue past an error.
<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
<a href="../man3/MPI_Get.3.php">MPI_Get</a> <a href="../man3/MPI_Rget.3.php">MPI_Rget</a> <br>

<p><a href="../man3/MPI_Accumulate.3.php">MPI_Accumulate</a> <a href="../man3/MPI_Win_flush.3.php">MPI_Win_flush</a> <a href="../man3/MPI_Win_flush_all.3.php">MPI_Win_flush_all</a> <a href="../man3/MPI_Win_unlock.3.php">MPI_Win_unlock</a> <a href="../man3/MPI_Win_unlock_all.3.php">MPI_Win_unlock_all</a>

<p>  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>Fortran Syntax (see FORTRAN 77 NOTES)</a></li>
<li><a name='toc4' href='#sect4'>Fortran 2008 Syntax</a></li>
<li><a name='toc5' href='#sect5'>Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Fortran 77 Notes</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
<li><a name='toc11' href='#sect11'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
