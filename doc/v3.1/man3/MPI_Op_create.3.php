<?php
$topdir = "../../..";
$title = "MPI_Op_create(3) man page (version 3.1.2)";
$meta_desc = "Open MPI v3.1.2 man page: MPI_OP_CREATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
     <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<b>MPI_Op_create</b> - Creates a user-defined combination function handle.

<p>
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h2><a name='sect2' href='#toc2'>C Syntax</a></h2>
<br>
<pre>#include &lt;mpi.h&gt;
int MPI_Op_create(MPI_User_function *function, int commute,
<tt> </tt>&nbsp;<tt> </tt>&nbsp;MPI_Op *op)
</pre>
<h2><a name='sect3' href='#toc3'>Fortran Syntax</a></h2>
<br>
<pre>USE MPI
! or the older form: INCLUDE &rsquo;mpif.h&rsquo;
MPI_OP_CREATE(FUNCTION, COMMUTE, OP, IERROR)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;EXTERNAL<tt> </tt>&nbsp;<tt> </tt>&nbsp;FUNCTION
<tt> </tt>&nbsp;<tt> </tt>&nbsp;LOGICAL<tt> </tt>&nbsp;<tt> </tt>&nbsp;COMMUTE
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER<tt> </tt>&nbsp;<tt> </tt>&nbsp;OP, IERROR
</pre>
<h2><a name='sect4' href='#toc4'>Fortran 2008 Syntax</a></h2>
<br>
<pre>USE mpi_f08
MPI_Op_create(user_fn, commute, op, ierror)
<tt> </tt>&nbsp;<tt> </tt>&nbsp;PROCEDURE(MPI_User_function) :: user_fn
<tt> </tt>&nbsp;<tt> </tt>&nbsp;LOGICAL, INTENT(IN) :: commute
<tt> </tt>&nbsp;<tt> </tt>&nbsp;TYPE(MPI_Op), INTENT(OUT) :: op
<tt> </tt>&nbsp;<tt> </tt>&nbsp;INTEGER, OPTIONAL, INTENT(OUT) :: ierror
</pre>
<h2><a name='sect5' href='#toc5'>Input Parameters</a></h2>

<dl>

<dt>function </dt>
<dd>User-defined function (function). </dd>

<dt>commute </dt>
<dd>True if
commutative; false otherwise.
<p> </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>op </dt>
<dd>Operation (handle). </dd>

<dt>IERROR
</dt>
<dd>Fortran only: Error status (integer).
<p> </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
MPI_Op_create binds a
user-defined global operation to an op handle that can subsequently be used
in <a href="../man3/MPI_Reduce.3.php">MPI_Reduce</a>, <a href="../man3/MPI_Allreduce.3.php">MPI_Allreduce</a>, <a href="../man3/MPI_Reduce_scatter.3.php">MPI_Reduce_scatter</a>, and  <a href="../man3/MPI_Scan.3.php">MPI_Scan</a>. The user-defined
operation is assumed to be associative. If commute = true, then the operation
should be both commutative and associative. If commute = false, then the
order of operands is fixed and is defined to be in ascending, process rank
order, beginning with process zero. The order of evaluation can be changed,
taking advantage of the associativity of the operation. If commute = true
then the order of evaluation can be changed, taking advantage of commutativity
and associativity. <p>
<i>function</i> is the user-defined function, which must have
the following four arguments: invec, inoutvec, len, and datatype.
<p> <p>
The ANSI-C
prototype for the function is the following: <p>
<br>
<pre>  typedef void MPI_User_function(void *invec, void *inoutvec,
                                 int *len,
                                 MPI_Datatype *datatype);
</pre><p>
The Fortran declaration of the user-defined function appears below. <p>
<br>
<pre>  FUNCTION USER_FUNCTION( INVEC(*), INOUTVEC(*), LEN, TYPE)
  &lt;type&gt; INVEC(LEN), INOUTVEC(LEN)
   INTEGER LEN, TYPE
</pre><p>
The datatype argument is a handle to the data type that was passed into
the call to <a href="../man3/MPI_Reduce.3.php">MPI_Reduce</a>. The user reduce function should be written such
that the following holds: Let u[0],&nbsp;...,&nbsp;u[len-1] be the len elements in the
communication buffer described by the arguments invec, len, and datatype
when the function is invoked; let v[0],&nbsp;...,&nbsp;v[len-1] be len elements in the
communication buffer described by the arguments inoutvec, len, and datatype
when the function is invoked; let w[0],&nbsp;...,&nbsp;w[len-1] be len elements in the
communication buffer described by the arguments inoutvec, len, and datatype
when the function returns; then w[i] = u[i] o v[i], for i=0&nbsp;,...,&nbsp;len-1, where
o is the reduce operation that the function computes. <p>
Informally, we can
think of invec and inoutvec as arrays of len elements that function is
combining. The result of the reduction over-writes values in inoutvec, hence
the name. Each invocation of the function results in the pointwise evaluation
of the reduce operator on len elements: i.e, the function returns in inoutvec[i]
the value invec[i] o inoutvec[i], for i = 0,...,&nbsp;count-1, where o is the combining
operation computed by the function. <p>
By internally comparing the value of
the datatype argument to known, global handles, it is possible to overload
the use of a single user-defined function for several different data types.
<p>
General datatypes may be passed to the user function. However, use of datatypes
that are not contiguous is likely to lead to inefficiencies. <p>
No MPI communication
function may be called inside the user function. <a href="../man3/MPI_Abort.3.php">MPI_Abort</a> may be called
inside the function in case of an error.
<p>
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
Suppose one defines a library
of user-defined reduce functions that are overloaded: The datatype argument
is used to select the right execution path at each invocation, according
to the types of the operands. The user-defined reduce function cannot "decode"
the datatype argument that it is passed, and cannot identify, by itself,
the correspondence between the datatype handles and the datatype they represent.
This correspondence was established when the datatypes were created. Before
the library is used, a library initialization preamble must be executed.
This preamble code will define the datatypes that are used by the library
and store handles to these datatypes in global, static variables that are
shared by the user code and the library code.
<p> <b>Example:</b> Example of user-defined
reduce: <p>
Compute the product of an array of complex numbers, in C. <p>
<br>
<pre>    typedef struct {
        double real,imag;
    } Complex;
    /* the user-defined function
     */
    void myProd( Complex *in, Complex *inout, int *len,
                 MPI_Datatype *dptr )
    {
        int i;
        Complex c;
    for (i=0; i&lt; *len; ++i) {
            c.real = inout-&gt;real*in-&gt;real -
                       inout-&gt;imag*in-&gt;imag;
            c.imag = inout-&gt;real*in-&gt;imag +
                       inout-&gt;imag*in-&gt;real;
            *inout = c;
            in++; inout++;
        }
    }
    /* and, to call it...
     */
    ...
    /* each process has an array of 100 Complexes
         */
        Complex a[100], answer[100];
        MPI_Op myOp;
        MPI_Datatype ctype;
    /* explain to MPI how type Complex is defined
         */
       <a href="../man3/MPI_Type_contiguous.3.php">MPI_Type_contiguous</a>( 2, MPI_DOUBLE, &amp;ctype );
        <a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>( &amp;ctype );
        /* create the complex-product user-op
         */
        MPI_Op_create( myProd, True, &amp;myOp );
        <a href="../man3/MPI_Reduce.3.php">MPI_Reduce</a>( a, answer, 100, ctype, myOp, root, comm );
        /* At this point, the answer, which consists of 100 Complexes,
         * resides on process root
         */
</pre><p>
The Fortran version of <a href="../man3/MPI_Reduce.3.php">MPI_Reduce</a> will invoke a user-defined reduce function
using the Fortran calling conventions and will pass a Fortran-type datatype
argument; the C version will use C calling convention and the C representation
of a datatype handle. Users who plan to mix languages should define their
reduction functions accordingly.
<p>
<h2><a name='sect9' href='#toc9'>Notes on Collective Operations</a></h2>

<p> The reduction
functions ( <i>MPI_Op</i> ) do not return an error value.  As a result, if the
functions detect an error, all they can do is either call <i><a href="../man3/MPI_Abort.3.php">MPI_Abort</a></i> or
silently skip the problem.  Thus, if you change the error handler from <i>MPI_ERRORS_ARE_FATAL</i>
to something else, for example, <i>MPI_ERRORS_RETURN</i> , then no error may be
indicated.
<p> The reason for this is the performance problems in ensuring
that all collective routines return the same error value.
<p>
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
Almost
all MPI routines return an error value; C routines as the value of the
function and Fortran routines in the last argument. C++ functions do not
return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS,
then on error the C++ exception mechanism will be used to throw an MPI::Exception
object. <p>
Before the error value is returned, the current MPI error handler
is called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>;
the predefined error handler MPI_ERRORS_RETURN may be used to cause error
values to be returned. Note that MPI does not guarantee that an MPI program
can continue past an error.
<p>
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
<br>
<pre><a href="../man3/MPI_Reduce.3.php">MPI_Reduce</a>
<a href="../man3/MPI_Reduce_scatter.3.php">MPI_Reduce_scatter</a>
<a href="../man3/MPI_Allreduce.3.php">MPI_Allreduce</a>
<a href="../man3/MPI_Scan.3.php">MPI_Scan</a>
<a href="../man3/MPI_Op_free.3.php">MPI_Op_free</a>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
