<?php
$topdir = "../../..";
$title = "prun(1) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: prun(1)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
prun - Execute serial and parallel jobs with the PMIx Reference Runtime
(PRTE).
<h2><a name='sect1' href='#toc1'>Synopsis</a></h2>
<p>
C]prunR] requires a running C]prteR] Distributed Virtual
Machine (DVM) to be running at the time of the call. See <i>prte(1)</i> for more
information. <p>
Single Process Multiple Data (SPMD) Model: <br>
<pre>

</pre><p>

<dl>

<dt>C]prun [ options ] &lt;program&gt; [ &lt;args&gt; ]R]Multiple Instruction Multiple Data
(MIMD) Model: </dt>
<dd><br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]prun [ global_options ] [rs]     [ local_options1 ] &lt;program1&gt; [ &lt;args1&gt;
] : [rs]     [ local_options2 ] &lt;program2&gt; [ &lt;args2&gt; ] : [rs]     ... : [rs]
   [ local_optionsN ] &lt;programN&gt; [ &lt;argsN&gt; ]R]Note that in both models, invoking
C]prunR] via an absolute path </dt>
<dd>name is equivalent to specifying the C]--prefixR]
option with a C]&lt;dir&gt;R] value equivalent to the directory where C]prunR]
resides, minus its last subdirectory. For example: <br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]$ /usr/local/bin/prun ...R]is equivalent to </dt>
<dd><br>
<pre>

</pre></dd>
</dl>

<h2><a name='sect2' href='#toc2'>C]$ prun --prefix /usr/localR]Quick Summary</a></h2>
<p>
If you are simply looking for
how to run an application,
<dl>

<dt>you probably </dt>
<dd>want to use a command line of the
following form: <br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]$ prun [ -np X ] [ --hostfile &lt;filename&gt; ] &lt;program&gt;R]This will run C]XR] copies
of C]&lt;program&gt;R] in your current </dt>
<dd>run-time environment over the set of hosts
specified by C]&lt;filename&gt;R], scheduling (by default) in a round-robin fashion
by CPU slot. If running under a supported resource manager a hostfile is
usually not required unless the caller wishes to further restrict the set
of resources used for that job. </dd>
</dl>
<p>
Please note that PRTE automatically binds
processes. See <i>prte-map(1)</i> for defaults for the mapping, ranking, and binding
of processes. <p>
If your application uses threads, then you probably want to
ensure that you are either not bound at all (by specifying C]--bind-to noneR]),
or bound to multiple cores using an appropriate binding level or specific
number of processing elements per application process. <p>
Default ranking is
by C]slotR] if number of processes &lt;= 2, otherwise default to ranking by
C]packageR] (formally known as [lq]socket[rq]). <p>
See <i>prte-map(1)</i> for more
details on mapping, ranking, and binding options.
<h2><a name='sect3' href='#toc3'>Options</a></h2>
<p>
This section includes
many commonly used options. There may be other options listed with C]prun
--helpR]. <p>
C]prunR] will send the name of the directory where it was invoked
on the local node to each of the remote nodes, and attempt to change to
that directory. See the [lq]Current Working Directory[rq] section below
for further details.
<dl>

<dt>B]CB]&lt;program&gt;B]R] </dt>
<dd>The program executable. This is identified
as the first non-recognized argument to C]prunR]. </dd>

<dt>B]CB]&lt;args&gt;B]R] </dt>
<dd>Pass these
run-time arguments to every new process. These must always be the last arguments
to C]prunR] after the C]&lt;program&gt;R]. If an app context file is used, C]&lt;args&gt;R]
will be ignored. </dd>

<dt>B]CB]-h, --helpB]R] </dt>
<dd>Display help for this command </dd>

<dt>B]CB]-q,
--quietB]R] </dt>
<dd>Suppress informative messages from C]prunR] during application
execution. </dd>

<dt>B]CB]-v, --verboseB]R] </dt>
<dd>Be verbose </dd>

<dt>B]CB]-V, --versionB]R] </dt>
<dd>Print version
number. If no other arguments are given, this will also cause C]prunR] to
exit. </dd>
</dl>

<h3><a name='sect4' href='#toc4'>Specifying Number of Processes</a></h3>
<p>
The following options specify the number
of processes to launch. Note that none of the options imply a particular
binding policy - e.g., requesting N processes for each socket does not imply
that the processes will be bound to the package. <p>
Additional options and
details are presented in <i>prte-map(1)</i>. Below are a few of the commonly used
options.
<dl>

<dt>B]CB]-c, -n, --n, --np &lt;#&gt;B]R] </dt>
<dd>Run this many copies of the program on the
given nodes. This option indicates that the specified file is an executable
program and not an application context. If no value is provided for the
number of copies to execute (i.e., neither the C]--npR] nor its synonyms are
provided on the command line), C]prunR] will automatically execute a copy
of the program on each process slot (see below for description of a [lq]process
slot[rq]). This feature, however, can only be used in the SPMD model and
will return an error (without beginning execution of the application) otherwise.
</dd>
</dl>

<h3><a name='sect5' href='#toc5'>I/O Management</a></h3>
<p>
To manage standard I/O:
<dl>

<dt>B]CB]--output-filename &lt;filename&gt;B]R]
</dt>
<dd>Redirect the C]stdoutR], C]stderrR], and C]stddiagR] of all processes to
a process-unique version of the specified filename ([lq]filename.id[rq]).
Any directories in the filename will automatically be created. Each output
file will consist of [lq]filename.id[rq], where the C]idR] will be the processes[cq]
rank, left-filled with zero[cq]s for correct ordering in listings. Both C]stdoutR]
and C]stderrR] will be redirected to the file. A relative path value will
be converted to an absolute path based on the current working directory
where C]prunR] is executed. Note that this I]will notR] work in environments
where the file system on compute nodes differs from that where C]prunR]
is executed. This option accepts one case-insensitive directive, specified
after a colon (C]:R]): C]NOCOPYR] indicates that the output is not to be
echoed to the terminal. </dd>

<dt>B]CB]--output-directory &lt;path&gt;B]R] </dt>
<dd>Redirect the C]stdoutR],
C]stderrR], and C]stddiagR] of all processes to a process-unique location
consisting of [lq]//rank.id/std[out,err,diag][rq], where the C]idR] will
be the processes[cq] rank, left-filled with zero[cq]s for correct ordering
in listings. Any directories in the filename will automatically be created.
A relative path value will be converted to an absolute path based on the
current working directory where C]prunR] is executed. Note that this I]will
notR] work on environments where the file system on compute nodes differs
from that where C]prunR] is executed. This option also supports two case-insensitive
directives, specified in comma-delimited form after a colon (C]:R]): C]NOJOBIDR]
(omits the jobid directory layer) and C]NOCOPYR] (do not copy the output
to the terminal). </dd>

<dt>B]CB]--stdin &lt;rank&gt;B]R] </dt>
<dd>The rank of the process that is to
receive C]stdinR]. The default is to forward C]stdinR] to rank 0, but this
option can be used to forward C]stdinR] to any process. It is also acceptable
to specify C]noneR], indicating that no processes are to receive C]stdinR].
</dd>

<dt>B]CB]--merge-stderr-to-stdoutB]R] </dt>
<dd>Merge C]stderrR] to C]stdoutR] for each process.
</dd>

<dt>B]CB]--map-by :TAGOUTPUTB]R] </dt>
<dd>Tag each line of output to C]stdoutR], C]stderrR],
and C]stddiagR] with C][jobid, MCW_rank]&lt;stdxxx&gt;R] indicating the jobid and
rank of the process that generated the output, and the channel which generated
it. </dd>

<dt>B]CB]--map-by :TIMESTAMPOUTPUTB]R] </dt>
<dd>Timestamp each line of output to C]stdoutR],
C]stderrR], and C]stddiagR]. </dd>

<dt>B]CB]--map-by :XMLOUTPUTB]R] </dt>
<dd>Provide all output
to C]stdoutR], C]stderrR], and C]stddiagR] in an xml format. </dd>

<dt>B]CB]--xterm
&lt;ranks&gt;B]R] </dt>
<dd>Display the output from the processes identified by their ranks
in separate C]xtermR] windows. The ranks are specified as a comma-separated
list of ranges, with a C]-1R] indicating all. A separate window will be created
for each specified process. B]Note:R] C]xtermR] will normally terminate
the window upon termination of the process running within it. However, by
adding a [lq]![rq] to the end of the list of specified ranks, the proper
options will be provided to ensure that C]xtermR] keeps the window open
I]afterR] the process terminates, thus allowing you to see the process[cq]
output. Each C]xtermR] window will subsequently need to be manually closed.
B]Note:R] In some environments, C]xtermR] may require that the executable
be in the user[cq]s path, or be specified in absolute or relative terms.
Thus, it may be necessary to specify a local executable as [lq]./foo[rq]
instead of just [lq]foo[rq]. If C]xtermR] fails to find the executable,
C]prunR] will hang, but still respond correctly to a ctrl-c.&nbsp;If this happens,
please check that the executable is being specified correctly and try again.
</dd>
</dl>

<h3><a name='sect6' href='#toc6'>File and Environment Management</a></h3>
<p>
To manage files and runtime environment:

<dl>

<dt>B]CB]--path &lt;path&gt;B]R] </dt>
<dd>C]&lt;path&gt;R] that will be used when attempting to locate
the requested executables. This is used prior to using the local C]PATHR]
setting. </dd>

<dt>B]CB]--prefix &lt;dir&gt;B]R] </dt>
<dd>Prefix directory that will be used to set the
C]PATHR] and C]LD_LIBRARY_PATHR] on the remote node before invoking the
target process. See the [lq]Remote Execution[rq] section, below. </dd>

<dt>B]CB]--noprefixB]R]
</dt>
<dd>Disable the automatic C]--prefixR] behavior </dd>

<dt>B]CB]-s | --preload-binaryB]R] </dt>
<dd>Copy
the specified executable(s) to remote machines prior to starting remote
processes. The executables will be copied to the session directory and will
be deleted upon completion of the job. </dd>

<dt>B]CB]--preload-files &lt;files&gt;B]R] </dt>
<dd>Preload
the comma separated list of files to the current working directory of the
remote machines where processes will be launched prior to starting those
processes. </dd>

<dt>B]CB]--set-cwd-to-session-dirB]R] </dt>
<dd>Set the working directory of the
started processes to their session directory. </dd>

<dt>B]CB]--wdir &lt;dir&gt;B]R] </dt>
<dd>Change to
the directory C]&lt;dir&gt;R] before the user[cq]s program executes. See the [lq]Current
Working Directory[rq] section for notes on relative paths. B]Note:R] If
the C]--wdirR] option appears both on the command line and in an application
context, the context will take precedence over the command line. Thus, if
the path to the desired working directory is different on the backend nodes,
then it must be specified as an absolute path that is correct for the backend
node. </dd>

<dt>B]CB]--wd &lt;dir&gt;B]R] </dt>
<dd>Synonym for C]--wdirR]. </dd>

<dt>B]CB]-x &lt;env&gt;B]R] </dt>
<dd>Export the specified
environment variables to the remote nodes before executing the program.
Only one environment variable can be specified per C]-xR] option. Existing
environment variables can be specified or new variable names specified
with corresponding values. If multiple C]-xR] options with the same variable
name (regardless of value) are provided then the last one listed on the
command line will take precedence, and the others will be ignored. The exception
to this is for PRTE_MCA_ prefixed environment variables which will report
an error in that scenario if any of the values differ. For example: C]$
prun -x DISPLAY -x OFILE=/tmp/out ...R] </dd>
</dl>
<p>
The parser for the C]-xR] option is not
very sophisticated; it does not even understand quoted values. Users are
advised to set variables in the environment, and then use C]-xR] to export
(not define) them.
<h3><a name='sect7' href='#toc7'>MCA Parameters</a></h3>
<p>
Setting MCA parameters take a few different
forms depending the target project for the parameter. For example, MCA parameters
targeting OpenPMIx will contain the string C]pmixR] in their name, and
MCA parameters targeting PRTE will contain the string C]prteR] in their
name. See the [lq]MCA[rq] section, below, for finer details on the MCA.
<dl>

<dt>B]CB]--gpmixmca
&lt;key&gt; &lt;value&gt;B]R] </dt>
<dd>Pass global PMIx MCA parameters that are applicable to all
application contexts. C]&lt;key&gt;R] is the parameter name; C]&lt;value&gt;R] is the parameter
value. </dd>

<dt>B]CB]--mca &lt;key&gt; &lt;value&gt;B]R] </dt>
<dd>Send arguments to various MCA modules. See
the [lq]MCA[rq] section, below. </dd>

<dt>B]CB]--pmixmca &lt;key&gt; &lt;value&gt;B]R] </dt>
<dd>Send arguments
to various PMIx MCA modules. See the [lq]MCA[rq] section, below. </dd>

<dt>B]CB]--prtemca
&lt;key&gt; &lt;value&gt;B]R] </dt>
<dd>Send arguments to various PRTE MCA modules. See the [lq]MCA[rq]
section, below. </dd>

<dt>B]CB]--pmixam &lt;arg0&gt;B]R] </dt>
<dd>Aggregate PMIx MCA parameter set file
list. The C]arg0R] argument is a comma-separated list of tuning files. Each
file containing MCA parameter sets for this application context. </dd>
</dl>

<h3><a name='sect8' href='#toc8'>Debugging
Options</a></h3>

<dl>

<dt>B]CB]--get-stack-tracesB]R] </dt>
<dd>When paired with the C]--timeoutR] option,
C]prunR] will obtain and print out stack traces from all launched processes
that are still alive when the timeout expires. Note that obtaining stack
traces can take a little time and produce a lot of output, especially for
large process-count jobs. </dd>

<dt>B]CB]--timeout &lt;seconds&gt;B]R] </dt>
<dd>The maximum number of
seconds that C]prunR] will run. After this many seconds, C]prunR] will abort
the launched job and exit with a non-zero exit status. Using C]--timeoutR]
can be also useful when combined with the C]--get-stack-tracesR] option. </dd>
</dl>

<h3><a name='sect9' href='#toc9'>Other
Options</a></h3>
<p>
There are also other options:
<dl>

<dt>B]CB]--allow-run-as-rootB]R] </dt>
<dd>Allow C]prunR]
to run when executed by the root user (C]prunR] defaults to aborting when
launched as the root user). </dd>

<dt>B]CB]--app &lt;appfile&gt;B]R] </dt>
<dd>Provide an C]appfileR],
ignoring all other command line options. </dd>

<dt>B]CB]--continuousB]R] </dt>
<dd>Job is to run
until explicitly terminated. </dd>

<dt>B]CB]--dvm-uriB]R] </dt>
<dd>Specify the URI of the DVM
master, or the name of the file (specified as file:filename) that contains
that info. </dd>

<dt>B]CB]--enable-recoveryB]R] </dt>
<dd>Enable recovery from process failure
[Default = disabled]. </dd>

<dt>B]CB]--disable-recoveryB]R] </dt>
<dd>Disable recovery (resets
all recovery options to off). </dd>

<dt>B]CB]--map-by :DONOTLAUNCHB]R] </dt>
<dd>Perform all necessary
operations to prepare to launch the application, but do not actually launch
it. </dd>

<dt>B]CB]--index-argv-by-rankB]R] </dt>
<dd>Uniquely index C]argv[0]R] for each process
using its rank. </dd>

<dt>B]CB]--max-restarts &lt;num&gt;B]R] </dt>
<dd>Max number of times to restart
a failed process. </dd>

<dt>B]CB]--pidB]R] </dt>
<dd>PID of the daemon to which we should connect.
</dd>

<dt>B]CB]--report-child-jobs-separatelyB]R] </dt>
<dd>Return the exit status of the primary
job only. </dd>

<dt>B]CB]--show-progressB]R] </dt>
<dd>Output a brief periodic report on launch
progress. </dd>

<dt>B]CB]--terminateB]R] </dt>
<dd>Terminate the DVM. </dd>
</dl>
<p>
The following options are
useful for developers; they are not generally useful to most users:
<dl>

<dt>B]CB]--map-by
:DISPLAYALLOCB]R] </dt>
<dd>Display a detailed list of the allocation being used
by this job. </dd>

<dt>B]CB]--map-by :DISPLAYDEVELB]R] </dt>
<dd>Display a more detailed table
showing the mapped location of each process prior to launch. </dd>

<dt>B]CB]--map-by
:DISPLAYTOPOB]R] </dt>
<dd>Display the topology as part of the process map just before
launch. </dd>

<dt>B]CB]--report-state-on-timeoutB]R] </dt>
<dd>When paired with the C]--timeoutR] command
line option, report the run-time subsystem state of each process when the
timeout expires. </dd>
</dl>

<h2><a name='sect10' href='#toc10'>Description</a></h2>
<p>
One invocation of C]prunR] starts an application
running under the PRTE DVM. If the application is single process multiple
data (SPMD), the application can be specified on the C]prunR] command line.
<p>
If the application is multiple instruction multiple data (MIMD), comprising
of multiple programs, the set of programs and argument can be specified
in one of two ways: Extended Command Line Arguments, and Application Context.
<p>
An application context describes the MIMD program set including all arguments
in a separate file. This file essentially contains multiple C]prunR] command
lines, less the command name itself. The ability to specify different options
for different instantiations of a program is another reason to use an application
context. <p>
Extended command line arguments allow for the description of the
application layout on the command line using colons (C]:R]) to separate
the specification of programs and arguments. Some options are globally set
across all specified programs (e.g.&nbsp;C]--hostfileR]), while others are specific
to a single program (e.g.&nbsp;C]--npR]).
<h3><a name='sect11' href='#toc11'>Specifying Host Nodes</a></h3>
<p>
Host nodes can be identified
on the C]prunR] command line with the C]--hostR] option or in a hostfile.
See <i>prte-map(1)</i> for more details.
<h3><a name='sect12' href='#toc12'>Application Context or Executable Program?</a></h3>
<p>
To
distinguish the two different forms, C]prunR] looks on the command line
for C]--appR] option. If it is specified, then the file named on the command
line is assumed to be an application context. If it is not specified, then
the file is assumed to be an executable program.
<h3><a name='sect13' href='#toc13'>Locating Files</a></h3>
<p>
If no relative
or absolute path is specified for a file, C]prunR] will first look for
files by searching the directories specified by the C]--pathR] option. If
there is no C]--pathR] option set or if the file is not found at the C]--pathR]
location, then C]prunR] will search the user[cq]s PATH environment variable
as defined on the source node(s). <p>
If a relative directory is specified,
it must be relative to the initial working directory determined by the
specific starter used. For example when using the rsh or ssh starters, the
initial directory is C]$HOMER] by default. Other starters may set the initial
directory to the current working directory from the invocation of C]prunR].

<h3><a name='sect14' href='#toc14'>Current Working Directory</a></h3>
<p>
The C]--wdirR] prun option (and its synonym, C]--wdR])
allows the user to change to an arbitrary directory before the program
is invoked. It can also be used in application context files to specify
working directories on specific nodes and/or for specific applications.
<p>
If the C]--wdirR] option appears both in a context file and on the command
line, the context file directory will override the command line value. <p>
If
the C]--wdirR] option is specified, C]prunR] will attempt to change to the
specified directory on all of the remote nodes. If this fails, C]prunR]
will abort. <p>
If the C]--wdirR] option is B]notR] specified, C]prunR] will send
the directory name where C]prunR] was invoked to each of the remote nodes.
The remote nodes will try to change to that directory. If they are unable
(e.g., if the directory does not exist on that node), then C]prunR] will
use the default directory determined by the starter. <p>
All directory changing
occurs before the user[cq]s program is invoked.
<h3><a name='sect15' href='#toc15'>Standard I/O</a></h3>
<p>
The PRTE DVM
directs UNIX standard input to C]/dev/nullR] on all processes except the
rank 0 process. The rank 0 process inherits standard input from C]prunR].
B]Note:R] The node that invoked C]prunR] need not be the same as the node
where the rank 0 process resides. PRTE DVM handles the redirection of C]prunR][cq]s
standard input to the rank 0 process. <p>
The PRTE DVM directs UNIX standard
output and error from remote nodes to the node that invoked C]prunR] and
prints it on the standard output/error of C]prunR]. Local processes inherit
the standard output/error of C]prunR] and transfer to it directly. <p>
Thus
it is possible to redirect standard I/O for applications by using the typical
shell redirection procedure on C]prunR]. <br>
<pre>

</pre><p>

<dl>

<dt>C]$ prun --np 2 my_app &lt; my_input &gt; my_outputR]Note that in this example I]onlyR]
the rank 0 process will receive </dt>
<dd>the stream from C]my_inputR] on stdin. The
stdin on all the other nodes will be tied to C]/dev/nullR]. However, the
stdout from all nodes will be collected into the C]my_outputR] file. </dd>
</dl>

<h3><a name='sect16' href='#toc16'>Signal
Propagation</a></h3>
<p>
When C]prunR] receives a C]SIGTERMR] and C]SIGINTR], it will
attempt to kill the entire job by sending all processes in the job a C]SIGTERMR],
waiting a small number of seconds, then sending all processes in the job
a C]SIGKILLR]. <p>
C]SIGUSR1R] and C]SIGUSR2R] signals received by C]prunR]
are propagated to all processes in the job. <p>
A C]SIGTSTOPR] signal to C]prunR]
will cause a C]SIGSTOPR] signal to be sent to all of the programs started
by C]prunR] and likewise a C]SIGCONTR] signal to C]prunR] will cause a
C]SIGCONTR] sent. <p>
Other signals are not currently propagated by C]prunR].

<h3><a name='sect17' href='#toc17'>Process Termination / Signal Handling</a></h3>
<p>
During the run of an application,
if any process dies abnormally (either exiting before invoking C]PMIx_FinalizeR],
or dying as the result of a signal), C]prunR] will print out an error message
and kill the rest of the application.
<h3><a name='sect18' href='#toc18'>Process Environment</a></h3>
<p>
Processes in the
application inherit their environment from the PRTE DVM daemon upon the
node on which they are running. The environment is typically inherited from
the user[cq]s shell. On remote nodes, the exact environment is determined
by the boot MCA module used. The C]rshR] launch module, for example, uses
either C]rshR]/C]sshR] to launch the PRTE DVM daemon on remote nodes, and
typically executes one or more of the user[cq]s shell-setup files before
launching the daemon. When running dynamically linked applications which
require the C]LD_LIBRARY_PATHR] environment variable to be set, care must
be taken to ensure that it is correctly set when booting PRTE DVM. <p>
See the
[lq]Remote Execution[rq] section for more details.
<h3><a name='sect19' href='#toc19'>Remote Execution</a></h3>
<p>
The PRTE
DVM requires that the C]PATHR] environment variable be set to find executables
on remote nodes. This is typically only necessary in C]rshR]- or C]sshR]-based
environments. Batch and scheduled environments typically copy the current
environment to the execution of remote jobs, so if the current environment
has C]PATHR] and/or C]LD_LIBRARY_PATHR] set properly, the remote nodes
will also have it set properly. If the PRTE DVM was compiled with shared
library support, it may also be necessary to have the C]LD_LIBRARY_PATHR]
environment variable set on remote nodes as well (especially to find the
shared libraries required to run user applications). <p>
However, it is not
always desirable or possible to edit shell startup files to set C]PATHR]
and/or C]LD_LIBRARY_PATHR]. The C]--prefixR] option is provided for some simple
configurations where this is not possible. <p>
The C]--prefixR] option takes a
single argument: the base directory on the remote node where PRTE DVM is
installed. The PRTE DVM will use this directory to set the remote C]PATHR]
and C]LD_LIBRARY_PATHR] before executing any user applications. This allows
running jobs without having pre-configured the C]PATHR] and C]LD_LIBRARY_PATHR]
on the remote nodes. <p>
The PRTE DVM adds the basename of the current node[cq]s
[lq]bindir[rq] (the directory where the PRTE DVM[cq]s executables are installed)
to the prefix and uses that to set the C]PATHR] on the remote node. Similarly,
PRTE DVM adds the basename of the current node[cq]s [lq]libdir[rq] (the
directory where the PRTE DVM[cq]s libraries are installed) to the prefix
and uses that to set the C]LD_LIBRARY_PATHR] on the remote node. For example:

<dl>

<dt>Local bindir: </dt>
<dd>/local/node/directory/bin </dd>

<dt>Local libdir: </dt>
<dd>/local/node/directory/lib64
</dd>
</dl>
<p>
If the following command line is used: <br>
<pre>

</pre><p>

<dl>

<dt>C]$ prun --prefix /remote/node/directoryR]The PRTE DVM will add [lq]/remote/node/directory/bin[rq]
to the </dt>
<dd>C]PATHR] and [lq]/remote/node/directory/lib64[rq] to the C]LD_LIBRARY_PATHR]
on the remote node before attempting to execute anything. </dd>
</dl>
<p>
The C]--prefixR]
option is not sufficient if the installation paths on the remote node are
different than the local node (e.g., if [lq]/lib[rq] is used on the local
node, but [lq]/lib64[rq] is used on the remote node), or if the installation
paths are something other than a subdirectory under a common prefix. <p>
Note
that executing C]prunR] via an absolute pathname is equivalent to specifying
C]--prefixR] without the last subdirectory in the absolute pathname to C]prunR].
<p>
For example: <br>
<pre>

</pre><p>

<dl>

<dt>C]$ /usr/local/bin/prun ...R]is equivalent to </dt>
<dd><br>
<pre>

</pre></dd>
</dl>

<h3><a name='sect20' href='#toc20'>C]$ prun --prefix /usr/local ...R]Exported Environment Variables</a></h3>
<p>

<dl>

<dt>All environment
variables that are named in the form </dt>
<dd>C]PMIX_[rs]*R] will automatically
be exported to new processes on the local and remote nodes. Environmental
parameters can also be set/forwarded to the new processes using the MCA
parameter C]mca_base_env_listR]. While the syntax of the C]-xR] option and
MCA param allows the definition of new variables, note that the parser
for these options are currently not very sophisticated - it does not even
understand quoted values. Users are advised to set variables in the environment
and use the option to export them; not to define them. </dd>
</dl>

<h3><a name='sect21' href='#toc21'>Setting MCA Parameters</a></h3>
<p>
The
C]--mcaR] / C]--pmixmcaR] / C]--prtemcaR] switches (referenced here as [lq]C]--mcaR]
switches[rq] for brevity) allow the passing of parameters to various MCA
(Modular Component Architecture) modules. MCA modules have direct impact
on programs because they allow tunable parameters to be set at run time.
<p>
The C]-mcaR] switch takes two arguments: C]&lt;key&gt;R] and C]&lt;value&gt;R]. The C]&lt;key&gt;R]
argument generally specifies which MCA module will receive the value. For
example, the C]&lt;key&gt;R] [lq]rmaps[rq] is used to select which RMAPS to be
used for mapping processes to nodes. The C]&lt;value&gt;R] argument is the value
that is passed. For example:
<dl>

<dt>B]CB]prun -prtemca rmaps seq -np 1 fooB]R] </dt>
<dd>Tells
PRTE to use the [lq]seq[rq] RMAPS component, and to run a single copy of
[lq]a.out[rq] on an allocated node. </dd>
</dl>
<p>
The C]-mcaR] switch can be used multiple
times to specify different C]&lt;key&gt;R] and/or C]&lt;value&gt;R] arguments. If the same
C]&lt;key&gt;R] is specified more than once, the C]&lt;value&gt;R]s are concatenated with
a comma ([lq],[rq]) separating them. <p>
Note that the C]-mcaR] switch is simply
a shortcut for setting environment variables. The same effect may be accomplished
by setting corresponding environment variables before running C]prunR].
The form of the environment variables depends on the type of the C]--mcaR]
switch.
<dl>

<dt>B]CB]--mcaB]R] </dt>
<dd>C]PRTE_MCA_&lt;key&gt;=&lt;value&gt;R] </dd>

<dt>B]CB]--pmixmcaB]R] </dt>
<dd>C]PMIX_MCA_&lt;key&gt;=&lt;value&gt;R]
</dd>

<dt>B]CB]--prtemcaB]R] </dt>
<dd>[ga]PRTE_MCA_=[ga][ga] </dd>
</dl>
<p>
Thus, the C]-mcaR] switch overrides
any previously set environment variables. The C]-mcaR] settings similarly
override MCA parameters set in the C]$PRTE_PREFIX/etc/prte-mca-params.confR]
or C]$HOME/.prte/mca-params.confR] file. <p>
Unknown C]&lt;key&gt;R] arguments are still
set as environment variable [en] they are not checked (by C]prunR]) for
correctness. Illegal or incorrect C]&lt;value&gt;R] arguments may or may not be
reported [en] it depends on the specific MCA module. <p>
To find the available
component types under the MCA architecture, or to find the available parameters
for a specific component, use the C]pinfoR] command. See the I]<i>pinfo(1)</i>R]
man page for detailed information on the command.
<h3><a name='sect22' href='#toc22'>Running as root</a></h3>
<p>
The PRTE
team strongly advises against executing C]prunR] as the root user. Applications
should be run as regular (non-root) users. <p>
Reflecting this advice, C]prunR]
will refuse to run as root by default. To override this default, you can
add the C]--allow-run-as-rootR] option to the C]prunR] command line.
<h2><a name='sect23' href='#toc23'>Return Value</a></h2>
<p>
There
is no standard definition for what C]prunR] should return as an exit status.
After considerable discussion, we settled on the following method for assigning
the C]prunR] exit status (note: in the following description, the [lq]primary[rq]
job is the initial application started by C]prunR] - all jobs that are spawned
by that job are designated [lq]secondary[rq] jobs):
<dl>

<dt>[bu]</dt>
<dd>if all processes
in the primary job normally terminate with exit status 0, we return 0 </dd>

<dt>[bu]</dt>
<dd>if
one or more processes in the primary job normally terminate with non-zero
exit status, we return the exit status of the process with the lowest rank
to have a non-zero status </dd>

<dt>[bu]</dt>
<dd>if all processes in the primary job normally
terminate with exit status 0, and one or more processes in a secondary
job normally terminate with non-zero exit status, we (a) return the exit
status of the process with the lowest rank in the lowest jobid to have
a non-zero status, and (b) output a message summarizing the exit status
of the primary and all secondary jobs. </dd>

<dt>[bu]</dt>
<dd>if the cmd line option C]--report-child-jobs-separatelyR]
is set, we will return -only- the exit status of the primary job. Any non-zero
exit status in secondary jobs will be reported solely in a summary print
statement. </dd>
</dl>
<p>
By default, the job will abort when any process terminates with
non-zero status. The MCA parameter C]prte_abort_on_non_zero_statusR] can
be set to C]falseR] (or C]0R]) to cause the PRTE DVM to not abort a job
if one or more processes return a non-zero status. In that situation the
PRTE DVM records and notes that processes exited with non-zero termination
status to report the approprate exit status of C]prunR] (per bullet points
above). <p>
If the C]--timeoutR] command line option is used and the timeout expires
before the job completes (thereby forcing C]prunR] to kill the job) C]prunR]
will return an exit status equivalent to the value of C]ETIMEDOUTR] (which
is typically 110 on Linux and OS X systems). <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Synopsis</a></li>
<li><a name='toc2' href='#sect2'>C]$ prun --prefix /usr/localR]Quick Summary</a></li>
<li><a name='toc3' href='#sect3'>Options</a></li>
<ul>
<li><a name='toc4' href='#sect4'>Specifying Number of Processes</a></li>
<li><a name='toc5' href='#sect5'>I/O Management</a></li>
<li><a name='toc6' href='#sect6'>File and Environment Management</a></li>
<li><a name='toc7' href='#sect7'>MCA Parameters</a></li>
<li><a name='toc8' href='#sect8'>Debugging Options</a></li>
<li><a name='toc9' href='#sect9'>Other Options</a></li>
</ul>
<li><a name='toc10' href='#sect10'>Description</a></li>
<ul>
<li><a name='toc11' href='#sect11'>Specifying Host Nodes</a></li>
<li><a name='toc12' href='#sect12'>Application Context or Executable Program?</a></li>
<li><a name='toc13' href='#sect13'>Locating Files</a></li>
<li><a name='toc14' href='#sect14'>Current Working Directory</a></li>
<li><a name='toc15' href='#sect15'>Standard I/O</a></li>
<li><a name='toc16' href='#sect16'>Signal Propagation</a></li>
<li><a name='toc17' href='#sect17'>Process Termination / Signal Handling</a></li>
<li><a name='toc18' href='#sect18'>Process Environment</a></li>
<li><a name='toc19' href='#sect19'>Remote Execution</a></li>
<li><a name='toc20' href='#sect20'>C]$ prun --prefix /usr/local ...R]Exported Environment Variables</a></li>
<li><a name='toc21' href='#sect21'>Setting MCA Parameters</a></li>
<li><a name='toc22' href='#sect22'>Running as root</a></li>
</ul>
<li><a name='toc23' href='#sect23'>Return Value</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
