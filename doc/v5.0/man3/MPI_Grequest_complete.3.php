<?php
$topdir = "../../..";
$title = "MPI_Grequest_complete(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GREQUEST_COMPLETE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Grequest_completeR] - Reports that a generalized request is
complete.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Grequest_complete(MPI_Request request)R]Fortran
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GREQUEST_COMPLETE(REQUEST,
IERROR)    INTEGER REQUEST, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Grequest_complete(request, ierror)    TYPE(MPI_Request),
INTENT(IN) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input/Output
Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]requestR] : Generalized request (handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]IERRORR]
: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Grequest_completeR]
informs MPI that the operations represented by the generalized request
C]requestR] are complete. A call to C]<a href="../man3/MPI_Wait.3.php">MPI_Wait</a>(request, status)R] will return,
and a call to C]<a href="../man3/MPI_Test.3.php">MPI_Test</a>(request, flag, status)R] will return flag=true
only after a call to C]MPI_Grequest_completeR] has declared that these
operations are complete. <p>
MPI imposes no restrictions on the code executed
by the callback functions. However, new nonblocking operations should be
defined so that the general semantic rules about MPI calls such as C]MPI_TestR],
C]MPI_Request_freeR], or C]MPI_CancelR] still hold. For example, all these
calls are supposed to be local and nonblocking. Therefore, the callback
functions C]query_fnR], C]free_fnR], or C]cancel_fnR] should invoke blocking
MPI communication calls only if the context is such that these calls are
guaranteed to return in finite time. Once C]MPI_CancelR] has been invoked,
the canceled operation should complete in finite time, regardless of the
state of other processes (the operation has acquired [lq]local[rq] semantics).
It should either succeed or fail without side-effects. The user should guarantee
these same properties for newly defined operations.
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
<p>
Almost all MPI
routines return an error value; C routines as the value of the function
and Fortran routines in the last argument. <p>
Before the error value is returned,
the current MPI error handler is called. By default, this error handler
aborts the MPI job, except for I/O function errors. The error handler may
be changed with C]MPI_Comm_set_errhandlerR]; the predefined error handler
C]MPI_ERRORS_RETURNR] may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error. <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Grequest_complete(MPI_Request request)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GREQUEST_COMPLETE(REQUEST, IERROR)    INTEGER REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Grequest_complete(request, ierror)    TYPE(MPI_Request), INTENT(IN) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input/Output Parameter</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
