<?php
$topdir = "../../..";
$title = "MPI_Comm_dup(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_COMM_DUP(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Comm_dupR] - Duplicates an existing communicator with all its
cached information.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm)R]Fortran
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_DUP(COMM, NEWCOMM,
IERROR)    INTEGER COMM, NEWCOMM, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Comm_dup(comm, newcomm, ierror)    TYPE(MPI_Comm), INTENT(IN)
:: comm    TYPE(MPI_Comm), INTENT(OUT) :: newcomm    INTEGER, OPTIONAL,
INTENT(OUT) :: ierrorR]Input Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]commR] : Communicator (handle).
</dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]newcommR] : Copy of comm (handle). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR]
: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Comm_dupR] duplicates
the existing communicator C]commR] with associated key values. For each
key value, the respective copy callback function determines the attribute
value associated with this key in the new communicator; one particular
action that a copy callback may take is to delete the attribute from the
new communicator. Returns in newcomm a new communicator with the same group,
any copied cached information, but a new context (see Section 5.7.1 of the
MPI-1 Standard, [lq]Functionality[rq]).
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
<p>
This operation is used to provide
a parallel library call with a duplicate communication space that has the
same properties as the original communicator. This includes any attributes
(see below) and topologies (see Chapter 6, [lq]Process Topologies,[rq]
in the MPI-1 Standard). This call is valid even if there are pending point-to-point
communications involving the communicator C]commR]. A typical call might
involve an C]MPI_Comm_dupR] at the beginning of the parallel call, and
an C]MPI_Comm_freeR] of that duplicated communicator at the end of the
call. Other models of communicator management are also possible. This call
applies to both intra- and intercommunicators. Note that it is not defined
by the MPI standard what happens if the attribute copy callback invokes
other MPI functions. In Open MPI, it is not valid for attribute copy callbacks
(or any of their children) to add or delete attributes on the same object
on which the attribute copy callback is being invoked.
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all
MPI routines return an error value; C routines as the value of the function
and Fortran routines in the last argument. Before the error value is returned,
the current MPI error handler is called. By default, this error handler
aborts the MPI job, except for I/O function errors. The error handler may
be changed with C]MPI_Comm_set_errhandlerR]; the predefined error handler
C]MPI_ERRORS_RETURNR] may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
C]MPI_Comm_dup_with_infoR](3) C]MPI_Comm_idupR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_DUP(COMM, NEWCOMM, IERROR)    INTEGER COMM, NEWCOMM, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Comm_dup(comm, newcomm, ierror)    TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Comm), INTENT(OUT) :: newcomm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameter</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
