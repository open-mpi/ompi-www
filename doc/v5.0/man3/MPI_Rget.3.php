<?php
$topdir = "../../..";
$title = "MPI_Rget(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_RGET(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_GetR], C]MPI_RgetR] - Copies data from the target memory to
the origin.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;<a href="../man3/MPI_Get.3.php">MPI_Get</a>(void *origin_addr, int origin_count, MPI_Datatype
   origin_datatype, int target_rank, MPI_Aint target_disp,    int target_count,
MPI_Datatype target_datatype, MPI_Win win)MPI_Rget(void *origin_addr, int
origin_count, MPI_Datatype     origin_datatype, int target_rank, MPI_Aint
target_disp,     int target_count, MPI_Datatype target_datatype, MPI_Win
win,         MPI_Request *request)R]Fortran Syntax (See Fortran 77 Notes)</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Get.3.php">MPI_GET</a>(ORIGIN_ADDR,
ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,    TARGET_DISP, TARGET_COUNT,
TARGET_DATATYPE, WIN, IERROR)    &lt;type&gt; ORIGIN_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND)
TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,    TARGET_COUNT,
TARGET_DATATYPE, WIN, IERRORMPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE,
TARGET_RANK,     TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST,
IERROR)     &lt;type&gt; ORIGIN_ADDR(*)     INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,     TARGET_COUNT,
TARGET_DATATYPE, WIN, REQUEST, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Get(origin_addr, origin_count, origin_datatype, target_rank,
       target_disp, target_count, target_datatype, win, ierror)    TYPE(*),
DIMENSION(..), ASYNCHRONOUS :: origin_addr    INTEGER, INTENT(IN) :: origin_count,
target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype,
target_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp
   TYPE(MPI_Win), INTENT(IN) :: win    INTEGER, OPTIONAL, INTENT(OUT) ::
ierrorMPI_Rget(origin_addr, origin_count, origin_datatype, target_rank,
   target_disp, target_count, target_datatype, win, request,        ierror)
   TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr    INTEGER, INTENT(IN)
:: origin_count, target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN)
:: origin_datatype, target_datatype    INTEGER(KIND=MPI_ADDRESS_KIND),
INTENT(IN) :: target_disp    TYPE(MPI_Win), INTENT(IN) :: win    TYPE(MPI_Request),
INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input
Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]origin_addrR] : Initial address of origin buffer (choice).
</dd>

<dt>[bu]</dt>
<dd>C]origin_countR] : Number of entries in origin buffer (nonnegative
integer). </dd>

<dt>[bu]</dt>
<dd>C]origin_datatypeR] : Data type of each entry in origin buffer
(handle). </dd>

<dt>[bu]</dt>
<dd>C]target_rankR] : Rank of target (nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]target_dispR]
: Displacement from window start to the beginning of the target buffer
(nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]target_countR] : Number of entries in target
buffer (nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]target datatypeR] : datatype of each
entry in target buffer (handle) </dd>

<dt>[bu]</dt>
<dd>C]winR] : window object used for communication
(handle) </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]requestR] : MPI_Rget: RMA request </dd>

<dt>[bu]</dt>
<dd>C]IERRORR]
: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_GetR] copies data
from the target memory to the origin, similar to C]MPI_PutR], except that
the direction of data transfer is reversed. The C]origin_datatypeR] may
not specify overlapping entries in the origin buffer. The target buffer
must be contained within the target window, and the copied data must fit,
without truncation, in the origin buffer. Only processes within the same
node can access the target window. <p>
C]MPI_RgetR] is similar to C]MPI_GetR],
except that it allocates a communication C]requestR] object and associates
it with the C]requestR] handle (the argument C]requestR]) that can be used
to wait or test for completion. The completion of an C]MPI_RgetR] operation
indicates that the data is available in the origin buffer. If C]origin_addrR]
points to memory attached to a window, then the data becomes available
in the private copy of this window.
<h2><a name='sect8' href='#toc8'>Fortran 77 Notes</a></h2>
<p>
The MPI standard prescribes
portable Fortran syntax for the C]TARGET_DISPR] argument only for Fortran
90. FORTRAN 77 users may use the non-portable syntax <br>
<pre>

</pre><p>

<dl>

<dt>C]INTEGER*MPI_ADDRESS_KIND TARGET_DISPR]where C]MPI_ADDRESS_KINDR] is a
constant defined in mpif.h and </dt>
<dd>gives the length of the declared integer
in bytes. </dd>
</dl>

<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
<p>
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
C]MPI_PutR](3)  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h><a href="../man3/MPI_Get.3.php">MPI_Get</a>(void *origin_addr, int origin_count, MPI_Datatype    origin_datatype, int target_rank, MPI_Aint target_disp,    int target_count, MPI_Datatype target_datatype, MPI_Win win)MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype     origin_datatype, int target_rank, MPI_Aint target_disp,     int target_count, MPI_Datatype target_datatype, MPI_Win win,         MPI_Request *request)R]Fortran Syntax (See Fortran 77 Notes)</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Get.3.php">MPI_GET</a>(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,    TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR)    <type> ORIGIN_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,    TARGET_COUNT, TARGET_DATATYPE, WIN, IERRORMPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,     TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR)     <type> ORIGIN_ADDR(*)     INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP     INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,     TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Get(origin_addr, origin_count, origin_datatype, target_rank,        target_disp, target_count, target_datatype, win, ierror)    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp    TYPE(MPI_Win), INTENT(IN) :: win    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Rget(origin_addr, origin_count, origin_datatype, target_rank,    target_disp, target_count, target_datatype, win, request,        ierror)    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp    TYPE(MPI_Win), INTENT(IN) :: win    TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Fortran 77 Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
