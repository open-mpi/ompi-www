<?php
$topdir = "../../..";
$title = "MPI_Gatherv(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GATHERV(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_GathervR], C]MPI_IgathervR] - Gathers varying amounts of data
from all processes to the root process
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype
sendtype,    void *recvbuf, const int recvcounts[], const int displs[],
MPI_Datatype recvtype,    int root, MPI_Comm comm)int <a href="../man3/MPI_Igatherv.3.php">MPI_Igatherv</a>(const
void *sendbuf, int sendcount, MPI_Datatype sendtype,    void *recvbuf,
const int recvcounts[], const int displs[], MPI_Datatype recvtype,    int
root, MPI_Comm comm, MPI_Request *request)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GATHERV(SENDBUF,
SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,        DISPLS, RECVTYPE, ROOT,
COMM, IERROR)    &lt;type&gt;  SENDBUF(*), RECVBUF(*)    INTEGER SENDCOUNT, SENDTYPE,
RECVCOUNTS(*), DISPLS(*)    INTEGER RECVTYPE, ROOT, COMM, IERRORMPI_IGATHERV(SENDBUF,
SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,        DISPLS, RECVTYPE, ROOT,
COMM, REQUEST, IERROR)    &lt;type&gt;  SENDBUF(*), RECVBUF(*)    INTEGER SENDCOUNT,
SENDTYPE, RECVCOUNTS(*), DISPLS(*)    INTEGER RECVTYPE, ROOT, COMM, REQUEST,
IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts,
displs,        recvtype, root, comm, ierror)    TYPE(*), DIMENSION(..), INTENT(IN)
:: sendbuf    TYPE(*), DIMENSION(..) :: recvbuf    INTEGER, INTENT(IN) ::
sendcount, recvcounts(*), displs(*), root    TYPE(MPI_Datatype), INTENT(IN)
:: sendtype, recvtype    TYPE(MPI_Comm), INTENT(IN) :: comm    INTEGER,
OPTIONAL, INTENT(OUT) :: ierrorMPI_Igatherv(sendbuf, sendcount, sendtype,
recvbuf, recvcounts, displs,        recvtype, root, comm, request, ierror)
   TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf    TYPE(*),
DIMENSION(..), ASYNCHRONOUS :: recvbuf    INTEGER, INTENT(IN) :: sendcount,
root    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)
  TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype    TYPE(MPI_Comm),
INTENT(IN) :: comm    TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER,
OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]sendbufR] : Starting
address of send buffer (choice). </dd>

<dt>[bu]</dt>
<dd>C]sendcountR] : Number of elements
in send buffer (integer). </dd>

<dt>[bu]</dt>
<dd>C]sendtypeR] : Datatype of send buffer elements
(handle). </dd>

<dt>[bu]</dt>
<dd>C]recvcountsR] : Integer array (of length group size) containing
the number of elements that are received from each process (significant
only at root). </dd>

<dt>[bu]</dt>
<dd>C]displsR] : Integer array (of length group size). Entry
i specifies the displacement relative to recvbuf at which to place the
incoming data from process i (significant only at root). </dd>

<dt>[bu]</dt>
<dd>C]recvtypeR]
: Datatype of recv buffer elements (significant only at root) (handle).
</dd>

<dt>[bu]</dt>
<dd>C]rootR] : Rank of receiving process (integer). </dd>

<dt>[bu]</dt>
<dd>C]commR] : Communicator
(handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]recvbufR] : Address of receive buffer (choice,
significant only at root). </dd>

<dt>[bu]</dt>
<dd>C]requestR] : Request (handle, non-blocking
only). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_GathervR]
extends the functionality of C]MPI_GatherR] by allowing a varying count
of data from each process, since C]recvcountsR] is now an array. It also
allows more flexibility as to where the data is placed on the root, by
providing the new argument, C]displsR]. <p>
The outcome is as if each process,
including the root process, sends a message to the root, <br>
<pre>

</pre><p>

<dl>

<dt>C]<a href="../man3/MPI_Send.3.php">MPI_Send</a>(sendbuf, sendcount, sendtype, root, ...)R]and the root executes
n receives, </dt>
<dd><br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]<a href="../man3/MPI_Recv.3.php">MPI_Recv</a>(recvbuf + disp[i] * extent(recvtype),     recvcounts[i], recvtype,
i, ...)R]Messages are placed in the receive buffer of the root process in
rank </dt>
<dd>order, that is, the data sent from process j is placed in the jth
portion of the receive buffer C]recvbufR] on process root. The jth portion
of C]recvbufR] begins at offset displs[j] elements (in terms of C]recvtypeR])
into C]recvbufR]. </dd>
</dl>
<p>
The receive buffer is ignored for all nonroot processes.
<p>
The type signature implied by C]sendcountR], C]sendtypeR] on process i
must be equal to the type signature implied by C]recvcounts[i]R], C]recvtypeR]
at the root. This implies that the amount of data sent must be equal to
the amount of data received, pairwise between each process and the root.
Distinct type maps between sender and receiver are still allowed, as illustrated
in Example 2, below. <p>
All arguments to the function are significant on process
C]rootR], while on other processes, only arguments C]sendbufR], C]sendcountR],
C]sendtypeR], C]rootR], C]commR] are significant. The arguments C]rootR]
and C]commR] must have identical values on all processes. <p>
The specification
of counts, types, and displacements should not cause any location on the
C]rootR] to be written more than once. Such a call is erroneous. <p>
Example
1: Now have each process send 100 ints to C]rootR], but place each set
(of 100) stride ints apart at receiving end. Use C]MPI_GathervR] and the
C]displsR] argument to achieve this effect. Assume stride &gt;= 100. <br>
<pre>

</pre><p>

<dl>

<dt>C]MPI_Comm comm;int gsize,sendarray[100];int root, *rbuf, stride;int *displs,i,*rcounts;//
     ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>(comm, &amp;gsize);rbuf = (int *)malloc(gsize*stride*sizeof(int));displs
= (int *)malloc(gsize*sizeof(int));rcounts = (int *)malloc(gsize*sizeof(int));for
(i=0; i&lt;gsize; ++i) {    displs[i] = i*stride;    rcounts[i] = 100;}MPI_Gatherv(sendarray,
100, MPI_INT, rbuf, rcounts,    displs, MPI_INT, root, comm);R]Note that
the program is erroneous if stride &lt; 100. </dt>
<dd></dd>
</dl>
<p>
Example 2: Same as Example 1 on
the receiving side, but send the 100 ints from the 0th column of a 100
150 int array, in C. <br>
<pre>

</pre><p>

<dl>

<dt>C]MPI_Comm comm;int gsize,sendarray[100][150];int root, *rbuf, stride;MPI_Datatype
stype;int *displs,i,*rcounts;//      ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>(comm, &amp;gsize);rbuf =
(int *)malloc(gsize*stride*sizeof(int));displs = (int *)malloc(gsize*sizeof(int));rcounts
= (int *)malloc(gsize*sizeof(int));for (i=0; i&lt;gsize; ++i) {    displs[i]
= i*stride;    rcounts[i] = 100;}/* Create datatype for 1 column of array
*/<a href="../man3/MPI_Type_vector.3.php">MPI_Type_vector</a>(100, 1, 150, MPI_INT, &amp;stype);<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>( &amp;stype );MPI_Gatherv(sendarray,
1, stype, rbuf, rcounts,    displs, MPI_INT, root, comm);R]Example 3: Process
i sends (100-i) ints from the ith column of a 100 x </dt>
<dd>150 int array, in C.
It is received into a buffer with stride, as in the previous two examples.
<br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]MPI_Comm comm;int gsize,sendarray[100][150],*sptr;int root, *rbuf, stride,
myrank;MPI_Datatype stype;int *displs,i,*rcounts;//      ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>(comm,
&amp;gsize);<a href="../man3/MPI_Comm_rank.3.php">MPI_Comm_rank</a>( comm, &amp;myrank );rbuf = (int *)malloc(gsize*stride*sizeof(int));displs
= (int *)malloc(gsize*sizeof(int));rcounts = (int *)malloc(gsize*sizeof(int));for
(i=0; i&lt;gsize; ++i) {    displs[i] = i*stride;    rcounts[i] = 100-i;  /*
note change from previous example */}/* Create datatype for the column
we are sending */<a href="../man3/MPI_Type_vector.3.php">MPI_Type_vector</a>(100-myrank, 1, 150, MPI_INT, &amp;stype);<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>(
&amp;stype );/* sptr is the address of start of [dq]myrank[dq] column */sptr
= &amp;sendarray[0][myrank];MPI_Gatherv(sptr, 1, stype, rbuf, rcounts, displs,
MPI_INT,   root, comm);R]Note that a different amount of data is received
from each process. </dt>
<dd></dd>
</dl>
<p>
Example 4: Same as Example 3, but done in a different
way at the sending end. We create a datatype that causes the correct striding
at the sending end so that we read a column of a C array. <br>
<pre>

</pre><p>

<dl>

<dt>C]MPI_Comm comm;int gsize,sendarray[100][150],*sptr;int root, *rbuf, stride,
myrank, disp[2], blocklen[2];MPI_Datatype stype,type[2];int *displs,i,*rcounts;//
     ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>(comm, &amp;gsize);<a href="../man3/MPI_Comm_rank.3.php">MPI_Comm_rank</a>( comm, &amp;myrank );rbuf = (int
*)alloc(gsize*stride*sizeof(int));displs = (int *)malloc(gsize*sizeof(int));rcounts
= (int *)malloc(gsize*sizeof(int));for (i=0; i&lt;gsize; ++i) {    displs[i]
= i*stride;    rcounts[i] = 100-i;}/* Create datatype for one int, with
extent of entire row */disp[0] = 0;       disp[1] = 150*sizeof(int);type[0]
= MPI_INT; type[1] = MPI_UB;blocklen[0] = 1;   blocklen[1] = 1;<a href="../man3/MPI_Type_struct.3.php">MPI_Type_struct</a>(
2, blocklen, disp, type, &amp;stype );<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>( &amp;stype );sptr = &amp;sendarray[0][myrank];MPI_Gatherv(sptr,
100-myrank, stype, rbuf, rcounts,    displs, MPI_INT, root, comm);R]Example
5: Same as Example 3 at sending side, but at receiving side we </dt>
<dd>make the
stride between received blocks vary from block to block. <br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]MPI_Comm comm;int gsize,sendarray[100][150],*sptr;int root, *rbuf, *stride,
myrank, bufsize;MPI_Datatype stype;int *displs,i,*rcounts,offset;//
  ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>( comm, &amp;gsize);<a href="../man3/MPI_Comm_rank.3.php">MPI_Comm_rank</a>( comm, &amp;myrank );de = (int *)malloc(gsize*sizeof(int));//
        .../* stride[i] for i = 0 to gsize-1 is set somehow *//*set up displs
and rcounts vectors first */displs = (int *)malloc(gsize*sizeof(int));rcounts
= (int *)malloc(gsize*sizeof(int));offset = 0;for (i=0; i&lt;gsize; ++i) {
   displs[i] = offset;    offset += stride[i];    rcounts[i] = 100-i;}/*
the required buffer size for rbuf is now easily obtained */bufsize = displs[gsize-1]+rcounts[gsize-1];rbuf
= (int *)malloc(bufsize*sizeof(int));/* Create datatype for the column
we are sending */<a href="../man3/MPI_Type_vector.3.php">MPI_Type_vector</a>(100-myrank, 1, 150, MPI_INT, &amp;stype);<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>(
&amp;stype );sptr = &amp;sendarray[0][myrank];MPI_Gatherv(sptr, 1, stype, rbuf, rcounts,
   displs, MPI_INT, root, comm);R]Example 6: Process i sends num ints from
the ith column of a 100 x 150 </dt>
<dd>int array, in C. The complicating factor is
that the various values of num are not known to C]rootR], so a separate
gather must first be run to find these out. The data is placed contiguously
at the receiving end. <br>
<pre>

</pre></dd>
</dl>

<h2><a name='sect8' href='#toc8'>C]MPI_Comm comm;int gsize,sendarray[100][150],*sptr;int root, *rbuf, stride,
myrank, disp[2], blocklen[2];MPI_Datatype stype,types[2];int *displs,i,*rcounts,num;//
     ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>( comm, &amp;gsize);<a href="../man3/MPI_Comm_rank.3.php">MPI_Comm_rank</a>( comm, &amp;myrank );/*First,
gather nums to root */rcounts = (int *)malloc(gsize*sizeof(int));<a href="../man3/MPI_Gather.3.php">MPI_Gather</a>(
&amp;num, 1, MPI_INT, rcounts, 1, MPI_INT, root, comm);/* root now has correct
rcounts, using these we set * displs[] so that data is placed contiguously
(or * concatenated) at receive end */displs = (int *)malloc(gsize*sizeof(int));displs[0]
= 0;for (i=1; i&lt;gsize; ++i) {    displs[i] = displs[i-1]+rcounts[i-1];}/*
And, create receive buffer */rbuf = (int *)malloc(gsize*(displs[gsize-1]+rcounts[gsize-1])
       *sizeof(int));/* Create datatype for one int, with extent of entire
row */disp[0] = 0;       disp[1] = 150*sizeof(int);type[0] = MPI_INT; type[1]
= MPI_UB;blocklen[0] = 1;   blocklen[1] = 1;<a href="../man3/MPI_Type_struct.3.php">MPI_Type_struct</a>( 2, blocklen,
disp, type, &amp;stype );<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>( &amp;stype );sptr = &amp;sendarray[0][myrank];MPI_Gatherv(sptr,
num, stype, rbuf, rcounts,            displs, MPI_INT, root, comm);R]Use
Of In-Place Option</a></h2>
<p>

<dl>

<dt>The in-place option operates in the same way as it does
for </dt>
<dd>C]<a href="../man3/MPI_Gather.3.php">MPI_Gather</a>.R] When the communicator is an intracommunicator, you can
perform a gather operation in-place (the output buffer is used as the input
buffer). Use the variable C]MPI_IN_PLACER] as the value of the root process
C]sendbufR]. In this case, C]sendcountR] and C]sendtypeR] are ignored, and
the contribution of the C]rootR] process to the gathered vector is assumed
to already be in the correct place in the receive buffer. </dd>
</dl>
<p>
Note that C]MPI_IN_PLACER]
is a special kind of value; it has the same restrictions on its use as
C]MPI_BOTTOM.R] <p>
Because the in-place option converts the receive buffer into
a send-and-receive buffer, a Fortran binding that includes INTENT must mark
these as INOUT, not OUT.
<h2><a name='sect9' href='#toc9'>When Communicator Is An Inter-Communicator</a></h2>
<p>
When the
communicator is an inter-communicator, the C]rootR] process in the first
group gathers data from all the processes in the second group. The first
group defines the root process. That process uses C]MPI_ROOTR] as the value
of its C]rootR] argument. The remaining processes use C]MPI_PROC_NULLR]
as the value of their C]rootR] argument. All processes in the second group
use the rank of that root process in the first group as the value of their
C]rootR] argument. The send buffer argument of the processes in the first
group must be consistent with the receive buffer argument of the C]rootR]
process in the second group.
<h2><a name='sect10' href='#toc10'>Errors</a></h2>
<p>
Almost all MPI routines return an error
value; C routines as the value of the function and Fortran routines in
the last argument. <p>
Before the error value is returned, the current MPI error
handler is called. By default, this error handler aborts the MPI job, except
for I/O function errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
C]MPI_GatherR](3) C]MPI_ScatterR](3)
C]MPI_ScattervR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,    void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype,    int root, MPI_Comm comm)int <a href="../man3/MPI_Igatherv.3.php">MPI_Igatherv</a>(const void *sendbuf, int sendcount, MPI_Datatype sendtype,    void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype,    int root, MPI_Comm comm, MPI_Request *request)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,        DISPLS, RECVTYPE, ROOT, COMM, IERROR)    <type>  SENDBUF(*), RECVBUF(*)    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*)    INTEGER RECVTYPE, ROOT, COMM, IERRORMPI_IGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,        DISPLS, RECVTYPE, ROOT, COMM, REQUEST, IERROR)    <type>  SENDBUF(*), RECVBUF(*)    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*)    INTEGER RECVTYPE, ROOT, COMM, REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs,        recvtype, root, comm, ierror)    TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf    TYPE(*), DIMENSION(..) :: recvbuf    INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*), root    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype    TYPE(MPI_Comm), INTENT(IN) :: comm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Igatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs,        recvtype, root, comm, request, ierror)    TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf    INTEGER, INTENT(IN) :: sendcount, root    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype    TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>C]MPI_Comm comm;int gsize,sendarray[100][150],*sptr;int root, *rbuf, stride, myrank, disp[2], blocklen[2];MPI_Datatype stype,types[2];int *displs,i,*rcounts,num;//      ...<a href="../man3/MPI_Comm_size.3.php">MPI_Comm_size</a>( comm, &gsize);<a href="../man3/MPI_Comm_rank.3.php">MPI_Comm_rank</a>( comm, &myrank );/*First, gather nums to root */rcounts = (int *)malloc(gsize*sizeof(int));<a href="../man3/MPI_Gather.3.php">MPI_Gather</a>( &num, 1, MPI_INT, rcounts, 1, MPI_INT, root, comm);/* root now has correct rcounts, using these we set * displs[] so that data is placed contiguously (or * concatenated) at receive end */displs = (int *)malloc(gsize*sizeof(int));displs[0] = 0;for (i=1; i<gsize; ++i) {    displs[i] = displs[i-1]+rcounts[i-1];}/* And, create receive buffer */rbuf = (int *)malloc(gsize*(displs[gsize-1]+rcounts[gsize-1])        *sizeof(int));/* Create datatype for one int, with extent of entire row */disp[0] = 0;       disp[1] = 150*sizeof(int);type[0] = MPI_INT; type[1] = MPI_UB;blocklen[0] = 1;   blocklen[1] = 1;<a href="../man3/MPI_Type_struct.3.php">MPI_Type_struct</a>( 2, blocklen, disp, type, &stype );<a href="../man3/MPI_Type_commit.3.php">MPI_Type_commit</a>( &stype );sptr = &sendarray[0][myrank];MPI_Gatherv(sptr, num, stype, rbuf, rcounts,            displs, MPI_INT, root, comm);R]Use Of In-Place Option</a></li>
<li><a name='toc9' href='#sect9'>When Communicator Is An Inter-Communicator</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
<li><a name='toc11' href='#sect11'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
