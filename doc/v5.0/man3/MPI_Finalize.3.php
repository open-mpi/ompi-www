<?php
$topdir = "../../..";
$title = "MPI_Finalize(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_FINALIZE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_FinalizeR] - Terminates MPI execution environment.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Finalize()R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_FINALIZE(IERROR)
   INTEGER IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Finalize(ierror)    INTEGER, OPTIONAL, INTENT(OUT) ::
ierrorR]Output Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status (integer).
</dd>
</dl>

<h2><a name='sect6' href='#toc6'>Description</a></h2>
<p>
This routine cleans up all MPI states. Once this routine is called,
no MPI routine (not even C]MPI_InitR]) may be called, except for C]MPI_Get_versionR],
C]MPI_InitializedR], and C]MPI_FinalizedR]. Unless there has been a call
to C]MPI_AbortR], you must ensure that all pending communications involving
a process are complete before the process calls C]MPI_FinalizeR]. If the
call returns, each process may either continue local computations or exit
without participating in further communication with other processes. At
the moment when the last process calls C]MPI_FinalizeR], all pending sends
must be matched by a receive, and all pending receives must be matched
by a send. <p>
C]MPI_FinalizeR] is collective over all connected processes. If
no processes were spawned, accepted, or connected, then this means it is
collective over C]MPI_COMM_WORLDR]. Otherwise, it is collective over the
union of all processes that have been and continue to be connected.
<h2><a name='sect7' href='#toc7'>Notes</a></h2>
<p>
All
processes must call this routine before exiting. All processes will still
exist but may not make any further MPI calls. C]MPI_FinalizeR] guarantees
that all local actions required by communications the user has completed
will, in fact, occur before it returns. However, C]MPI_FinalizeR] guarantees
nothing about pending communications that have not been completed; completion
is ensured only by C]MPI_WaitR], C]<a href="../man3/MPI_Test.3.php">MPI_Test</a>,R] or C]MPI_Request_freeR]
combined with some other verification of completion. <p>
For example, a successful
return from a blocking communication operation or from C]MPI_WaitR] or
C]MPI_TestR] means that the communication is completed by the user and
the buffer can be reused, but does not guarantee that the local process
has no more work to do. Similarly, a successful return from C]MPI_Request_freeR]
with a request handle generated by an C]MPI_IsendR] nullifies the handle
but does not guarantee that the operation has completed. The C]MPI_IsendR]
is complete only when a matching receive has completed. <p>
If you would like
to cause actions to happen when a process finishes, attach an attribute
to C]MPI_COMM_SELFR] with a callback function. Then, when C]MPI_FinalizeR]
is called, it will first execute the equivalent of an C]MPI_Comm_freeR]
on C]MPI_COMM_SELFR]. This will cause the delete callback function to be
executed on all keys associated with C]MPI_COMM_SELFR] in an arbitrary
order. If no key has been attached to C]MPI_COMM_SELFR], then no callback
is invoked. This freeing of C]MPI_COMM_SELFR] happens before any other parts
of MPI are affected. Calling C]MPI_FinalizedR] will thus return [lq]false[rq]
in any of these callback functions. Once you have done this with C]MPI_COMM_SELFR],
the results of C]MPI_FinalizeR] are not specified.
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
<p>
Almost all MPI
routines return an error value; C routines as the value of the function
and Fortran routines in the last argument. <p>
Before the error value is returned,
the current MPI error handler is called. By default, this error handler
aborts the MPI job, except for I/O function errors. The error handler may
be changed with C]MPI_Comm_set_errhandlerR]; the predefined error handler
C]MPI_ERRORS_RETURNR] may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<p>
C]MPI_InitR](3) C]MPI_Init_threadR](3) C]MPI_InitializedR](3)
C]MPI_FinalizedR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Finalize()R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_FINALIZE(IERROR)    INTEGER IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Finalize(ierror)    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Output Parameter</a></li>
<li><a name='toc6' href='#sect6'>Description</a></li>
<li><a name='toc7' href='#sect7'>Notes</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
