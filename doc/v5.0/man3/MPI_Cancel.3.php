<?php
$topdir = "../../..";
$title = "MPI_Cancel(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_CANCEL(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_CancelR] - Cancels a communication request.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Cancel(MPI_Request *request)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_CANCEL(REQUEST,
IERROR)    INTEGER REQUEST, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Cancel(request, ierror)    TYPE(MPI_Request), INTENT(IN)
:: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]requestR]
: Communication request (handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran
only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
The C]MPI_CancelR] operation allows
pending communications to be canceled. This is required for cleanup. Posting
a send or a receive ties up user resources (send or receive buffers), and
a cancel may be needed to free these resources gracefully. <p>
A call to C]MPI_CancelR]
marks for cancellation a pending, nonblocking communication operation (send
or receive). The cancel call is local. It returns immediately, possibly before
the communication is actually canceled. It is still necessary to complete
a communication that has been marked for cancellation, using a call to
C]<a href="../man3/MPI_Request_free.3.php">MPI_Request_free</a>,R] C]MPI_WaitR], or C]MPI_TestR] (or any of the derived
operations). <p>
If a communication is marked for cancellation, then an C]MPI_WaitR]
call for that communication is guaranteed to return, irrespective of the
activities of other processes (i.e., C]MPI_WaitR] behaves as a local function);
similarly if C]MPI_TestR] is repeatedly called in a busy wait loop for
a canceled communication, then C]MPI_TestR] will eventually be successful.
<p>
C]MPI_CancelR] can be used to cancel a communication that uses a persistent
C]requestR] (see Section 3.9 in the MPI-1 Standard, [lq]Persistent Communication
Requests[rq]) in the same way it is used for nonpersistent C]requestR]s.
A successful cancellation cancels the active communication, but not the
C]requestR] itself. After the call to C]MPI_CancelR] and the subsequent
call to C]MPI_WaitR] or C]MPI_TestR], the C]requestR] becomes inactive
and can be activated for a new communication. <p>
The successful cancellation
of a buffered send frees the buffer space occupied by the pending message.
<p>
Either the cancellation succeeds or the communication succeeds, but not
both. If a send is marked for cancellation, then it must be the case that
either the send completes normally, in which case the message sent is received
at the destination process, or that the send is successfully canceled,
in which case no part of the message is received at the destination. Then,
any matching receive has to be satisfied by another send. If a receive is
marked for cancellation, then it must be the case that either the receive
completes normally, or that the receive is successfully canceled, in which
case no part of the receive buffer is altered. Then, any matching send has
to be satisfied by another receive. <p>
If the operation has been canceled,
then information to that effect will be returned in the status argument
of the operation that completes the communication.
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
<p>
The primary expected
use of C]MPI_CancelR] is in multi-buffering schemes, where speculative C]MPI_IrecvsR]
are made. When the computation completes, some of these C]requestR]s may
remain; using C]MPI_CancelR] allows the user to cancel these unsatisfied
C]requestR]s.
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
C]MPI_ProbeR](3) C]MPI_IprobeR](3)
C]MPI_Test_cancelledR](3) C]MPI_Cart_coordsR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Cancel(MPI_Request *request)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_CANCEL(REQUEST, IERROR)    INTEGER REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Cancel(request, ierror)    TYPE(MPI_Request), INTENT(IN) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameter</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
