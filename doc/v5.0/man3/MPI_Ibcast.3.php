<?php
$topdir = "../../..";
$title = "MPI_Ibcast(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_IBCAST(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_BcastR], C]MPI_IbcastR] - Broadcasts a message from the process
with rank I]rootR] to all other processes of the group.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int <a href="../man3/MPI_Bcast.3.php">MPI_Bcast</a>(void *buffer, int count, MPI_Datatype datatype,
   int root, MPI_Comm comm)int MPI_Ibcast(void *buffer, int count, MPI_Datatype
datatype,    int root, MPI_Comm comm, MPI_Request *request)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Bcast.3.php">MPI_BCAST</a>(BUFFER, COUNT,
DATATYPE, ROOT, COMM, IERROR)    &lt;type&gt;  BUFFER(*)    INTEGER COUNT, DATATYPE,
ROOT, COMM, IERRORMPI_IBCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, REQUEST,
IERROR)    &lt;type&gt;  BUFFER(*)    INTEGER COUNT, DATATYPE, ROOT, COMM, REQUEST,
IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Bcast(buffer, count, datatype, root, comm, ierror)
TYPE(*), DIMENSION(..) :: buffer    INTEGER, INTENT(IN) :: count, root
 TYPE(MPI_Datatype), INTENT(IN) :: datatype    TYPE(MPI_Comm), INTENT(IN)
:: comm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Ibcast(buffer, count,
datatype, root, comm, request, ierror)    TYPE(*), DIMENSION(..), ASYNCHRONOUS
:: buffer    INTEGER, INTENT(IN) :: count, root    TYPE(MPI_Datatype),
INTENT(IN) :: datatype    TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Request),
INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input/Output
Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]bufferR]: Starting address of buffer (choice). </dd>

<dt>[bu]</dt>
<dd>C]countR]:
Number of entries in buffer (integer). </dd>

<dt>[bu]</dt>
<dd>C]datatypeR]: Data type of buffer
(handle). </dd>

<dt>[bu]</dt>
<dd>C]rootR]: Rank of broadcast root (integer). </dd>

<dt>[bu]</dt>
<dd>C]commR]: Communicator
(handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]requestR]: Request (handle, non-blocking
only). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR]: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_BcastR]
broadcasts a message from the process with rank root to all processes of
the group, itself included. It is called by all members of group using the
same arguments for C]commR], C]rootR]. On return, the contents of root[cq]s
communication buffer has been copied to all processes. <p>
General, derived
datatypes are allowed for datatype. The type signature of count, datatype
on any process must be equal to the type signature o f count, datatype
at the root. This implies that the amount of data sent must be equal to
the amount received, pairwise between each process and the root. C]MPI_BcastR]
and all other data-movement collective routines make this restriction. Distinct
type maps between sender and receiver are still allowed. <p>
B]Example:R] Broadcast
100 ints from process 0 to every process in the group. <br>
<pre>

</pre><p>

<dl>

<dt>C]MPI_Comm comm;int array[100];int root=0;//...<a href="../man3/MPI_Bcast.3.php">MPI_Bcast</a>( array, 100, MPI_INT,
root, comm);R]As in many of our sample code fragments, we assume that some
of the </dt>
<dd>variables (such as comm in the example above) have been assigned
appropriate values. </dd>
</dl>

<h2><a name='sect8' href='#toc8'>When Communicator is an Inter-communicator</a></h2>
<p>
When the communicator
is an inter-communicator, the root process in the first group broadcasts
data to all the processes in the second group. The first group defines the
root process. That process uses C]MPI_ROOTR] as the value of its C]rootR]
argument. The remaining processes use C]MPI_PROC_NULLR] as the value of
their C]rootR] argument. All processes in the second group use the rank
of that root process in the first group as the value of their C]rootR]
argument. The receive buffer arguments of the processes in the second group
must be consistent with the send buffer argument of the root process in
the first group.
<h2><a name='sect9' href='#toc9'>Notes</a></h2>
<p>
This function does not support the in-place option.

<h2><a name='sect10' href='#toc10'>Errors</a></h2>
<p>
Almost all MPI routines return an error value; C routines as the
value of the function and Fortran routines in the last argument. <p>
Before
the error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int <a href="../man3/MPI_Bcast.3.php">MPI_Bcast</a>(void *buffer, int count, MPI_Datatype datatype,    int root, MPI_Comm comm)int MPI_Ibcast(void *buffer, int count, MPI_Datatype datatype,    int root, MPI_Comm comm, MPI_Request *request)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Bcast.3.php">MPI_BCAST</a>(BUFFER, COUNT, DATATYPE, ROOT, COMM, IERROR)    <type>  BUFFER(*)    INTEGER COUNT, DATATYPE, ROOT, COMM, IERRORMPI_IBCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, REQUEST, IERROR)    <type>  BUFFER(*)    INTEGER COUNT, DATATYPE, ROOT, COMM, REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Bcast(buffer, count, datatype, root, comm, ierror)    TYPE(*), DIMENSION(..) :: buffer    INTEGER, INTENT(IN) :: count, root    TYPE(MPI_Datatype), INTENT(IN) :: datatype    TYPE(MPI_Comm), INTENT(IN) :: comm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Ibcast(buffer, count, datatype, root, comm, request, ierror)    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buffer    INTEGER, INTENT(IN) :: count, root    TYPE(MPI_Datatype), INTENT(IN) :: datatype    TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input/Output Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>When Communicator is an Inter-communicator</a></li>
<li><a name='toc9' href='#sect9'>Notes</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
