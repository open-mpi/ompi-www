<?php
$topdir = "../../..";
$title = "MPI_Bsend(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_BSEND(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_BsendR] - Basic send with user-specified buffering.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype,
  int dest, int tag, MPI_Comm comm)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_BSEND(BUF, COUNT,DATATYPE,
DEST, TAG, COMM, IERROR)    &lt;type&gt;  BUF(*)    INTEGER COUNT, DATATYPE, DEST,
TAG, COMM, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Bsend(buf, count, datatype, dest, tag, comm, ierror)
  TYPE(*), DIMENSION(..), INTENT(IN) :: buf    INTEGER, INTENT(IN) :: count,
dest, tag    TYPE(MPI_Datatype), INTENT(IN) :: datatype    TYPE(MPI_Comm),
INTENT(IN) :: comm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]bufR]
: Initial address of send buffer (choice). </dd>

<dt>[bu]</dt>
<dd>C]countR] : Number of entries
in send buffer (nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]datatypeR] : Datatype of each
send buffer element (handle). </dd>

<dt>[bu]</dt>
<dd>C]destR] : Rank of destination (integer).
</dd>

<dt>[bu]</dt>
<dd>C]tagR] : Message tag (integer). </dd>

<dt>[bu]</dt>
<dd>C]commR] : Communicator (handle).
</dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status (integer).
</dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_BsendR] performs a buffered-mode, blocking send.
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
<p>
This
send is provided as a convenience function; it allows the user to send
messages without worrying about where they are buffered (because the user
must have provided buffer space with C]MPI_Buffer_attachR]). <p>
In deciding
how much buffer space to allocate, remember that the buffer space is not
available for reuse by subsequent C]MPI_BsendR]s unless you are certain
that the message has been received (not just that it should have been received).
For example, this code does not allocate enough buffer space: <br>
<pre>

</pre><p>

<dl>

<dt>C]<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( b, n*sizeof(double) + MPI_BSEND_OVERHEAD );for (i=0;
i&lt;m; i++) {    MPI_Bsend( buf, n, MPI_DOUBLE, ... );}R]because only enough
buffer space is provided for a single send, and the </dt>
<dd>loop may start a second
C]MPI_BsendR] before the first is done making use of the buffer. </dd>
</dl>
<p>
In C, you
can force the messages to be delivered by C]<a href="../man3/MPI_Buffer_detach.3.php">MPI_Buffer_detach</a>( &amp;b, &amp;n );R]
C]<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( b, n );R] (The C]MPI_Buffer_detachR] will not complete
until all buffered messages are delivered.)
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines
return an error value; C routines as the value; C routines as the value
of the function and Fortran routines in the last argument. <p>
Before the error
value is returned, the current MPI error handler is called. By default,
this error handler aborts the MPI job, except for I/O function errors. The
error handler may be changed with C]MPI_Comm_set_errhandlerR]; the predefined
error handler C]MPI_ERRORS_RETURNR] may be used to cause error values to
be returned. Note that MPI does not guarantee that an MPI program can continue
past an error. <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype,   int dest, int tag, MPI_Comm comm)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_BSEND(BUF, COUNT,DATATYPE, DEST, TAG, COMM, IERROR)    <type>  BUF(*)    INTEGER COUNT, DATATYPE, DEST, TAG, COMM, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Bsend(buf, count, datatype, dest, tag, comm, ierror)    TYPE(*), DIMENSION(..), INTENT(IN) :: buf    INTEGER, INTENT(IN) :: count, dest, tag    TYPE(MPI_Datatype), INTENT(IN) :: datatype    TYPE(MPI_Comm), INTENT(IN) :: comm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
