<?php
$topdir = "../../..";
$title = "MPI_Buffer_detach(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_BUFFER_DETACH(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Buffer_detachR] - Removes an existing buffer (for use in in
C]MPI_BsendR], etc.)
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Buffer_detach(void *buf, int *size)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_BUFFER_DETACH(BUF,
SIZE, IERROR)    &lt;type&gt;  BUF(*)    INTEGER SIZE, IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Buffer_detach(buffer_addr, size, ierror)    USE, INTRINSIC
:: ISO_C_BINDING, ONLY    TYPE(C_PTR), INTENT(OUT) :: buffer_addr    INTEGER,
INTENT(OUT) :: size    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Output
Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]bufR] : Initial buffer address (choice). </dd>

<dt>[bu]</dt>
<dd>C]sizeR] :
Buffer size, in bytes (integer). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status
(integer). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Description</a></h2>
<p>
Detach the buffer currently associated with MPI. The
call returns the address and the size of the detached buffer. This operation
will block until all messages currently in the buffer have been transmitted.
Upon return of this function, the user may reuse or deallocate the space
taken by the buffer. <p>
Example: Calls to attach and detach buffers. <br>
<pre>

</pre>
<h2><a name='sect7' href='#toc7'>C]#define BUFFSIZE 10000int sizechar *buff;<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( malloc(BUFFSIZE),
BUFFSIZE);/* a buffer of 10000 bytes can now be used by <a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a> */MPI_Buffer_detach(
&amp;buff, &amp;size);/* Buffer size reduced to zero */<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( buff, size);/*
Buffer of 10000 bytes available again */R]Notes</a></h2>
<p>
The reason that C]MPI_Buffer_detachR]

<dl>

<dt>returns the address and size </dt>
<dd>of the buffer being detached is to allow nested
libraries to replace and restore the buffer. For example, consider <br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]int size, mysize, idummy;void *ptr, *myptr, *dummy;MPI_Buffer_detach(
&amp;ptr, &amp;size );<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( myptr, mysize );/*... library code ...*/MPI_Buffer_detach(
&amp;dummy, &amp;idummy );<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( ptr, size );R]This is much like the
action of the UNIX signal routine and has the same </dt>
<dd>strengths (it[cq]s simple)
and weak[hy]nesses (it only works for nested usages). </dd>
</dl>
<p>
For Fortran: The Fortran
binding for this routine is different. Because Fortran does not have pointers,
it is impossible to provide a way to use the output of this routine to
exchange buffers. In this case, only the size field is set. <p>
For C: Even though
the buf argument is declared as void, it is really the address of a void
pointer. See Rationale, below, for more details. <p>
Even though the C functions
C]MPI_Buffer_attachR] and C]MPI_Buffer_detachR] both have a first argument
of type void*, these arguments are used differently: A pointer to the buffer
is passed to <a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>; the address of the pointer is passed to
MPI_Buffer_detach, so that this call can return the pointer value.
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
<p>
Almost
all MPI routines return an error value; C routines as the value of the
function and Fortran routines in the last argument. <p>
Before the error value
is returned, the current MPI error handler is called. By default, this error
handler aborts the MPI job, except for I/O function errors. The error handler
may be changed with C]MPI_Comm_set_errhandlerR]; the predefined error handler
C]MPI_ERRORS_RETURNR] may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<p>
<i><a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>(3)</i> <i><a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a>(3)</i> <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Buffer_detach(void *buf, int *size)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_BUFFER_DETACH(BUF, SIZE, IERROR)    <type>  BUF(*)    INTEGER SIZE, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Buffer_detach(buffer_addr, size, ierror)    USE, INTRINSIC :: ISO_C_BINDING, ONLY    TYPE(C_PTR), INTENT(OUT) :: buffer_addr    INTEGER, INTENT(OUT) :: size    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Output Parameters</a></li>
<li><a name='toc6' href='#sect6'>Description</a></li>
<li><a name='toc7' href='#sect7'>C]#define BUFFSIZE 10000int sizechar *buff;<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( malloc(BUFFSIZE), BUFFSIZE);/* a buffer of 10000 bytes can now be used by <a href="../man3/MPI_Bsend.3.php">MPI_Bsend</a> */MPI_Buffer_detach( &buff, &size);/* Buffer size reduced to zero */<a href="../man3/MPI_Buffer_attach.3.php">MPI_Buffer_attach</a>( buff, size);/* Buffer of 10000 bytes available again */R]Notes</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
