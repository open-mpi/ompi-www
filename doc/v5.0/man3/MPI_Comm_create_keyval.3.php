<?php
$topdir = "../../..";
$title = "MPI_Comm_create_keyval(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_COMM_CREATE_KEYVAL(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Comm_create_keyvalR] - Generates a new attribute key.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function
  *comm_copy_attr_fn, MPI_Comm_delete_attr_function    *comm_delete_attr_fn,
int *comm_keyval,    void *extra_state)R]Fortran Syntax (See Fortran 77
Notes)</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN,
COMM_DELETE_ATTR_FN,    COMM_KEYVAL, EXTRA_STATE, IERROR)    EXTERNAL COMM_COPY_ATTR_FN,
COMM_DELETE_ATTR_FN    INTEGER COMM_KEYVAL, IERROR     INTEGER(KIND=MPI_ADDRESS_KIND)
EXTRA_STATER]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Comm_create_keyval(comm_copy_attr_fn, comm_delete_attr_fn,
comm_keyval,        extra_state, ierror)    PROCEDURE(MPI_Comm_copy_attr_function)
:: comm_copy_attr_fn    PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn
   INTEGER, INTENT(OUT) :: comm_keyval    INTEGER(KIND=MPI_ADDRESS_KIND),
INTENT(IN) :: extra_state    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input
Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]comm_copy_attr_fnR] : Copy callback function for C]comm_keyvalR]
(function). </dd>

<dt>[bu]</dt>
<dd>C]comm_delete_attr_fnR] : Delete callback function for C]comm_keyvalR]
(function). </dd>

<dt>[bu]</dt>
<dd>C]extra_stateR] : Extra state for callback functions. </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output
Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]comm_keyvalR] : Key value for future access (integer). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR]
: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
This function replaces
C]MPI_Keyval_createR], the use of which is deprecated. The C binding is
identical. The Fortran binding differs in that C]extra_stateR] is an address-sized
integer. Also, the copy and delete callback functions have Fortran bindings
that are consistent with address-sized attributes. The argument C]comm_copy_attr_fnR]
may be specified as C]MPI_COMM_NULL_COPY_FNR] or C]MPI_COMM_DUP_FNR] from
C or Fortran. C]MPI_COMM_NULL_COPY_FNR] is a function that does nothing
more than returning C]flag = 0R] and C]MPI_SUCCESSR]. C]MPI_COMM_DUP_FNR]
is a simple-minded copy function that sets C]flag = 1R], returns the value
of C]attribute_val_inR] in C]attribute_val_outR], and returns C]MPI_SUCCESSR].
These replace the MPI-1 predefined callbacks C]MPI_NULL_COPY_FNR] and C]MPI_DUP_FNR],
the use of which is deprecated. The two C callback functions are: <br>
<pre>

</pre><p>

<dl>

<dt>C]typedef int MPI_Comm_copy_attr_function(MPI_Comm oldcomm, int comm_keyval,
            void *extra_state, void *attribute_val_in,             void
*attribute_val_out, int *flag);typedef int MPI_Comm_delete_attr_function(MPI_Comm
comm, int comm_keyval,             void *attribute_val, void *extra_state);R]which
are the same as the MPI-1.1 calls but with a new name. </dt>
<dd>The old names are deprecated.
The two Fortran callback functions are: <br>
<pre>

</pre></dd>
</dl>

<h3><a name='sect8' href='#toc8'>C]SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE,
       ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)    INTEGER OLDCOMM,
COMM_KEYVAL, IERROR    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,
       ATTRIBUTE_VAL_OUT    LOGICAL FLAGSUBROUTINE COMM_DELETE_ATTR_FN(COMM,
COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE,             IERROR)    INTEGER
COMM, COMM_KEYVAL, IERROR    INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL,
EXTRA_STATER]Fortran 77 Notes</a></h3>
<p>

<dl>

<dt>The MPI standard prescribes portable Fortran
syntax for the </dt>
<dd>C]EXTRA_STATER] argument only for Fortran 90. FORTRAN 77
users may use the non-portable syntax <br>
<pre>

</pre></dd>
</dl>
<p>

<dl>

<dt>C]INTEGER*MPI_ADDRESS_KIND EXTRA_STATER]where C]MPI_ADDRESS_KINDR] is a
constant defined in mpif.h and </dt>
<dd>gives the length of the declared integer
in bytes. </dd>
</dl>

<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines return an error value; C routines
as the value of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is called.
By default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error. See the MPI man page for a full list
of MPI error codes. SEE ALSO
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function    *comm_copy_attr_fn, MPI_Comm_delete_attr_function    *comm_delete_attr_fn, int *comm_keyval,    void *extra_state)R]Fortran Syntax (See Fortran 77 Notes)</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN,    COMM_KEYVAL, EXTRA_STATE, IERROR)    EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN    INTEGER COMM_KEYVAL, IERROR     INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATER]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Comm_create_keyval(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval,        extra_state, ierror)    PROCEDURE(MPI_Comm_copy_attr_function) :: comm_copy_attr_fn    PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn    INTEGER, INTENT(OUT) :: comm_keyval    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<ul>
<li><a name='toc8' href='#sect8'>C]SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE,             ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)    INTEGER OLDCOMM, COMM_KEYVAL, IERROR    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,        ATTRIBUTE_VAL_OUT    LOGICAL FLAGSUBROUTINE COMM_DELETE_ATTR_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE,             IERROR)    INTEGER COMM, COMM_KEYVAL, IERROR    INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATER]Fortran 77 Notes</a></li>
</ul>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
