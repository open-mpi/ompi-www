<?php
$topdir = "../../..";
$title = "MPI_Get_address(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GET_ADDRESS(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Get_addressR] - Gets the address of a location in memory.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Get_address(const void *location, MPI_Aint *address)R]Fortran
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GET_ADDRESS(LOCATION,
ADDRESS, IERROR)    &lt;type&gt; LOCATION(*)    INTEGER(KIND=MPI_ADDRESS_KIND)
ADDRESS    INTEGER IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Get_address(location, address, ierror)    TYPE(*), DIMENSION(..),
ASYNCHRONOUS :: location    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT)
:: address    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]locationR]
: Location in caller memory (choice). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]addressR] :
Address of location (integer). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status
(integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Get_addressR] returns the byte C]addressR] of
a location in memory. <p>
Example: Using C]MPI_Get_addressR] for an array. <br>
<pre>

</pre>
<h2><a name='sect8' href='#toc8'>C]EAL A(100,100)    INTEGER I1, I2, DIFF    CALL MPI_GET_ADDRESS(A(1,1),
I1, IERROR)    CALL MPI_GET_ADDRESS(A(10,10), I2, IERROR)    DIFF = I2
- I1! The value of DIFF is 909*sizeofreal; the values of I1 and I2 are!
implementation dependent.R]Notes</a></h2>
<p>

<dl>

<dt>Current Fortran MPI codes will run unmodified
and will port to any </dt>
<dd>system. However, they may fail if C]addressesR] larger
than 2[ha]32 - 1 are used in the program. New codes should be written so
that they use the new functions. This provides compatibility with C and
avoids errors on 64-bit architectures. However, such newly written codes
may need to be (slightly) rewritten to port to old Fortran 77 environments
that do not support KIND declarations. </dd>
</dl>

<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. <p>
Before the error value is returned, the current MPI
error handler is called. By default, this error handler aborts the MPI job,
except for I/O function errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error. <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Get_address(const void *location, MPI_Aint *address)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GET_ADDRESS(LOCATION, ADDRESS, IERROR)    <type> LOCATION(*)    INTEGER(KIND=MPI_ADDRESS_KIND) ADDRESS    INTEGER IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Get_address(location, address, ierror)    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: location    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: address    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>C]EAL A(100,100)    INTEGER I1, I2, DIFF    CALL MPI_GET_ADDRESS(A(1,1), I1, IERROR)    CALL MPI_GET_ADDRESS(A(10,10), I2, IERROR)    DIFF = I2 - I1! The value of DIFF is 909*sizeofreal; the values of I1 and I2 are! implementation dependent.R]Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
