<?php
$topdir = "../../..";
$title = "MPI_Get_accumulate(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GET_ACCUMULATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Get_accumulateR], C]MPI_Rget_accumulateR] - Combines the contents
of the origin buffer with that of a target buffer and returns the target
buffer value.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Get_accumulate(const void *origin_addr, int origin_count,
   MPI_Datatype origin_datatype, void *result_addr,    int result_count,
MPI_Datatype result_datatype,    int target_rank, MPI_Aint target_disp,
int target_count,    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)int
<a href="../man3/MPI_Rget_accumulate.3.php">MPI_Rget_accumulate</a>(const void *origin_addr, int origin_count,    MPI_Datatype
origin_datatype, void *result_addr,    int result_count, MPI_Datatype result_datatype,
   int target_rank, MPI_Aint target_disp, int target_count,    MPI_Datatype
target_datatype, MPI_Op op, MPI_Win win,    MPI_Request *request)R]Fortran
Syntax (See Fortran 77 Notes)</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GET_ACCUMULATE(ORIGIN_ADDR,
ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,        RESULT_COUNT, RESULT_DATATYPE,
TARGET_RANK, TARGET_DISP, TARGET_COUNT,        TARGET_DATATYPE, OP, WIN,
IERROR)    &lt;type&gt; ORIGIN_ADDR, RESULT_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND)
TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
       TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERRORMPI_RGET_ACCUMULATE(ORIGIN_ADDR,
ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,        RESULT_COUNT, RESULT_DATATYPE,
TARGET_RANK, TARGET_DISP, TARGET_COUNT,        TARGET_DATATYPE, OP, WIN,
REQUEST, IERROR)    &lt;type&gt; ORIGIN_ADDR, RESULT_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND)
TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
       TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERRORR]Fortran
2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Get_accumulate(origin_addr, origin_count, origin_datatype,
result_addr,        result_count, result_datatype, target_rank, target_disp,
       target_count, target_datatype, op, win, ierror)    TYPE(*), DIMENSION(..),
INTENT(IN) :: origin_addr    TYPE(*), DIMENSION(..) :: result_addr    INTEGER,
INTENT(IN) :: origin_count, result_count, target_rank, target_count
TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype
   INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist    TYPE(MPI_Op),
INTENT(IN) :: op    TYPE(MPI_Win), INTENT(IN) :: win    INTEGER, OPTIONAL,
INTENT(OUT) :: ierrorMPI_Rget_accumulate(origin_addr, origin_count, origin_datatype,
       result_addr, result_count, result_datatype, target_rank,
target_disp, target_count, target_datatype, op, win, request,        ierror)
   TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr    TYPE(*), DIMENSION(..)
:: result_addr    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank,
target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype,
result_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist
   TYPE(MPI_Op), INTENT(IN) :: op    TYPE(MPI_Win), INTENT(IN) :: win
  TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT)
:: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]origin_addrR] : Initial address of buffer
(choice). </dd>

<dt>[bu]</dt>
<dd>C]origin_countR] : Number of entries in buffer (nonnegative
integer). </dd>

<dt>[bu]</dt>
<dd>C]origin_datatypeR] : Data type of each buffer entry (handle).
</dd>

<dt>[bu]</dt>
<dd>C]result_addrR] : Initial address of result buffer (choice). </dd>

<dt>[bu]</dt>
<dd>C]result_countR]
: Number of entries in result buffer (nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]result_datatypeR]
: Data type of each result buffer entry (handle). </dd>

<dt>[bu]</dt>
<dd>C]target_rankR] :
Rank of target (nonnegative integer). </dd>

<dt>[bu]</dt>
<dd>C]target_dispR] : Displacement
from start of window to beginning of target buffer (nonnegative integer).
</dd>

<dt>[bu]</dt>
<dd>C]target_countR] : Number of entries in target buffer (nonnegative
integer). </dd>

<dt>[bu]</dt>
<dd>C]target_datatypeR] : Data type of each entry in target buffer
(handle). </dd>

<dt>[bu]</dt>
<dd>C]opR] : Reduce operation (handle). </dd>

<dt>[bu]</dt>
<dd>C]winR] : Window object
(handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameter</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]MPI_Rget_accumulateR]: RMA request </dd>

<dt>[bu]</dt>
<dd>C]IERRORR]
: Fortran only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Get_accumulateR]
is a function used for one-sided MPI communication that adds the contents
of the origin buffer (as defined by C]origin_addrR], C]origin_countR],
and C]origin_datatypeR]) to the buffer specified by the arguments C]target_countR]
and C]target_datatypeR], at offset C]target_dispR], in the target window
specified by C]target_rankR] and C]winR], using the operation C]opR]. C]MPI_Get_accumulateR]
returns in the result buffer C]result_addrR] the contents of the target
buffer before the accumulation. <p>
Any of the predefined operations for C]MPI_ReduceR],
as well as C]MPI_NO_OP,R] can be used. User-defined functions cannot be used.
For example, if C]opR] is C]MPI_SUMR], each element of the origin buffer
is added to the corresponding element in the target, replacing the former
value in the target. <p>
Each datatype argument must be a predefined data type
or a derived data type, where all basic components are of the same predefined
data type. Both datatype arguments must be constructed from the same predefined
data type. The operation C]opR] applies to elements of that predefined type.
The C]target_datatypeR] argument must not specify overlapping entries,
and the target buffer must fit in the target window. <p>
A new predefined operation,
C]MPI_REPLACER], is defined. It corresponds to the associative function
f(a, b) =b; that is, the current value in the target memory is replaced
by the value supplied by the origin. <p>
A new predefined operation, C]MPI_NO_OPR],
is defined. It corresponds to the assiciative function f(a, b) = a; that
is the current value in the target memory is returned in the result buffer
at the origin and no operation is performed on the target buffer. <p>
C]MPI_Rget_accumulateR]
is similar to C]MPI_Get_accumulateR], except that it allocates a communication
request object and associates it with the request handle (the argument
request) that can be used to wait or test for completion. The completion
of an C]MPI_Rget_accumulateR] operation indicates that the data is available
in the result buffer and the origin buffer is free to be updated. It does
not indicate that the operation has been completed at the target window.

<h2><a name='sect8' href='#toc8'>Fortran 77 Notes</a></h2>
<p>
The MPI standard prescribes portable Fortran syntax for
the C]TARGET_DISPR] argument only for Fortran 90. FORTRAN 77 users may use
the non-portable syntax <br>
<pre>

</pre><p>

<dl>

<dt>C]INTEGER*MPI_ADDRESS_KIND TARGET_DISPR]where MPI_ADDRESS_KIND is a constant
defined in mpif.h and gives the </dt>
<dd>length of the declared integer in bytes.
</dd>
</dl>

<h2><a name='sect9' href='#toc9'>Notes</a></h2>
<p>
The generic functionality of C]MPI_Get_accumulateR] might limit the
performance of fetch-and-increment or fetch-and-add calls that might be supported
by special hardware operations. C]MPI_Fetch_and_opR] thus allows for a fast
implementation of a commonly used subset of the functionality of C]MPI_Get_accumulateR].
<p>
C]MPI_GetR] is a special case of C]MPI_Get_accumulateR], with the operation
C]MPI_NO_OPR]. Note, however, that C]MPI_GetR] and C]MPI_Get_accumulateR]
have different constraints on concurrent updates. <p>
It is the user[cq]s responsibility
to guarantee that, when using the accumulate functions, the target displacement
argument is such that accesses to the window are properly aligned according
to the data type arguments in the call to the C]MPI_Get_accumulateR] function.

<h2><a name='sect10' href='#toc10'>Errors</a></h2>
<p>
Almost all MPI routines return an error value; C routines as the
value of the function and Fortran routines in the last argument. <p>
Before
the error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect11' href='#toc11'>See Also</a></h2>
<p>
C]MPI_PutR](3) C]MPI_GetR](3)
C]MPI_AccumulateR](3) C]MPI_Fetch_and_opR](3) C]MPI_ReduceR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Get_accumulate(const void *origin_addr, int origin_count,    MPI_Datatype origin_datatype, void *result_addr,    int result_count, MPI_Datatype result_datatype,    int target_rank, MPI_Aint target_disp, int target_count,    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)int <a href="../man3/MPI_Rget_accumulate.3.php">MPI_Rget_accumulate</a>(const void *origin_addr, int origin_count,    MPI_Datatype origin_datatype, void *result_addr,    int result_count, MPI_Datatype result_datatype,    int target_rank, MPI_Aint target_disp, int target_count,    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,    MPI_Request *request)R]Fortran Syntax (See Fortran 77 Notes)</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,        TARGET_DATATYPE, OP, WIN, IERROR)    <type> ORIGIN_ADDR, RESULT_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERRORMPI_RGET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,        TARGET_DATATYPE, OP, WIN, REQUEST, IERROR)    <type> ORIGIN_ADDR, RESULT_ADDR(*)    INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Get_accumulate(origin_addr, origin_count, origin_datatype, result_addr,        result_count, result_datatype, target_rank, target_disp,        target_count, target_datatype, op, win, ierror)    TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr    TYPE(*), DIMENSION(..) :: result_addr    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist    TYPE(MPI_Op), INTENT(IN) :: op    TYPE(MPI_Win), INTENT(IN) :: win    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Rget_accumulate(origin_addr, origin_count, origin_datatype,        result_addr, result_count, result_datatype, target_rank,        target_disp, target_count, target_datatype, op, win, request,        ierror)    TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr    TYPE(*), DIMENSION(..) :: result_addr    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist    TYPE(MPI_Op), INTENT(IN) :: op    TYPE(MPI_Win), INTENT(IN) :: win    TYPE(MPI_Request), INTENT(OUT) :: request    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameter</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Fortran 77 Notes</a></li>
<li><a name='toc9' href='#sect9'>Notes</a></li>
<li><a name='toc10' href='#sect10'>Errors</a></li>
<li><a name='toc11' href='#sect11'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
