<?php
$topdir = "../../..";
$title = "MPI_Comm_create_group(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_COMM_CREATE_GROUP(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Comm_create_groupR] - Creates a new communicator.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group,
int tag, MPI_Comm *newcomm)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_CREATE_GROUP(COMM,
GROUP, TAG, NEWCOMM, IERROR)    INTEGER COMM, GROUP, TAG, NEWCOMM, IERRORR]Fortran
2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Comm_create_group(comm, group, tag, newcomm, ierror)
  TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Group), INTENT(IN) ::
group    INTEGER, INTENT(IN) :: tag    TYPE(MPI_Comm), INTENT(OUT) :: newcomm
   INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]commR]
: Communicator (handle). </dd>

<dt>[bu]</dt>
<dd>C]groupR] : Group, which is a subset of the
group of comm (handle). </dd>

<dt>[bu]</dt>
<dd>C]tagR] : Tag (integer). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]newcommR]
: New communicator (handle). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran only: Error status
(integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Comm_create_groupR] is similar to C]MPI_Comm_createR];
however, C]MPI_Comm_createR] must be called by all processes in the C]groupR]
of C]commR], whereas C]MPI_Comm_create_groupR] must be called by all processes
in C]groupR], which is a subgroup of the C]groupR] of C]commR]. In addition,
C]MPI_Comm_create_groupR] requires that C]commR] is an intracommunicator.
C]MPI_Comm_create_groupR] returns a new intracommunicator, C]newcommR],
for which the C]groupR] argument defines the communication C]groupR]. No
cached information propagates from C]commR] to C]newcommR]. Each process
must provide a C]groupR] argument that is a subC]groupR] of the C]groupR]
associated with C]commR]; this could be C]MPI_GROUP_EMPTYR]. If a non-empty
C]groupR] is specified, then all processes in that C]groupR] must call
the function, and each of these processes must provide the same arguments,
including a C]groupR] that contains the same members with the same ordering.
Otherwise the call is erroneous. If the calling process is a member of the
C]groupR] given as the C]groupR] argument, then C]newcommR] is a communicator
with C]groupR] as its associated C]groupR]. If the calling process is not
a member of C]groupR], e.g., C]groupR] is C]MPI_GROUP_EMPTYR], then the call
is a local operation and C]MPI_COMM_NULLR] is returned as C]newcommR].
<h2><a name='sect8' href='#toc8'>Notes</a></h2>
<p>
C]MPI_Comm_create_groupR]
provides a means of making a subset of processes for the purpose of separate
MIMD computation, with separate communication space. C]newcommR], which
is created by C]MPI_Comm_create_groupR], can be used in subsequent calls
to C]MPI_Comm_create_groupR] (or other communicator constructors) to further
subdivide a computation into parallel sub-computations. A more general service
is provided by C]MPI_Comm_splitR].
<h2><a name='sect9' href='#toc9'>Errors</a></h2>
<p>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. Before the error value is returned, the current MPI
error handler is called. By default, this error handler aborts the MPI job,
except for I/O function errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
C]MPI_Comm_createR](3) <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_COMM_CREATE_GROUP(COMM, GROUP, TAG, NEWCOMM, IERROR)    INTEGER COMM, GROUP, TAG, NEWCOMM, IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Comm_create_group(comm, group, tag, newcomm, ierror)    TYPE(MPI_Comm), INTENT(IN) :: comm    TYPE(MPI_Group), INTENT(IN) :: group    INTEGER, INTENT(IN) :: tag    TYPE(MPI_Comm), INTENT(OUT) :: newcomm    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Notes</a></li>
<li><a name='toc9' href='#sect9'>Errors</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
