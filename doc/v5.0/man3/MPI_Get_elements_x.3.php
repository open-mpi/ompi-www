<?php
$topdir = "../../..";
$title = "MPI_Get_elements_x(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GET_ELEMENTS_X(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
  <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Get_elementsR], C]MPI_Get_elements_xR] - Returns the number
of basic elements in a data type.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int <a href="../man3/MPI_Get_elements.3.php">MPI_Get_elements</a>(const MPI_Status *status, MPI_Datatype
datatype,    int *count)int MPI_Get_elements_x(const MPI_Status *status,
MPI_Datatype datatype,    MPI_Count *count)R]Fortran Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Get_elements.3.php">MPI_GET_ELEMENTS</a>(STATUS,
DATATYPE, COUNT, IERROR)    INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE,
COUNT, IERRORMPI_GET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)    INTEGER
STATUS(MPI_STATUS_SIZE), DATATYPE        INTEGER(KIND=MPI_COUNT_KIND) COUNT
       INTEGER IERRORR]Fortran 2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Get_elements(status, datatype, count, ierror)    TYPE(MPI_Status),
INTENT(IN) :: status    TYPE(MPI_Datatype), INTENT(IN) :: datatype    INTEGER,
INTENT(OUT) :: count    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Get_elements_x(status,
datatype, count, ierror)    TYPE(MPI_Status), INTENT(IN) :: status    TYPE(MPI_Datatype),
INTENT(IN) :: datatype    INTEGER(KIND = MPI_COUNT_KIND), INTENT(OUT) ::
count    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]statusR]
: Return status of receive operation (status). </dd>

<dt>[bu]</dt>
<dd>C]datatypeR] : Datatype
used by receive operation (handle). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran
only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Get_elementsR] and C]MPI_Get_elements_xR]
behave different from C]MPI_Get_countR], which returns the number of [lq]top-level
entries[rq] received, i.e., the number of [lq]copies[rq] of type C]datatypeR].
C]MPI_Get_countR] may return any integer value k, where 0 =&lt; k =&lt; count. If
C]MPI_Get_countR] returns k, then the number of basic elements received
(and the value returned by C]MPI_Get_elementsR] and C]MPI_Get_elements_xR])
is n k, where n is the number of basic elements in the type map of C]datatypeR].
If the number of basic elements received is not a multiple of n, that is,
if the receive operation has not received an integral number of C]datatypeR]
[lq]copies,[rq] then C]MPI_Get_countR] returns the value C]MPI_UNDEFINED.R]
For both functions, if the count parameter cannot express the value to
be returned (e.g., if the parameter is too small to hold the output value),
it is set to C]MPI_UNDEFINEDR]. <p>
Example: Usage of C]MPI_Get_countR] and
C]MPI_Get_elementR]: <br>
<pre>

</pre><p>

<dl>

<dt>C]//...<a href="../man3/MPI_Type_contiguous.3.php">MPI_TYPE_CONTIGUOUS</a>(2, MPI_REAL, Type2, ierr)<a href="../man3/MPI_Type_commit.3.php">MPI_TYPE_COMMIT</a>(Type2,
ierr)//      ...<a href="../man3/MPI_Comm_rank.3.php">MPI_COMM_RANK</a>(comm, rank, ierr)IF(rank.EQ.0) THEN    CALL <a href="../man3/MPI_Send.3.php">MPI_SEND</a>(a,
2, MPI_REAL, 1, 0, comm, ierr)    CALL <a href="../man3/MPI_Send.3.php">MPI_SEND</a>(a, 3, MPI_REAL, 1, 0, comm,
ierr)ELSE    CALL <a href="../man3/MPI_Recv.3.php">MPI_RECV</a>(a, 2, Type2, 0, 0, comm, stat, ierr)    CALL
<a href="../man3/MPI_Get_count.3.php">MPI_GET_COUNT</a>(stat, Type2, i, ierr)     ! returns i=1    CALL <a href="../man3/MPI_Get_elements.3.php">MPI_GET_ELEMENTS</a>(stat,
Type2, i, ierr)  ! returns i=2    CALL <a href="../man3/MPI_Recv.3.php">MPI_RECV</a>(a, 2, Type2, 0, 0, comm,
stat, ierr)    CALL <a href="../man3/MPI_Get_count.3.php">MPI_GET_COUNT</a>(stat, Type2, i, ierr) ! returns i=MPI_UNDEFINED
   CALL <a href="../man3/MPI_Get_elements.3.php">MPI_GET_ELEMENTS</a>(stat, Type2, i, ierr)  ! returns i=3END IFR]The
function C]MPI_Get_elementsR] can also be used after a probe </dt>
<dd>to find the
number of elements in the probed message. Note that the two functions C]MPI_Get_countR]
and C]MPI_Get_elementsR] return the same values when they are used with
primitive data types. </dd>
</dl>

<h2><a name='sect8' href='#toc8'>Errors</a></h2>
<p>
Almost all MPI routines return an error value;
C routines as the value of the function and Fortran routines in the last
argument. <p>
Before the error value is returned, the current MPI error handler
is called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect9' href='#toc9'>Fortran 77 Notes</a></h2>
<p>
The MPI standard prescribes
portable Fortran syntax for the COUNT argument of C]MPI_Get_elements_xR]
only for Fortran 90. FORTRAN 77 users may use the non-portable syntax <br>
<pre>

</pre><p>

<dl>

<dt>C]INTEGER*MPI_COUNT_KIND COUNTR]where C]MPI_COUNT_KINDR] is a constant
defined in mpif.h and gives </dt>
<dd>the length of the declared integer in bytes.
</dd>
</dl>

<h2><a name='sect10' href='#toc10'>See Also</a></h2>
<p>
C]MPI_Get_countR](3)  <p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int <a href="../man3/MPI_Get_elements.3.php">MPI_Get_elements</a>(const MPI_Status *status, MPI_Datatype datatype,    int *count)int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype,    MPI_Count *count)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]<a href="../man3/MPI_Get_elements.3.php">MPI_GET_ELEMENTS</a>(STATUS, DATATYPE, COUNT, IERROR)    INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERRORMPI_GET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)    INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE        INTEGER(KIND=MPI_COUNT_KIND) COUNT        INTEGER IERRORR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Get_elements(status, datatype, count, ierror)    TYPE(MPI_Status), INTENT(IN) :: status    TYPE(MPI_Datatype), INTENT(IN) :: datatype    INTEGER, INTENT(OUT) :: count    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorMPI_Get_elements_x(status, datatype, count, ierror)    TYPE(MPI_Status), INTENT(IN) :: status    TYPE(MPI_Datatype), INTENT(IN) :: datatype    INTEGER(KIND = MPI_COUNT_KIND), INTENT(OUT) :: count    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>Fortran 77 Notes</a></li>
<li><a name='toc10' href='#sect10'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
