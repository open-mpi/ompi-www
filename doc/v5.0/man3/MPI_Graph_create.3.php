<?php
$topdir = "../../..";
$title = "MPI_Graph_create(3) man page (version 5.0.0rc1)";
$meta_desc = "Open MPI v5.0.0rc1 man page: MPI_GRAPH_CREATE(3)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
   <!-- manual page source format generated by PolyglotMan v3.2, -->
<!-- available at http://polyglotman.sourceforge.net/ -->

<body bgcolor='white'>
<a href='#toc'>Table of Contents</a><p>

<h2><a name='sect0' href='#toc0'>Name</a></h2>
<p>
C]MPI_Graph_createR] - Makes a new communicator to which topology
information has been attached.
<h2><a name='sect1' href='#toc1'>Syntax</a></h2>

<h3><a name='sect2' href='#toc2'>C Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect3' href='#toc3'>C]#include &lt;mpi.h&gt;int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const
int index[],    const int edges[], int reorder, MPI_Comm *comm_graph)R]Fortran
Syntax</a></h3>
<br>
<pre>

</pre>
<h3><a name='sect4' href='#toc4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GRAPH_CREATE(COMM_OLD,
NNODES, INDEX, EDGES, REORDER,        COMM_GRAPH, IERROR)    INTEGER COMM_OLD,
NNODES, INDEX(*), EDGES(*)    INTEGER COMM_GRAPH, IERROR    LOGICAL   REORDERR]Fortran
2008 Syntax</a></h3>
<br>
<pre>

</pre>
<h2><a name='sect5' href='#toc5'>C]USE mpi_f08MPI_Graph_create(comm_old, nnodes, index, edges, reorder,
comm_graph,        ierror)    TYPE(MPI_Comm), INTENT(IN) :: comm_old
 INTEGER, INTENT(IN) :: nnodes, <i>index(nnodes)</i>, edges(*)    LOGICAL, INTENT(IN)
:: reorder    TYPE(MPI_Comm), INTENT(OUT) :: comm_graph    INTEGER, OPTIONAL,
INTENT(OUT) :: ierrorR]Input Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]comm_oldR] : Input communicator
without topology (handle). </dd>

<dt>[bu]</dt>
<dd>C]nnodesR] : Number of nodes in graph (integer).
</dd>

<dt>[bu]</dt>
<dd>C]indexR] : Array of integers describing node degrees (see below). </dd>

<dt>[bu]</dt>
<dd>C]edgesR]
: Array of integers describing graph edges (see below). </dd>

<dt>[bu]</dt>
<dd>C]reorderR]
: Ranking may be reordered (true) or not (false) (logical). </dd>
</dl>

<h2><a name='sect6' href='#toc6'>Output Parameters</a></h2>

<dl>

<dt>[bu]</dt>
<dd>C]comm_graphR]
: Communicator with graph topology added (handle). </dd>

<dt>[bu]</dt>
<dd>C]IERRORR] : Fortran
only: Error status (integer). </dd>
</dl>

<h2><a name='sect7' href='#toc7'>Description</a></h2>
<p>
C]MPI_Graph_createR] returns a
handle to a new communicator to which the graph topology information is
attached. If C]reorderR] = false then the rank of each process in the new
group is identical to its rank in the old group. Otherwise, the function
may C]reorderR] the processes. If the size, C]nnodesR], of the graph is
smaller than the size of the group of C]comm_oldR], then some processes
are returned C]MPI_COMM_NULLR], in analogy to C]MPI_Cart_createR] and C]MPI_Comm_splitR].
The call is erroneous if it specifies a graph that is larger than the group
size of the input communicator. <p>
The three parameters C]nnodesR], C]indexR],
and C]edgesR] define the graph structure. C]nnodesR] is the number of nodes
of the graph. The nodes are numbered from 0 to C]nnodesR]-1. The ith entry
of array C]indexR] stores the total number of neighbors of the first i
graph nodes. The lists of neighbors of nodes 0, 1, ..., C]nnodesR]-1 are stored
in consecutive locations in array C]edgesR]. The array C]edgesR] is a flattened
representation of the edge lists. The total number of entries in C]indexR]
is C]nnodesR] and the total number of entries in C]edgesR] is equal to
the number of graph C]edgesR]. <p>
The definitions of the arguments C]nnodesR],
C]indexR], and C]edgesR] are illustrated with the following simple example.
<p>
Example: Assume there are four processes 0, 1, 2, 3 with the following
adjacency matrix: <p>
<table border='0'>
<tr><td align='left'>Process</td><td align='left'>Neighbors </td></tr>
<tr> <tr><td align='left'>0 </td><td align='left'>1, 3 </td></tr>
<tr><td align='left'>1 </td><td align='left'>0 </td></tr>
<tr><td align='left'>2 </td><td align='left'>3 </td></tr>
<tr><td align='left'>3 </td><td align='left'>0, 2 </td></tr>
</table>
 <p>
Then, the input
arguments are: * C]nodesR] = 4 * C]indexR] = 2, 3, 4, 6 * C]edgesR] = 1,
3, 0, 3, 0, 2 <p>
Thus, in C, C]index[0]R] is the degree of C]nodeR] zero,
and C]index[i]R] - C]index[i-1]R] is the degree of C]nodeR] i, i=1, . . . ,
nnodes-1; the list of neighbors of node zero is stored in C]edges[j]R],
for 0 &lt;= j &lt;= C]index[0] - 1R] and the list of neighbors of C]nodeR] i, i
&gt; 0 , is stored in C]edges[j]R], C]index[i-1]R] &lt;= j &lt;= C]index[i] - 1R]. <p>
In
Fortran, C]<i>index(1)</i>R] is the degree of C]nodeR] zero, and C]index(i+1)R]
- C]index(i)R] is the degree of C]nodeR] i, i=1, . . . , nnodes-1; the list
of neighbors of C]nodeR] zero is stored in C]edges(j)R], for 1 &lt;= j &lt;= C]<i>index(1)</i>R]
and the list of neighbors of C]nodeR] i, i &gt; 0, is stored in C]edges(j)R],
C]index(i) + 1R] &lt;= j &lt;= C]index(i + 1)R].
<h2><a name='sect8' href='#toc8'>Errors</a></h2>
<p>
Almost all MPI routines return
an error value; C routines as the value of the function and Fortran routines
in the last argument. <p>
Before the error value is returned, the current MPI
error handler is called. By default, this error handler aborts the MPI job,
except for I/O function errors. The error handler may be changed with C]MPI_Comm_set_errhandlerR];
the predefined error handler C]MPI_ERRORS_RETURNR] may be used to cause
error values to be returned. Note that MPI does not guarantee that an MPI
program can continue past an error.
<h2><a name='sect9' href='#toc9'>See Also</a></h2>
<p>
C]MPI_Graph_getR](3) C]MPI_Graphdims_getR](3)
<p>

<hr><p>
<a name='toc'><b>Table of Contents</b></a><p>
<ul>
<li><a name='toc0' href='#sect0'>Name</a></li>
<li><a name='toc1' href='#sect1'>Syntax</a></li>
<ul>
<li><a name='toc2' href='#sect2'>C Syntax</a></li>
<li><a name='toc3' href='#sect3'>C]#include <mpi.h>int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],    const int edges[], int reorder, MPI_Comm *comm_graph)R]Fortran Syntax</a></li>
<li><a name='toc4' href='#sect4'>C]USE MPI! or the older form: INCLUDE [aq]mpif.h[aq]MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER,        COMM_GRAPH, IERROR)    INTEGER COMM_OLD, NNODES, INDEX(*), EDGES(*)    INTEGER COMM_GRAPH, IERROR    LOGICAL   REORDERR]Fortran 2008 Syntax</a></li>
</ul>
<li><a name='toc5' href='#sect5'>C]USE mpi_f08MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph,        ierror)    TYPE(MPI_Comm), INTENT(IN) :: comm_old    INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*)    LOGICAL, INTENT(IN) :: reorder    TYPE(MPI_Comm), INTENT(OUT) :: comm_graph    INTEGER, OPTIONAL, INTENT(OUT) :: ierrorR]Input Parameters</a></li>
<li><a name='toc6' href='#sect6'>Output Parameters</a></li>
<li><a name='toc7' href='#sect7'>Description</a></li>
<li><a name='toc8' href='#sect8'>Errors</a></li>
<li><a name='toc9' href='#sect9'>See Also</a></li>
</ul>


<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
